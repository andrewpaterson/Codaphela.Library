#include "CalculatorOperator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCalculatorOperator::Init(char* szSymbol, ECalcOperator eOperator, uint16 iPrecedence)
{
	mszSymbol.Init(szSymbol);
	meOperator = eOperator;
	miPrecedence = iPrecedence;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCalculatorOperator::Init(void)
{
	mszSymbol.Init();
	meOperator = CO_Invalid;
	miPrecedence = MAX_USHORT;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCalculatorOperator::Kill(void)
{
	mszSymbol.Kill();
	meOperator = CO_Invalid;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CCalculatorOperator::GetSymbol(void)
{
	return mszSymbol.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
ECalcOperator CCalculatorOperator::GetOperator(void)
{
	return meOperator;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CCalculatorOperator::GetPrecedence(void)
{
	return miPrecedence;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CArrayCalculatorOperators::Kill(void)
{
	size					i;
	size					uiNumElements;
	CCalculatorOperator*	pcOperator;

	uiNumElements = NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		pcOperator = Get(i);
		pcOperator->Kill();
	}

	__CArrayCalculatorOperators::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CCalculatorOperator* CArrayCalculatorOperators::Add(char* szSymbol, ECalcOperator eOperator, uint16 iPrecedence)
{
	CCalculatorOperator* pcOperator;

	pcOperator = __CArrayCalculatorOperators::Add();
	pcOperator->Init(szSymbol, eOperator, iPrecedence);
	return pcOperator;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CArrayCalculatorOperators::Add(void)
{
	CCalculatorOperator* pcOperator;

	pcOperator = __CArrayCalculatorOperators::Add();
	pcOperator->Init();
}
