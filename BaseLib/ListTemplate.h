#ifndef __LIST_TEMPLATE_H__
#define __LIST_TEMPLATE_H__
#include "ConstructorCall.h"
#include "ListBlock.h"


template<class M>
class CListTemplate : public CListBlock, protected CPostMalloc<M>
{
public:
	void	Init(void);
	void	Init(uint16 iAlignment);
	void	Init(uint16 iAlignment, int16 iOffset);
	void	Kill(void);

	M*		Add(void);
	M*		Add(M* pvData);
	M* 		AddGetIndex(size* piIndex);

	M*		Get(size iIndex);
	M*		SafeGet(size iIndex);
	size	GetIndex(M* pvElement);
	M*		Tail(void);

	M* 		InsertAt(size iIndex);
	M* 		InsertAt(M* pvData, size iIndex);

	void	Pop(M* pvData);
	M*	 	Push(M* pvElement);
	M*		Push(void);

	bool	Contains(M* pvData);

	bool	Set(size iIndex, M* pvData);
	bool	SafeSet(size iIndex, M* pvData);
};


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CListTemplate<M>::Init(void)
{
	CListBlock::Init(sizeof(M));
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CListTemplate<M>::Init(uint16 iAlignment)
{
	CListBlock::Init(sizeof(M), iAlignment);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CListTemplate<M>::Init(uint16 iAlignment, int16 iOffset)
{
	CListBlock::Init(sizeof(M), iAlignment, iOffset);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CListTemplate<M>::Kill(void)
{
	CListBlock::Kill();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Add(void)
{
	return PostMalloc((M*)CListBlock::Add());
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Add(M* pvData)
{
	return (M*)CListBlock::Add(pvData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::AddGetIndex(size* piIndex)
{
	return PostMalloc((M*)CListBlock::AddGetIndex(piIndex));
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Get(size iIndex)
{
	return (M*)CListBlock::Get(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::SafeGet(size iIndex)
{
	return (M*)CListBlock::SafeGet(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
size CListTemplate<M>::GetIndex(M* pvElement)
{
	return CListBlock::GetIndex(pvElement);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Tail(void)
{
	return (M*)CListBlock::Tail();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::InsertAt(size iIndex)
{
	return PostMalloc((M*)CListBlock::InsertAt(iIndex));
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::InsertAt(M* pvData, size iIndex)
{
	return PostMalloc((M*)CListBlock::InsertAt(pvData, iIndex));
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CListTemplate<M>::Pop(M* pvData)
{
	CListBlock::Pop(pvData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Push(M* pvElement)
{
	return (M*)CListBlock::Push(pvElement);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CListTemplate<M>::Push(void)
{
	return (M*)CListBlock::Push();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
bool CListTemplate<M>::Contains(M* pvData)
{
	return CListBlock::Contains(pvData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
bool CListTemplate<M>::Set(size iIndex, M* pvData)
{
	return CListBlock::Set(iIndex, pvData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
bool CListTemplate<M>::SafeSet(size iIndex, M* pvData)
{
	return CListBlock::SafeSet(iIndex, pvData);
}


#endif // __LIST_TEMPLATE_H__

