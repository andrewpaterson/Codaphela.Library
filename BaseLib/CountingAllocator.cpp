#include "DataMacro.h"
#include "CountingAllocator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCountingAllocator::Init(CMallocator* pcAlloc)
{
	mpcAlloc = pcAlloc;
	mtSize = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCountingAllocator::Kill(void)
{
	mtSize = 0;
	mpcAlloc = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CCountingAllocator::AllocatedSize(void)
{
	return mtSize;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CCountingAllocator::Malloc(size_t tSize)
{
	SCountingMemoryAllocation*	ps;
	
	ps = (SCountingMemoryAllocation*)mpcAlloc->Malloc(tSize + sizeof(SCountingMemoryAllocation));
	if (ps)
	{
		mtSize += tSize;
		ps->tSize = tSize;
		return HeaderGetData<SCountingMemoryAllocation, void>(ps);
	}

	return ps;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CCountingAllocator::Realloc(void* pv, size_t tSize)
{
	SCountingMemoryAllocation*	ps;

	if (pv)
	{
		ps = DataGetHeader<SCountingMemoryAllocation, void>(pv);
		mtSize -= ps->tSize;
	}

	ps = (SCountingMemoryAllocation*)mpcAlloc->Realloc(DataGetHeader<SCountingMemoryAllocation, void>(pv), tSize + sizeof(SCountingMemoryAllocation));
	if (ps)
	{
		mtSize += tSize;
		ps->tSize = tSize;
		return HeaderGetData<SCountingMemoryAllocation, void>(ps);
	}

	return ps;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCountingAllocator::Free(void* pv)
{
	SCountingMemoryAllocation*	ps;

	if (pv)
	{
		ps = DataGetHeader<SCountingMemoryAllocation, void>(pv);
		mtSize -= ps->tSize;
		mpcAlloc->Free(ps);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const char* CCountingAllocator::GetName(void)
{
	return mpcAlloc->GetName();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CCountingAllocator::IsLocal(void)
{
	return mpcAlloc->IsLocal();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CCountingAllocator::SizeOffset(void)
{
	return sizeof(SCountingMemoryAllocation);
}

