#include "MapBlock.h"
#include "MapIndexAccess.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapIndexAccess::Init(CMapBlock* pcMap)
{
	CIndexAccess::Init();
	mpcMap = pcMap;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Kill(void)
{
	mpcMap = NULL;
	return CIndexAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Flush(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int64 CMapIndexAccess::NumElements(void)
{
	return mpcMap->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::ValidateIndex(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapIndexAccess::Dump(void)
{
	mpcMap->Dump();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Put(uint8* pvKey, size iKeySize, void* pvData, size iDataSize)
{
	return mpcMap->Put(pvKey, iKeySize, pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Get(uint8* pvKey, size iKeySize, void* pvDestData, size* piDataSize, size uiMaxDataSize)
{
	void*	pvData;
	bool	bResult;
	size	uiDataSize;

	bResult = mpcMap->Get(pvKey, iKeySize, &pvData, (size*)&uiDataSize);
	if (bResult)
	{
		SafeAssign(piDataSize, uiDataSize);
		memcpy(pvDestData, pvData, MinDataSize(uiDataSize, uiMaxDataSize));
	}
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
size CMapIndexAccess::DataSize(uint8* pvKey, size iKeySize)
{
	return mpcMap->DataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Remove(uint8* pvKey, size iKeySize)
{
	return mpcMap->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Has(uint8* pvKey, size iKeySize)
{
	return mpcMap->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Flush(uint8* pvKey, size iKeySize)
{
	if (Has(pvKey, iKeySize))
	{
		return true;
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapIndexAccess::Evict(uint8* pvKey, size iKeySize)
{
	return false;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
CIndexTreeIterator* CMapIndexAccess::CreateIterator(void)
{
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapIndexAccess::FreeIterator(CIndexTreeIterator* pcIter)
{
}

