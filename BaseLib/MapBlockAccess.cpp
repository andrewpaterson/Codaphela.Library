#include "MapBlockAccess.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapBlockAccess::Init(CMapBlock* pcMap)
{
	CIndexTreeAccess::Init();
	mpcMap = pcMap;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Kill(void)
{
	mpcMap = NULL;
	return CIndexTreeAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Flush(void)
{
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int64 CMapBlockAccess::NumElements(void)
{
	return mpcMap->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::ValidateIndex(void)
{
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapBlockAccess::Dump(void)
{
	mpcMap->Dump();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Put(void* pvKey, int iKeySize, void* pvData, size_t iDataSize)
{
	return mpcMap->Put(pvKey, iKeySize, pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Get(void* pvKey, int iKeySize, void* pvDestData, size_t* piDataSize, size_t uiMaxDataSize)
{
	void*			pvData;
	BOOL			bResult;
	unsigned int	uiDataSize;

	bResult = mpcMap->Get(pvKey, iKeySize, &pvData, (int*)&uiDataSize);
	if (bResult)
	{
		SafeAssign(piDataSize, uiDataSize);
		memcpy(pvDestData, pvData, MinDataSize(uiDataSize, uiMaxDataSize));
	}
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CMapBlockAccess::DataSize(void* pvKey, int iKeySize)
{
	return mpcMap->DataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Remove(void* pvKey, int iKeySize)
{
	return mpcMap->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Has(void* pvKey, int iKeySize)
{
	return mpcMap->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Flush(void* pvKey, int iKeySize)
{
	if (Has(pvKey, iKeySize))
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMapBlockAccess::Evict(void* pvKey, int iKeySize)
{
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
CIndexTreeIterator* CMapBlockAccess::CreateIterator(void)
{
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapBlockAccess::FreeIterator(CIndexTreeIterator* pcIter)
{
}

