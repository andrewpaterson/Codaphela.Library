#ifndef __ARRAY_TEMPLATE_POINTER_H__
#define __ARRAY_TEMPLATE_POINTER_H__
#include "PointerFunctions.h"
#include "ArrayTemplate.h"


template<class M>
class CArrayTemplatePtr : public CArrayTemplate<M*>
{
public:
	void	Init(void);
	void	Kill(void);
	void	Add(M* pv);
	M*		GetPtr(int iIndex);
	bool	Get(int iIndex, M** pv);
	M**		Get(int iIndex);
	void	QuickSort(void);
	int		Find(M* pv);
	void 	Push(M* pv);
	M*		Pop(void);
};


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CArrayTemplatePtr<M>::Init(void)
{
	CArrayTemplate<M*>::Init();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CArrayTemplatePtr<M>::Kill(void)
{
	CArrayTemplate<M*>::Kill();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CArrayTemplatePtr<M>::Add(M* pv)
{
	M** pvTemp;

	pvTemp = CArrayTemplate<M*>::Add();
	*pvTemp = pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
bool CArrayTemplatePtr<M>::Get(int iIndex, M** pv)
{
	M** pvTemp;

	pvTemp = CArrayTemplate<M*>::SafeGet(iIndex);
	if (pvTemp)
	{
		*pv = *pvTemp;
		return true;
	}
	else
	{
		return false;
	}
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M** CArrayTemplatePtr<M>::Get(int iIndex)
{
	return CArrayTemplate<M*>::Get(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CArrayTemplatePtr<M>::GetPtr(int iIndex)
{
	return *CArrayTemplate<M*>::Get(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CArrayTemplatePtr<M>::QuickSort(void)
{
	CArrayTemplate<M*>::QuickSort(&ComparePtrPtr);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
int CArrayTemplatePtr<M>::Find(M* pv)
{
	int		i;
	M**		pvData;

	pvData = GetData();
	for (i = 0; i < NumElements(); i++)
	{
		if (pvData[i] == pv)
		{
			return i;
		}
	}
	return -1;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
void CArrayTemplatePtr<M>::Push(M* pv)
{
	Add(pv);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
template<class M>
M* CArrayTemplatePtr<M>::Pop(void)
{
	M* pv;

	CArrayTemplate<M*>::Pop(&pv);
	return pv;
}


#endif // !__ARRAY_TEMPLATE_POINTER_H__

