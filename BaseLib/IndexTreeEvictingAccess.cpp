#include "IndexTreeEvictingAccess.h"
#include "IndexTreeFileIterator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Init(CIndexTreeEvicting* pcTree)
{
	CIndexAccess::Init();
	mpcTree = pcTree;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Kill(void)
{
	mpcTree = NULL;
	return CIndexAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeEvictingAccess::Dump(void)
{
	mpcTree->Dump();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Flush(void)
{
	if (!mpcTree->IsWriteThrough())
	{
		return mpcTree->Flush();
	}
	else
	{
		return true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64 CIndexTreeEvictingAccess::NumElements(void)
{
	return mpcTree->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::ValidateIndex(void)
{
	if (mpcTree->IsFlushed())
	{
		return mpcTree->ValidateIndexTree();
	}
	else
	{
		return true;
	}

}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Put(void* pvKey, size iKeySize, void* pvData, size iDataSize)
{
	return mpcTree->Put(pvKey, iKeySize, pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Get(void* pvKey, size iKeySize, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	size	iDataSize;
	bool	bResult;

	bResult = mpcTree->Get(pvKey, iKeySize, pvData, &iDataSize, uiMaxDataSize);

	SafeAssign(piDataSize, iDataSize);
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Remove(void* pvKey, size iKeySize)
{
	return mpcTree->Remove(pvKey, iKeySize);
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CIndexTreeEvictingAccess::DataSize(void* pvKey, size iKeySize)
{
	return mpcTree->GetDataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Has(void* pvKey, size iKeySize)
{
	return mpcTree->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Evict(void* pvKey, size iKeySize)
{
	return mpcTree->Evict(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeEvictingAccess::Flush(void* pvKey, size iKeySize)
{
	return mpcTree->Flush(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeIterator* CIndexTreeEvictingAccess::CreateIterator(void)
{
	CIndexTreeFileIterator* pcIter;

	pcIter = NewMalloc<CIndexTreeFileIterator>();
	pcIter->Init(mpcTree->GetIndexTree());

	return pcIter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeEvictingAccess::FreeIterator(CIndexTreeIterator* pcIter)
{
	SafeKill(pcIter);
}

