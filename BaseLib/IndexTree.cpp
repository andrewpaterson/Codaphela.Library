#include "Logger.h"
#include "StackMemory.h"
#include "IndexTree.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTree::Init(CLifeInit<CMallocator> cMalloc, EIndexKeyReverse eKeyReverse, size_t tSizeofNode, size_t tSizeofDataNode, size_t tSizeofNodePtr, int iMaxDataSize, int iMaxKeySize, CLifeInit<CIndexTreeDataOrderer> cDataOrderer)
{
	bool bResult;

	cMalloc.ConfigureLife(&mcMallocLife, &mpcMalloc);

	meReverseKey = eKeyReverse;
	mtSizeofNode = tSizeofNode;
	mtSizeofDataNode = tSizeofDataNode;
	mtSizeofNodePtr = tSizeofNodePtr;
	bResult = true;
	if ((iMaxKeySize <= 0) || (iMaxKeySize > MAX_KEY_SIZE))
	{
		gcLogger.Error2(__METHOD__, " Max Key size [", IntToString(iMaxKeySize), "] must be positive and <= [", IntToString(MAX_KEY_SIZE), "].", NULL);
		iMaxKeySize = MAX_KEY_SIZE;
		bResult = false;
	}
	if ((iMaxDataSize <= 0) || (iMaxDataSize > MAX_DATA_SIZE))
	{
		gcLogger.Error2(__METHOD__, " Data size [", IntToString(iMaxDataSize), "] must be positive and <= [", IntToString(MAX_DATA_SIZE), "].", NULL);
		iMaxDataSize = MAX_DATA_SIZE;
		bResult = false;
	}
	miMaxDataSize = iMaxDataSize;
	miMaxKeySize = iMaxKeySize;

	cDataOrderer.ConfigureLife(&mcDataOrdererLife, &mpcDataOrderer);
	if (mpcDataOrderer)
	{
		mpcDataOrderer->SetIndexTree(this);
	}
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTree::Kill(void)
{
	mcDataOrdererLife.Kill();
	mcMallocLife.Kill();
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexTree::Malloc(size_t tSize)
{
	return mpcMalloc->Malloc(tSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::Free(void* pv)
{
	mpcMalloc->Free(pv);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexTree::Realloc(void* pv, size_t tSize)
{
	return mpcMalloc->Realloc(pv, tSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CIndexTree::SizeofNode(void)
{
	return mtSizeofNode;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CIndexTree::SizeofDataNode(void)
{
	return mtSizeofDataNode;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CIndexTree::SizeofNodePtr(void)
{
	return mtSizeofNodePtr;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::FreeNode(CIndexTreeNode* pcNode)
{
	Free(pcNode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTree::ValidatePut(int iKeySize, size_t iDataSize)
{
	if ((iKeySize <= 0) || (iKeySize > miMaxKeySize))
	{
		gcLogger.Error2(__METHOD__, "Key size [", SizeToString(iKeySize), "] must be positive and <= [", SizeToString(miMaxKeySize), "].", NULL);
		return false;
	}
	if ((iDataSize <= 0) || (iDataSize > miMaxDataSize))
	{
		gcLogger.Error2(__METHOD__, "Data size [", SizeToString(iDataSize), "] must be positive and <= [", SizeToString(miMaxDataSize), "].", NULL);
		return false;
	}
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::InsertReorderData(CIndexTreeNode* pcNode)
{
	if (mpcDataOrderer)
	{
		mpcDataOrderer->New(pcNode->GetNodeData());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::GetReorderData(CIndexTreeNode* pcNode)
{
	if (mpcDataOrderer)
	{
		mpcDataOrderer->Get(pcNode->GetNodeData());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::PutReorderData(CIndexTreeNode* pcNode)
{
	if (mpcDataOrderer)
	{
		mpcDataOrderer->Put(pcNode->GetNodeData());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::RemoveReorderData(CIndexTreeNode* pcNode)
{
	if (mpcDataOrderer)
	{
		mpcDataOrderer->Remove(pcNode->GetNodeData());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::HasKeyReorderData(CIndexTreeNode* pcNode)
{
	if (mpcDataOrderer)
	{
		mpcDataOrderer->HasKey(pcNode->GetNodeData());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CIndexTree::CalculateRootNodeSize(void)
{
	return CalculateNodeSize(MAX_UCHAR + 1, 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CIndexTree::CalculateNodeSize(int iRequiredIndices, size_t iDataSize)
{
	if (iDataSize == 0)
	{
		return SizeofNode() + iRequiredIndices * SizeofNodePtr();
	}
	else
	{
		return SizeofDataNode() + iDataSize + iRequiredIndices * SizeofNodePtr();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
EIndexKeyReverse CIndexTree::ReverseKeys(void)
{
	return meReverseKey;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTree::StartKey(int* pi, int iKeySize)
{
	if (meReverseKey == IKR_No)
	{
		*pi = 0;
		return *pi < iKeySize;
	}
	else if (meReverseKey == IKR_Yes)
	{
		*pi = iKeySize - 1;
		return *pi >= 0;
	}
	else
	{
		gcLogger.Error2(__METHOD__, " Don't know how to start key traversal for key direction [IKR_Unknown].", NULL);
		return false;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTree::LoopKey(int* pi, int iKeySize)
{
	if (meReverseKey == IKR_No)
	{
		(*pi)++;
		return *pi < iKeySize;
	}
	else if (meReverseKey == IKR_Yes)
	{
		(*pi)--;
		return *pi >= 0;
	}
	else
	{
		gcLogger.Error2(__METHOD__, " Don't know how to loop key traversal for key direction [IKR_Unknown].", NULL);
		return false;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeNode* CIndexTree::GetNodeForDataNode(CIndexTreeDataNode* pcDataNode)
{
	return (CIndexTreeNode*)RemapSinglePointer(pcDataNode, -(ptrdiff_t)mtSizeofNode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeNode* CIndexTree::GetNodeForData(void* pvData)
{
	return (CIndexTreeNode*)RemapSinglePointer(pvData, -(ptrdiff_t)mtSizeofDataNode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexTree::GetDataForDataNode(CIndexTreeDataNode* pcDataNode)
{
	return RemapSinglePointer(pcDataNode, (mtSizeofDataNode - mtSizeofNode));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexTree::GetDataForNode(CIndexTreeNode* pcNode)
{
	return RemapSinglePointer(pcNode, mtSizeofDataNode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTree::GetNodeKey(CIndexTreeNode* pcNode, CArrayChar* pacKey)
{
	int				iNodeSize;
	CStackMemory<>	cTemp;
	char*			szKey;

	if (pcNode != NULL)
	{
		iNodeSize = GetNodeKeySize(pcNode);
		szKey = (char*)cTemp.Init(iNodeSize);
		GetNodeKey(pcNode, szKey, iNodeSize);

		pacKey->Add(szKey, iNodeSize);

		cTemp.Kill();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeDataOrderer* CIndexTree::GetDataOrderer()
{
	return mpcDataOrderer;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CMallocator* CIndexTree::GetMallocator()
{
	return mpcMalloc;
}

