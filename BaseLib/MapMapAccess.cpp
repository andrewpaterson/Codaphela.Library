#include "MapBlock.h"
#include "MapMapIterator.h"
#include "MapMapAccess.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapMapAccess::Init(CMapBlock* pcMap)
{
	mpcMap = pcMap;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapMapAccess::Kill(void)
{
	mpcMap = NULL;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int64 CMapMapAccess::NumElements(void)
{
	return mpcMap->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapMapAccess::Dump(void)
{
	mpcMap->Dump();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
CMapIterator* CMapMapAccess::CreateIterator(void)
{
	CMapMapIterator* pcIter;

	pcIter = NewMalloc<CMapMapIterator>();
	pcIter->Init(mpcMap);

	return pcIter;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CMapMapAccess::FreeIterator(CMapIterator* pcIter)
{
	SafeKill(pcIter);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CMapMapAccess::Put(void* pvKey, uint32 iKeySize, void* pvData, uint32 uiDataSize)
{
	void*	pv;

	pv = mpcMap->Put(pvKey, iKeySize, uiDataSize);
	if (pv)
	{
		memcpy(pv, pvData, uiDataSize);
	}
	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CMapMapAccess::Get(void* pvKey, uint32 iKeySize, uint32* puiDataSize)
{
	bool	bResult;
	void*	pvData;

	bResult = mpcMap->Get(pvKey, iKeySize, &pvData, (uint32*)puiDataSize);
	if (bResult)
	{
		return pvData;
	}
	else
	{
		return NULL;
	}
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
uint32 CMapMapAccess::DataSize(void* pvKey, uint32 iKeySize)
{
	return mpcMap->DataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapMapAccess::Remove(void* pvKey, uint32 iKeySize)
{
	return mpcMap->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CMapMapAccess::Has(void* pvKey, uint32 iKeySize)
{
	return mpcMap->HasKey(pvKey, iKeySize);
}

