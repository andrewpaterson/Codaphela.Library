#include "MemoryAllocator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMemoryAllocator::Init(void)
{
	mcMemory.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMemoryAllocator::Init(int iDefaultAlignment, BOOL bDefaultFreeListParams)
{
	mcMemory.Init(iDefaultAlignment, bDefaultFreeListParams);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMemoryAllocator::Kill(void)
{
	mcMemory.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CMemoryAllocator::Malloc(size_t tSize)
{
	return mcMemory.Add((unsigned int)tSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CMemoryAllocator::Realloc(void* pv, size_t tSize)
{
	void*	pvNew;

	pvNew = mcMemory.Grow(pv, (unsigned int)tSize);
	return pvNew;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMemoryAllocator::Free(void* pv)
{
	mcMemory.Remove(pv);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
char* CMemoryAllocator::GetName(void)
{
	return "CMemoryAllocator";
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMemoryAllocator::Read(CFileReader* pcFileReader)
{
	SMemoryParams			sParams;
	SMemoryFreeListParams	sBlockParams;
	int						i;

	if (!pcFileReader->ReadData(&sParams, sizeof(SMemoryParams)))
	{
		return FALSE;
	}

	mcMemory.Init(sParams.iDefaultAlignment, FALSE);

	for (i = 0; i < sParams.iFreeListParams; i++)
	{
		if (!pcFileReader->ReadData(&sBlockParams, sizeof(SMemoryFreeListParams)))
		{
			return FALSE;
		}

		mcMemory.AddParamBlock(&sBlockParams);
	}

	mcMemory.SetFreeListSizeLimit(sParams.uiFreeListSizeLimit);

	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL CMemoryAllocator::Write(CFileWriter* pcFileWriter)
{
	SMemoryParams			sParams;
	SMemoryFreeListParams*	psBlockParams;
	int						i;

	mcMemory.GetParams(&sParams);
	if (!pcFileWriter->WriteData(&sParams, sizeof(SMemoryParams)))
	{
		return FALSE;
	}

	for (i = 0; i < sParams.iFreeListParams; i++)
	{
		psBlockParams = mcMemory.GetFreeListParams(i);
		if (!pcFileWriter->WriteData(psBlockParams, sizeof(SMemoryFreeListParams)))
		{
			return FALSE;
		}

	}

	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
CMemory* CMemoryAllocator::GetMemory(void)
{
	return &mcMemory;
}

