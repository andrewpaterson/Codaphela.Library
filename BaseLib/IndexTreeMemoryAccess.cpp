#include "IndexTreeMemoryAccess.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Init(CIndexTreeMemory* pcTree)
{
	CIndexTreeAccess::Init();
	mpcTree = pcTree;
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Kill(void)
{
	mpcTree = NULL;
	return CIndexTreeAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Flush(void)
{
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Put(void* pvKey, int iKeySize, void* pvObject, unsigned int uiDataSize)
{
	void* pvResult;

	pvResult = mpcTree->Put(pvKey, iKeySize, pvObject, uiDataSize);
	return pvResult != NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Get(void* pvKey, int iKeySize, void* pvObject, unsigned int* puiDataSize)
{
	void*			pvResult;
	unsigned short	uiDataSize;

	pvResult = mpcTree->Get(pvKey, iKeySize, &uiDataSize);
	
	SafeAssign(puiDataSize, uiDataSize);

	if (pvResult)
	{
		if (pvObject)
		{
			memcpy(pvObject, pvResult, uiDataSize);
		}
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Remove(void* pvKey, int iKeySize)
{
	return mpcTree->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Has(void* pvKey, int iKeySize)
{
	return mpcTree->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
unsigned int CIndexTreeMemoryAccess::DataSize(void* pvKey, int iKeySize)
{
	unsigned short	uiDataSize;
	void*			pvData;

	pvData = mpcTree->Get(pvKey, iKeySize, &uiDataSize);
	if (pvData)
	{
		return uiDataSize;
	}
	else
	{
		return 0;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Flush(void* pvKey, int iKeySize)
{
	if (Has(pvKey, iKeySize))
	{
		return TRUE;
	}
	return FALSE;
}

