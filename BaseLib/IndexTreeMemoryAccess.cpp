#include "IndexTreeMemoryAccess.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Init(CIndexTreeMemory* pcTree)
{
	CIndexTreeAccess::Init();
	mpcTree = pcTree;
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Kill(void)
{
	mpcTree = NULL;
	return CIndexTreeAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Flush(void)
{
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Put(void* pvKey, int iKeySize, void* pvData, int iDataSize)
{
	void* pvResult;

	pvResult = mpcTree->Put(pvKey, iKeySize, pvData, iDataSize);
	return pvResult != NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Get(void* pvKey, int iKeySize, void* pvData, int* piDataSize)
{
	void*			pvResult;
	int				iDataSize;

	pvResult = mpcTree->Get(pvKey, iKeySize, &iDataSize);
	
	SafeAssign(piDataSize, iDataSize);

	if (pvResult)
	{
		if (pvData)
		{
			memcpy(pvData, pvResult, iDataSize);
		}
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Remove(void* pvKey, int iKeySize)
{
	return mpcTree->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Has(void* pvKey, int iKeySize)
{
	return mpcTree->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CIndexTreeMemoryAccess::DataSize(void* pvKey, int iKeySize)
{
	int		iDataSize;
	void*	pvData;

	pvData = mpcTree->Get(pvKey, iKeySize, &iDataSize);
	if (pvData)
	{
		return iDataSize;
	}
	else
	{
		return 0;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Flush(void* pvKey, int iKeySize)
{
	if (Has(pvKey, iKeySize))
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeMemoryAccess::Evict(void* pvKey, int iKeySize)
{
	return FALSE;
}

