#include "IndexTreeMemoryAccess.h"
#include "IndexTreeMemoryIterator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Init(CIndexTreeMemory* pcTree)
{
	CIndexAccess::Init();
	mpcTree = pcTree;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Kill(void)
{
	mpcTree = NULL;
	return CIndexAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Flush(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeMemoryAccess::Dump(void)
{
	mpcTree->Dump();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64 CIndexTreeMemoryAccess::NumElements(void)
{
	return mpcTree->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::ValidateIndex(void)
{
	return mpcTree->ValidateIndexTree();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Put(void* pvKey, size iKeySize, void* pvData, size iDataSize)
{
	void* pvResult;

	pvResult = mpcTree->Put(pvKey, iKeySize, pvData, iDataSize);
	return pvResult != NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Get(void* pvKey, size iKeySize, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	bool	bResult;

	bResult = mpcTree->Get(pvKey, iKeySize, pvData,piDataSize, uiMaxDataSize);
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Remove(void* pvKey, size iKeySize)
{
	return mpcTree->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Has(void* pvKey, size iKeySize)
{
	return mpcTree->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CIndexTreeMemoryAccess::DataSize(void* pvKey, size iKeySize)
{
	return mpcTree->GetDataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Flush(void* pvKey, size iKeySize)
{
	if (Has(pvKey, iKeySize))
	{
		return true;
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeMemoryAccess::Evict(void* pvKey, size iKeySize)
{
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeIterator* CIndexTreeMemoryAccess::CreateIterator(void)
{
	CIndexTreeMemoryIterator*	pcIter;

	pcIter = NewMalloc<CIndexTreeMemoryIterator>();
	pcIter->Init(mpcTree);

	return pcIter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeMemoryAccess::FreeIterator(CIndexTreeIterator* pcIter)
{
	SafeKill(pcIter);
}

