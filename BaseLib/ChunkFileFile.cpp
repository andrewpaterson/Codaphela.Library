#include "Logger.h"
#include "ChunkFile.h"
#include "ChunkFileFile.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CChunkFileFile::Init(CChunkFile* pcChunkFile)
{
	CAbstractFile::Init();
	mpcChunkFile = pcChunkFile;
	miChunkStart = 0;
	miChunkSize = 0;
	mbEndOfFile = true;
	mbWriteMode = false;
	mbReadMode = false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CChunkFileFile::Kill(void)
{
	mpcChunkFile = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Open(EFileMode eMode)
{
	if (eMode == EFM_Read)
	{
		miChunkSize = mpcChunkFile->ChunkSize();
		miChunkStart = mpcChunkFile->ChunkStart();
		mbEndOfFile = true;
		mbReadMode = true;
		return true;
	}
	else if (eMode == EFM_Write_Create)
	{
		miChunkSize = -1;
		miChunkStart = mpcChunkFile->ChunkStart();
		mbEndOfFile = false;
		mbWriteMode = true;
		return true;
	}

	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Close(void)
{
	miChunkStart = 0;
	miChunkSize = 0;
	mbEndOfFile = true;
	mbWriteMode = false;
	mbReadMode = false;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
filePos CChunkFileFile::Read(void* pvBuffer, filePos iSize, filePos iCount)
{
	filePos		iRemain;
	filePos		iReadSize;

	if (!mbReadMode)
	{
		return 0;
	}

	iRemain = miChunkSize - Tell();

	iReadSize = iSize * iCount;

	if (iRemain >= iReadSize)
	{
		return mpcChunkFile->Read(pvBuffer, iSize, iCount);
	}
	else
	{
		iCount = iRemain / iSize;
		mbEndOfFile = true;
		return mpcChunkFile->Read(pvBuffer, iSize, iCount);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Seek(filePos iOffset, EFileSeekOrigin iSeekOrigin)
{
	if (mbReadMode)
	{
		if (iSeekOrigin == EFSO_SET)
		{
			if (iOffset < 0)
			{
				iOffset = 0;
			}
			if (iOffset > miChunkSize)
			{
				iOffset = miChunkSize;
				mbEndOfFile = true;
			}
			else
			{
				mbEndOfFile = false;
			}

			return mpcChunkFile->Seek(miChunkStart + iOffset, EFSO_SET);
		}
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
filePos CChunkFileFile::Write(const void* pvBuffer, filePos iSize, filePos iCount)
{
	if (!mbWriteMode)
	{
		return false;
	}

	return mpcChunkFile->Write(pvBuffer, iSize, iCount);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
filePos CChunkFileFile::Tell(void)
{
	filePos iPos;

	iPos = mpcChunkFile->GetFilePos() - miChunkStart;

	if (mbReadMode)
	{
		if (iPos > miChunkSize)
		{
			iPos = miChunkSize;
		}
	}

	return iPos;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::IsOpen(void)
{
	return mbReadMode || mbWriteMode;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
filePos CChunkFileFile::Size(void)
{
	if (mbReadMode)
	{
		return miChunkSize;
	}
	else
	{
		return Tell();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Truncate(filePos iSize)
{
	return gcLogger.Error2(__METHOD__, " Cannot truncate Chunk Files.", NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Flush(void)
{
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CChunkFileFile::Delete(void)
{
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CChunkFileFile::GetFilename(void)
{
	return NULL;
}

