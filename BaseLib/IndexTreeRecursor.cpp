#include "Chars.h"
#include "LogString.h"
#include "IndexTreeRecursor.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Init(CIndexTreeNode* pcRoot)
{
	CIndexTreeNodeDebug::Init();
	macKey.Init();
	mpcCurrent = pcRoot;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Kill(void)
{
	CIndexTreeNodeDebug::Kill();
	macKey.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Push(CIndexTreeNode *pcChild, char c)
{
	macKey.Push(c);
	mpcCurrent = pcChild;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Pop(void)
{
	macKey.Pop();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::GenerateBad(void)
{
	CIndexTreeNodeDebug::GenerateBad(mpcCurrent, &macKey);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::GetKey(char* pc, int* piKeySize)
{
	int	iKeySize;

	iKeySize = macKey.NumElements();
	memcpy_fast(pc, macKey.GetData(), iKeySize);
	SafeAssign(piKeySize, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CIndexTreeRecursor::GetKeySize(void)
{
	return macKey.NumElements();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeNode* CIndexTreeRecursor::GetNode(void) {	return mpcCurrent; }

