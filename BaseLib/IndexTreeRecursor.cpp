#include "Chars.h"
#include "LogString.h"
#include "IndexTreeRecursor.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Init(CIndexTreeNode* pcRoot)
{
	macKey.Init();
	mpcCurrent = pcRoot;

	mszBadKey.Init();
	mszBadNode.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Kill(void)
{
	mszBadNode.Kill();
	mszBadKey.Kill();

	macKey.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Push(CIndexTreeNode *pcChild, char c)
{
	macKey.Push(c);
	mpcCurrent = pcChild;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::Pop(void)
{
	macKey.Pop();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::GenerateBad(void)
{
	BOOL	bHex;

	bHex = GenerateBadKey();
	GenerateBadNode(bHex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeRecursor::GenerateBadKey(void)
{
	int				iKeyLength;

	iKeyLength = macKey.NumElements();
	if (iKeyLength > 0)
	{
		mszBadKey.Kill();
		return mszBadKey.InitData2(macKey.GetData(), iKeyLength);
	}
	else
	{
		return TRUE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeRecursor::GenerateBadNode(BOOL bHex)
{
	mpcCurrent->Print(&mszBadNode, bHex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexTreeRecursor::GetBadKey(void)
{
	return mszBadKey.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexTreeRecursor::GetBadNode(void)
{
	return mszBadNode.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeNode* CIndexTreeRecursor::GetNode(void) {	return mpcCurrent; }

