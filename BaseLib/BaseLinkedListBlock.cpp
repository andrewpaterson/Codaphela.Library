#include "Define.h"
#include "DataMacro.h"
#include "SystemAllocator.h"
#include "GlobalMemory.h"
#include "BaseLinkedListBlock.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Init(CMallocator* pcMalloc, size uiNodeSize)
{
	CMalloc::Init(pcMalloc);
	muiNodeSize = uiNodeSize;
	mcList.Init();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Init(size uiNodeSize)
{
	Init(&gcSystemAllocator, uiNodeSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Kill(void)
{
	SLLNode*	psNode;
	SLLNode*	psNode2;

	psNode = mcList.GetHead();
	while (psNode)
	{
		psNode2 = mcList.GetNext(psNode);
		Free(psNode);
		psNode = psNode2;
	}
	mcList.Kill();
	CMalloc::Kill();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::GetHead(void)
{
	return NodeGetData(mcList.GetHead());
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::GetTail(void)
{
	return NodeGetData(mcList.GetTail());
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::GetNext(void* pvData)
{
	SLLNode*	psNode;

	psNode = DataGetNode(pvData);
	psNode = mcList.GetNext(psNode);
	if (psNode)
	{
		return NodeGetData(psNode);
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::GetPrev(void* pvData)
{
	SLLNode*	psNode;

	psNode = DataGetNode(pvData);
	psNode = mcList.GetPrev(psNode);
	if (psNode)
	{
		return NodeGetData(psNode);
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::Get(size iNum)
{
	SLLNode*	psNode;

	psNode = mcList.Get(iNum);
	return NodeGetData(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertDetachedAfterTail(SLLNode* psNode)
{
	mcList.InsertAfterTail(psNode);
	return NodeGetData(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertDetachedBeforeHead(SLLNode* psNode)
{
	mcList.InsertBeforeHead(psNode);
	return NodeGetData(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertDetachedBeforeNode(SLLNode* psDataNode, SLLNode* psDataPos)
{
	mcList.InsertAfterNode(psDataPos, psDataNode);
	return NodeGetData(psDataNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertDetachedAfterNode(SLLNode* psDataNode, SLLNode* psData)
{
	mcList.InsertAfterNode(psData, psDataNode);
	return NodeGetData(psDataNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::RemoveTail(void)
{
	Remove(GetTail());
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Remove(void* psNodeData)
{
	Detach(psNodeData);
	FreeDetached(psNodeData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CBaseLinkedListBlock::SafeRemove(void* pvData)
{
	if (IsInList(pvData))
	{
		Remove(pvData);
		return true;
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::MoveToHead(void* pvData)
{
	SLLNode*	psNode;

	psNode = DataGetNode(pvData);
	mcList.MoveToHead(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::MoveToTTail(void* pvData)
{
	SLLNode*	psNode;

	psNode = DataGetNode(pvData);
	mcList.MoveToTTail(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::NodeGetData(SLLNode* psNode)
{
	if (psNode == NULL)
	{
		return NULL;
	}
	return RemapSinglePointer(psNode, muiNodeSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SLLNode* CBaseLinkedListBlock::DataGetNode(void* pvData)
{
	if (pvData == NULL)
	{
		return NULL;
	}
	return (SLLNode*)RemapSinglePointer(pvData, -(ptrdiff_t)muiNodeSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertAfterTail(size uiDataSize)
{
	SLLNode*	psNode;

	psNode = AllocateDetached(uiDataSize);
	return InsertDetachedAfterTail(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertBeforeHead(size uiDataSize)
{
	SLLNode*	psNode;

	psNode = AllocateDetached(uiDataSize);
	return InsertDetachedBeforeHead(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertBeforeNode(size uiDataSize, void* psPos)
{
	SLLNode*	psNode;
	SLLNode*	psNodePos;

	psNodePos = DataGetNode(psPos);
	psNode = AllocateDetached(uiDataSize);
	return InsertDetachedBeforeNode(psNode, psNodePos);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CBaseLinkedListBlock::InsertAfterNode(size uiDataSize, void* psPos)
{
	SLLNode* psNode;
	SLLNode* psNodePos;

	psNodePos = DataGetNode(psPos);
	psNode = AllocateDetached(uiDataSize);
	return InsertDetachedAfterNode(psNode, psNodePos);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Detach(SLLNode* psNodeHeader)
{
	mcList.Remove(psNodeHeader);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Detach(void* psNodeData)
{
	SLLNode* psNode;

	psNode = DataGetNode(psNodeData);
	mcList.Remove(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SLLNode* CBaseLinkedListBlock::AllocateDetached(size uiDataSize)
{
	SLLNode* psNode;

	psNode = (SLLNode*)Malloc(muiNodeSize + uiDataSize);
	psNode->psNext = NULL;
	psNode->psPrev = NULL;
	return psNode;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::FreeDetached(void* psNodeData)
{
	SLLNode* psNodeHeader;

	psNodeHeader = DataGetNode(psNodeData);
	if (psNodeHeader)
	{
		Free(psNodeHeader);
	}
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::Swap(void* psData1, void* psData2)
{
	SLLNode* psNode1;
	SLLNode* psNode2;

	psNode1 = DataGetNode(psData1);
	psNode2 = DataGetNode(psData2);

	mcList.Swap(psNode1, psNode2);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
size CBaseLinkedListBlock::NumElements(void)
{
	return mcList.NumElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::BubbleSort(DataCompare fCompare)
{
	mcList.BubbleSort(fCompare, muiNodeSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CBaseLinkedListBlock::InsertDetachedIntoSorted(DataCompare fCompare, void* pvData)
{
	SLLNode* psNode;

	psNode = DataGetNode(pvData);
	mcList.InsertIntoSorted(fCompare, psNode, muiNodeSize);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CBaseLinkedListBlock::IsInList(void* pvData)
{
	SLLNode* psNode;

	psNode = DataGetNode(pvData);
	return mcList.IsInList(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
size CBaseLinkedListBlock::IndexOf(void* pvData)
{
	SLLNode* psNode;

	psNode = DataGetNode(pvData);
	return mcList.IndexOf(psNode);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SLinkedListBlockDesc::Init(size iNumElements, size uiNodeSize)
{
	this->iNumElements = iNumElements;
	this->uiNodeSize = uiNodeSize;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SLinkedListTemplateDesc::Init(size iNumElements, size uiNodeSize, size uiDataSize)
{
	this->iNumElements = iNumElements;
	this->uiNodeSize = uiNodeSize;
	this->uiDataSize = uiDataSize;
}

