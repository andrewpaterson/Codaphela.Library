/** ---------------- COPYRIGHT NOTICE, DISCLAIMER, and LICENSE ------------- **

Copyright (c) 2009 Andrew Paterson

This file is part of The Codaphela Project: Codaphela BaseLib

Codaphela BaseLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Codaphela BaseLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Codaphela BaseLib.  If not, see <http://www.gnu.org/licenses/>.

Microsoft Windows is Copyright Microsoft Corporation

** ------------------------------------------------------------------------ **/
#include "DataTypes.h"
#include "ChunkFile.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2::SInt2()
{
	x = 0;
	y = 0;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2::SInt2(int fx, int fy)
{
	x = fx;
	y = fy;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt2::operator == (const SInt2& v) const
{
	return x == v.x && y == v.y;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2 SInt2::operator + (const SInt2& v) const
{
	return SInt2(x + v.x, y + v.y);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2 SInt2::operator - (const SInt2& v) const
{
	return SInt2(x - v.x, y - v.y);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2& SInt2::operator += (const SInt2& v)
{
	x += v.x;
	y += v.y;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt2& SInt2::operator -= (const SInt2& v)
{
	x -= v.x;
	y -= v.y;
	return *this;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt2::Init(int x, int y)
{
	this->x = x;
	this->y = y;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt2::Zero(void)
{
	x = 0;
	y = 0;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt2::Save(CFileWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt(x));
	ReturnOnFalse(pcFile->WriteInt(y));
	return TRUE;}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt2::Load(CFileReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt(&x));
	ReturnOnFalse(pcFile->ReadInt(&y));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3::SInt3()
{
	x = 0;
	y = 0;
	z = 0;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3::SInt3(int fx, int fy, int fz)
{
	x = fx;
	y = fy;
	z = fz;
}


/////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt3::Init(int x, int y, int z)
{
	this->x = x;
	this->y = y;
	this->z = z;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt3::Zero(void)
{
	x = 0;
	y = 0;
	z = 0;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt3::operator == (const SInt3& v) const
{
	return x == v.x && y == v.y && z == v.z;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3 SInt3::operator + (const SInt3& v) const
{
	return SInt3(x + v.x, y + v.y, z + v.z);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3 SInt3::operator - (const SInt3& v) const
{
	return SInt3(x - v.x, y - v.y, z - v.z);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3& SInt3::operator += (const SInt3& v)
{
	x += v.x;
	y += v.y;
	z += v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
SInt3& SInt3::operator -= (const SInt3& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return *this;
}



//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt3::Save(CFileWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt(x));
	ReturnOnFalse(pcFile->WriteInt(y));
	ReturnOnFalse(pcFile->WriteInt(z));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt3::Load(CFileReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt(&x));
	ReturnOnFalse(pcFile->ReadInt(&y));
	ReturnOnFalse(pcFile->ReadInt(&z));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt4::Init(int x, int y, int z, int w)
{
	this->x = x;
	this->y = y;
	this->z = z;
	this->w = w;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void SInt4::Zero(void)
{
	x = 0;
	y = 0;
	z = 0;
	w = 0;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt4::Save(CFileWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt(x));
	ReturnOnFalse(pcFile->WriteInt(y));
	ReturnOnFalse(pcFile->WriteInt(z));
	ReturnOnFalse(pcFile->WriteInt(w));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
BOOL SInt4::Load(CFileReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt(&x));
	ReturnOnFalse(pcFile->ReadInt(&y));
	ReturnOnFalse(pcFile->ReadInt(&z));
	ReturnOnFalse(pcFile->ReadInt(&w));
	return TRUE;
}

