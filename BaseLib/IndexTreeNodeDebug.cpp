#include "IndexTreeNodeDebug.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeNodeDebug::Init(void)
{
	mszBadKey.Init();
	mszBadNode.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeNodeDebug::Kill(void)
{
	mszBadNode.Kill();
	mszBadKey.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeNodeDebug::GenerateBadNode(CIndexTreeNode* pcCurrent, bool bHex)
{
	pcCurrent->Print(&mszBadNode, bHex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexTreeNodeDebug::GenerateBadKey(CArrayChar* acKey)
{
	int		iKeyLength;

	iKeyLength = acKey->NumElements();
	if (iKeyLength > 0)
	{
		mszBadKey.Kill();
		return mszBadKey.InitData2(acKey->GetData(), iKeyLength);
	}
	else
	{
		return true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexTreeNodeDebug::GetBadKey(void)
{
	return mszBadKey.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexTreeNodeDebug::GetBadNode(void)
{
	return mszBadNode.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeNodeDebug::GenerateBad(CIndexTreeNode* pcCurrent, CArrayChar* acKey)
{
	bool	bHex;

	bHex = GenerateBadKey(acKey);
	GenerateBadNode(pcCurrent, bHex);
}

