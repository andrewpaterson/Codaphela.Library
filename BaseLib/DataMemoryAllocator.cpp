#include "ConstructorCall.h"
#include "DataMemoryAllocator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CDataMemoryAllocator::Init(void)
{
	mcMemory.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CDataMemoryAllocator::Init(CMemoryFreeListParams* pcFreeListParams)
{
	mcMemory.Init(pcFreeListParams);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CDataMemoryAllocator::Kill(void)
{
	mcMemory.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CDataMemoryAllocator::Malloc(size uiSize)
{
	return mcMemory.Add((uint32)uiSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CDataMemoryAllocator::Malloc(size uiSize, char(**pacDebugName)[4])
{
	void*					pv;
	SDataMemoryAllocation*	psDataMemoryAllocation;

	pv = mcMemory.Add((uint32)uiSize);
	psDataMemoryAllocation = DATA_MEMORY_GET_ALLOCATION(pv);
	return pv;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CDataMemoryAllocator::Realloc(void* pv, size uiSize)
{
	void* pvNew;

	pvNew = mcMemory.Grow(pv, (uint32)uiSize);
	return pvNew;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CDataMemoryAllocator::Free(void* pv)
{
	return mcMemory.Remove(pv);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CDataMemoryAllocator::FreeMultiple(CArrayVoidPtr* pav)
{
	return mcMemory.RemoveMultiple(pav);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
const char* CDataMemoryAllocator::GetName(void)
{
	return "CDataMemoryAllocator";
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CDataMemoryAllocator::Read(CFileReader* pcFileReader)
{
	CMemoryFreeListParams* pcParams;

	mcMemory.Init();
	pcParams = mcMemory.GetFreeListParams();

	return pcParams->Read(pcFileReader);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CDataMemoryAllocator::Write(CFileWriter* pcFileWriter)
{
	CMemoryFreeListParams* pcParams;

	pcParams = mcMemory.GetFreeListParams();

	return pcParams->Write(pcFileWriter);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
CDataMemory* CDataMemoryAllocator::GetMemory(void)
{
	return &mcMemory;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CDataMemoryAllocator::SizeOffset(void)
{
	return sizeof(SDataMemoryAllocation);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CLifeInit<CMallocator> CDataMemoryAllocator::Create(void)
{
	return LifeAlloc<CDataMemoryAllocator, CMallocator>();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CLifeInit<CMallocator> CDataMemoryAllocator::Create(CMemoryFreeListParams* pcFreeListParams)
{
	return LifeAlloc<CDataMemoryAllocator, CMallocator>(pcFreeListParams);
}

