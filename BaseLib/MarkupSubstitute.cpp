/** ---------------- COPYRIGHT NOTICE, DISCLAIMER, and LICENSE ------------- **

Copyright (c) 2009 Andrew Paterson

This file is part of The Codaphela Project: Codaphela BaseLib

Codaphela BaseLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Codaphela BaseLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Codaphela BaseLib.  If not, see <http://www.gnu.org/licenses/>.

Microsoft Windows is Copyright Microsoft Corporation

** ------------------------------------------------------------------------ **/
#include "MarkupSubstitute.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubstitute::Init(char* szName, EMarkupSubstituteType eType)
{
	mszName.Init(szName);
	meType = eType;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubstitute::Kill(void)
{
	mszName.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CMarkupSubstitute::Is(char* szName)
{
	return mszName.Equals(szName);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CMarkupSubstitute::IsText(void)
{
	return meType == MST_Text;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CMarkupSubstitute::IsDoc(void)
{
	return meType == MST_Doc;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubText::Init(char* szName, char* szText)
{
	CMarkupSubstitute::Init(szName, MST_Text);
	mszText.Init(szText);
	miReferences = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubText::Kill(void)
{
	CMarkupSubstitute::Kill();
	mszText.Kill();
	miReferences = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubText::AddRef(void)
{
	miReferences++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CMarkupSubText::RemoveRef(void)
{
	miReferences--;
	if (miReferences <= 0)
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubText::RemoveAndKill(void)
{
	BOOL	bMustKill;

	bMustKill = RemoveRef();
	if (bMustKill)
	{
		Kill();
	}
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubDoc::Init(char* szName, CMarkupDoc* pcDoc)
{
	CMarkupSubstitute::Init(szName, MST_Doc);
	mpcDoc = pcDoc;
	miReferences = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubDoc::Kill(void)
{
	CMarkupSubstitute::Kill();
	mpcDoc->Kill();
	miReferences = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubDoc::AddRef(void)
{
	miReferences++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CMarkupSubDoc::RemoveRef(void)
{
	miReferences--;
	if (miReferences <= 0)
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMarkupSubDoc::RemoveAndKill(void)
{
	BOOL	bMustKill;

	bMustKill = RemoveRef();
	if (bMustKill)
	{
		Kill();
	}
}

