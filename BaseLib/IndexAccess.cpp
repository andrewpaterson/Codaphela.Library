#include <string.h>
#include "StringHelper.h"
#include "DataTypes.h"
#include "IndexAccess.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexAccess::Init(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::Kill(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringPtr(char* pszKey, void* pvPointer)
{
	return Put(pszKey, StrKeySize(pszKey), &pvPointer, sizeof(void*));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringInt(char* pszKey, int32 iIndex)
{
	return Put(pszKey, StrKeySize(pszKey), &iIndex, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringChar(char* pszKey, char cData)
{
	return Put(pszKey, StrKeySize(pszKey), &cData, sizeof(char));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringLong(char* pszKey, int64 lliIndex)
{
	return Put(pszKey, StrKeySize(pszKey), &lliIndex, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringData(char* pszKey, void* pvData, size iDataSize)
{
	return Put(pszKey, StrKeySize(pszKey), pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongPtr(int64 lliKey, void* pvPointer)
{
	return Put(&lliKey, sizeof(int64), &pvPointer, sizeof(void*));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongInt(int64 lliKey, int32 iData)
{
	return Put(&lliKey, sizeof(int64), &iData, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongLong(int64 lliKey, int64 lliData)
{
	return Put(&lliKey, sizeof(int64), &lliData, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongChar(int64 lliKey, char cData)
{
	return Put(&lliKey, sizeof(int64), &cData, sizeof(char));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongString(int64 lliKey, char* pszData)
{
	return Put(&lliKey, sizeof(int64), pszData, StrDataSize(pszData));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutLongData(int64 lliKey, void* pvData, size iDataSize)
{
	return Put(&lliKey, sizeof(int64), pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntPtr(int32 iKey, void* pvPointer)
{
	return Put(&iKey, sizeof(int32), &pvPointer, sizeof(void*));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntInt(int32 iKey, int32 iData)
{
	return Put(&iKey, sizeof(int32), &iData, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntLong(int32 iKey, int64 lliData)
{
	return Put(&iKey, sizeof(int32), &lliData, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntChar(int32 iKey, char cData)
{
	return Put(&iKey, sizeof(int32), &cData, sizeof(char));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntString(int32 iKey, char* pszData)
{
	return Put(&iKey, sizeof(int32), pszData, StrDataSize(pszData));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutIntData(int32 iKey, void* pvData, size iDataSize)
{
	return Put(&iKey, sizeof(int32), pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutStringString(char* pszKey, char* pszData)
{
	return Put(pszKey, StrKeySize(pszKey), pszData, StrDataSize(pszData));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutKeyData(void* pvKey, size iKeySize, void* pvData, size iDataSize)
{
	return Put(pvKey, iKeySize, pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutKeyInt(void* pvKey, size iKeySize, int32 iData)
{
	return Put(pvKey, iKeySize, &iData, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::PutKeyString(void* pvKey, size iKeySize, char* pszData)
{
	return Put(pvKey, iKeySize, pszData, StrDataSize(pszData));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexAccess::GetLongString(int64 lliKey, char* pszDest, size uiMaxDataSize)
{
	return GetString(&lliKey, sizeof(int64), pszDest, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int32 CIndexAccess::GetLongInt(int64 lliKey, int32 iNullValue)
{
	size	iKeySize;
	bool	bResult;
	int32	i;
	size	uiDataSize;

	iKeySize = sizeof(int64);
	uiDataSize = DataSize(&lliKey, iKeySize);
	if (uiDataSize != sizeof(int32))
	{
		return iNullValue;
	}

	bResult = Get(&lliKey, iKeySize, &i, NULL, sizeof(int32));
	if (bResult)
	{
		return i;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64 CIndexAccess::GetLongLong(int64 lliKey, int64 lliNullValue)
{
	size	iKeySize;
	bool	bResult;
	int64	lli;
	size	uiDataSize;

	iKeySize = sizeof(int64);
	uiDataSize = DataSize(&lliKey, iKeySize);
	if (uiDataSize != sizeof(int64))
	{
		return lliNullValue;
	}

	bResult = Get(&lliKey, iKeySize, &lli, NULL, sizeof(int64));
	if (bResult)
	{
		return lli;
	}
	else
	{
		return lliNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char CIndexAccess::GetLongChar(int64 lliKey, char cNullValue)
{
	size	iKeySize;
	bool	bResult;
	char	c;
	size	uiDataSize;

	iKeySize = sizeof(int64);
	uiDataSize = DataSize(&lliKey, iKeySize);
	if (uiDataSize != sizeof(char))
	{
		return cNullValue;
	}

	bResult = Get(&lliKey, iKeySize, &c, NULL, sizeof(char));
	if (bResult)
	{
		return c;
	}
	else
	{
		return cNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::GetLongData(int64 lliKey, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	return Get(&lliKey, sizeof(int64), pvData, piDataSize, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexAccess::GetLongPtr(int64 lliKey)
{
	void**	pv;
	bool	bResult;

	bResult = Get(&lliKey, sizeof(int64), &pv, NULL, sizeof(void*));
	if (bResult)
	{
		return pv;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexAccess::GetIntPtr(int32 iKey)
{
	void**	pv;
	bool	bResult;

	bResult = Get(&iKey, sizeof(int32), &pv, NULL, sizeof(void*));
	if (bResult)
	{
		return pv;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexAccess::GetIntString(int32 iKey, char* pszDest, size uiMaxDataSize)
{
	bool	bResult;

	bResult = Get(&iKey, sizeof(int32), pszDest, NULL, uiMaxDataSize);
	if (!bResult)
	{
		pszDest[0] = 0;
		return NULL;
	}
	else
	{
		return pszDest;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int32 CIndexAccess::GetIntInt(int32 iKey, int32 iNullValue)
{
	size	iKeySize;
	bool	bResult;
	int32	i;
	size	uiDataSize;

	iKeySize = sizeof(int32);
	uiDataSize = DataSize(&iKey, iKeySize);
	if (uiDataSize != sizeof(int32))
	{
		return iNullValue;
	}

	bResult = Get(&iKey, iKeySize, &i, NULL, sizeof(int32));
	if (bResult)
	{
		return i;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64 CIndexAccess::GetIntLong(int32 iKey, int64 lliNullValue)
{
	size	iKeySize;
	bool	bResult;
	int64	lli;
	size	uiDataSize;

	iKeySize = sizeof(int32);
	uiDataSize = DataSize(&iKey, iKeySize);
	if (uiDataSize != sizeof(int64))
	{
		return lliNullValue;
	}

	bResult = Get(&iKey, iKeySize, &lli, NULL, sizeof(int64));
	if (bResult)
	{
		return lli;
	}
	else
	{
		return lliNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char CIndexAccess::GetIntChar(int32 iKey, char cNullValue)
{
	size	iKeySize;
	bool	bResult;
	char	c;
	size	uiDataSize;

	iKeySize = sizeof(int32);
	uiDataSize = DataSize(&iKey, iKeySize);
	if (uiDataSize != sizeof(char))
	{
		return cNullValue;
	}

	bResult = Get(&iKey, iKeySize, &c, NULL, sizeof(char));
	if (bResult)
	{
		return c;
	}
	else
	{
		return cNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::GetIntData(int32 iKey, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	return Get(&iKey, sizeof(int32), pvData, piDataSize, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::GetStringData(char* pszKey, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	size iKeySize;

	if (StrEmpty(pszKey))
	{
		return false;
	}

	iKeySize = strlen(pszKey);

	return Get(pszKey, iKeySize, pvData, piDataSize, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexAccess::GetStringPtr(char* pszKey)
{
	size	iKeySize;
	void**	pv;
	bool	bResult;

	if (StrEmpty(pszKey))
	{
		return false;
	}

	iKeySize = strlen(pszKey);
	bResult = Get(pszKey, iKeySize, &pv, NULL, sizeof(void*));
	if (bResult)
	{
		return pv;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::GetKeyData(void* pvKey, size iKeySize, void* pvData, size* piDataSize, size uiMaxDataSize)
{
	return Get(pvKey, iKeySize, pvData, piDataSize, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int32 CIndexAccess::GetKeyInt(void* pvKey, size iKeySize, int32 iNullValue)
{
	int32	i;
	bool	bResult;

	bResult = Get(pvKey, iKeySize, &i, NULL, sizeof(int32));
	if (bResult)
	{
		return i;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexAccess::GetString(void* pvKey, size iKeySize, char* pszDest, size uiMaxDataSize)
{
	bool	bResult;

	bResult = Get(pvKey, iKeySize, pszDest, NULL, uiMaxDataSize);
	if (!bResult)
	{
		if (pszDest)
		{
			pszDest[0] = 0;
		}
		return NULL;
	}
	else
	{
		return pszDest;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexAccess::GetKeyString(void* pvKey, size iKeySize, char* pszDest, size uiMaxDataSize)
{
	return GetString(pvKey, iKeySize, pszDest, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CIndexAccess::GetStringString(char* pszKey, char* pszDest, size uiMaxDataSize)
{
	return GetString(pszKey, StrKeySize(pszKey), pszDest, uiMaxDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CChars CIndexAccess::GetStringString(char* pszKey, size uiMaxDataSize)
{
	size	iKeySize;
	bool	bResult;
	CChars	sz;
	uint32	uiDataSize;

	if (StrEmpty(pszKey))
	{
		sz.Init();
		return sz;
	}

	iKeySize = strlen(pszKey);

	uiDataSize = DataSize(pszKey, iKeySize);
	if (uiDataSize != 0)
	{
		sz.InitLength(uiDataSize);
		bResult = Get(pszKey, iKeySize, sz.Text(), NULL, uiMaxDataSize);
		return sz;
	}
	else
	{
		sz.Init();
		return sz;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int32 CIndexAccess::GetStringInt(char* pszKey, int32 iNullValue)
{
	bool	bResult;
	int32		i;
	size	uiDataSize;

	bResult = Get(pszKey, StrKeySize(pszKey), &i, &uiDataSize, sizeof(int32));
	if (bResult && (uiDataSize == sizeof(int32)))
	{
		return i;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char CIndexAccess::GetStringChar(char* pszKey, char iNullValue)
{
	bool	bResult;
	char	c;
	size	uiDataSize;

	bResult = Get(pszKey, StrKeySize(pszKey), &c, &uiDataSize, sizeof(char));
	if (bResult && (uiDataSize == sizeof(char)))
	{
		return c;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64 CIndexAccess::GetStringLong(char* pszKey, int64 iNullValue)
{
	bool	bResult;
	int64	lli;
	size	uiDataSize;

	bResult = Get(pszKey, StrKeySize(pszKey), &lli, &uiDataSize, sizeof(int64));
	if (bResult)
	{
		return lli;
	}
	else
	{
		return iNullValue;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::HasString(char* pszKey)
{
	return Has(pszKey, StrKeySize(pszKey));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::HasLong(int64 lliKey)
{
	return Has(&lliKey, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::HasInt(int32 iKey)
{
	return Has(&iKey, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::HasKey(void* pvKey, size iKeySize)
{
	return Has(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::DeleteLong(int64 lliKey)
{
	return Remove(&lliKey, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::DeleteString(char* pszKey)
{
	return Remove(pszKey, StrKeySize(pszKey));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::DeleteKey(void* pvKey, size iKeySize)
{
	return Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::FlushLong(int64 lliKey)
{
	return Flush(&lliKey, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::FlushString(char* pszKey)
{
	return Flush(pszKey, StrKeySize(pszKey));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::FlushKey(void* pvKey, size iKeySize)
{
	return Flush(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::EvictLong(int64 lliKey)
{
	return Evict(&lliKey, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::EvictInt(int32 iKey)
{
	return Evict(&iKey, sizeof(int32));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::EvictString(char* pszKey)
{
	return Evict(pszKey, StrKeySize(pszKey));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CIndexAccess::EvictKey(void* pvKey, size iKeySize)
{
	return Evict(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CIndexAccess::DataSizeLong(int64 lliKey)
{
	return DataSize(&lliKey, sizeof(int64));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CIndexAccess::DataSizeString(char* pszKey)
{
	return DataSize(pszKey, StrKeySize(pszKey));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CIndexAccess::DataSizeKey(void* pvKey, size iKeySize)
{
	return DataSize(pvKey, iKeySize);
}

