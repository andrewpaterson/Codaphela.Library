#include "Class.h"
#include "Classes.h"
#include "PrimitiveObject.h"
#include "PrimitiveField.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPrimitiveField::Init(CClass* pcFieldClass, ptrdiff_t iObjectOffset, ptrdiff_t iValueOffset, CClass* pcContainingClass, SDataIO* pcIO, char* szName)
{
	if (iObjectOffset >= 0)
	{
		CField::Init(pcFieldClass, iObjectOffset, pcContainingClass, szName);
	}
	else
	{
		CField::Init(NULL, 0, pcContainingClass, szName);
	}
	muiValueOffset = iValueOffset;
	mpcIO = pcIO;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPrimitiveField::Kill(void)
{
	CField::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPrimitiveField::IsPrimitive(void)
{
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint32 CPrimitiveField::GetSizeOf(void)
{
	//This is the size of the whole primitive object; not just the primitive part.
	return mpcFieldClass->GetSizeOf();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPrimitiveObject* CPrimitiveField::GetPrimitiveObject(CBaseObject* pcFieldContainer)
{
	CPrimitiveObject* pcPrimitive;

	pcPrimitive = (CPrimitiveObject*)RemapSinglePointer(pcFieldContainer, muiOffset);
	return pcPrimitive;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CPrimitiveField::GetValue(CBaseObject* pcFieldContainer)
{
	return RemapSinglePointer(pcFieldContainer, muiValueOffset);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size_t CPrimitiveField::GetNameOffset(void)
{
	return sizeof(CPrimitiveField);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
SDataIO* CPrimitiveField::GetDataIO(void)
{
	return mpcIO;
}

