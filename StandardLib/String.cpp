#include "ObjectReader.h"
#include "ObjectWriter.h"
#include "Objects.h"
#include "String.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Class(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(void)
{
	PreInit();
	msz.Init();
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(char* sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(const char* sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(CChars* psz)
{
	PreInit();
	msz.Init(psz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(CChars sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(Ptr<CString> pString)
{
	PreInit();
	msz.Init(pString->Text());
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Free(void)
{
	msz.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Save(CObjectWriter* pcFile)
{
	return msz.WriteString(pcFile);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Load(CObjectReader* pcFile)
{
	return msz.ReadString(pcFile);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::D(void)
{
	SetDirty(TRUE);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Set(Ptr<CString> pString)
{
	return Set(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Append(Ptr<CString> pString)
{
	return Append(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Append(Ptr<CString> pString, int iStrlen)
{
	return Append(pString->Text(), iStrlen);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendQuoted(Ptr<CString> pString)
{
	return AppendQuoted(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendSubString(Ptr<CString> pString, int iLength)
{
	return AppendSubString(pString->Text(), iLength);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendSubString(Ptr<CString> pString, int iStartInclusive, int iEndExclusive)
{
	return AppendSubString(pString->Text(), iStartInclusive, iEndExclusive);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendBool(BOOL bValue, Ptr<CString> pTrue, Ptr<CString> pFalse)
{
	return AppendBool(bValue, pTrue->Text(), pFalse->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::AppendFlag(unsigned int msFlags, unsigned int uiFlag, Ptr<CString> pFlagName, BOOL bAppendComma)
{
	return AppendFlag(msFlags, uiFlag, pFlagName->Text(), bAppendComma);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::LeftAlign(Ptr<CString> pString, char cPadCharacter, int iWidth)
{
	return LeftAlign(pString->Text(), cPadCharacter, iWidth);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::RightAlign(Ptr<CString> pString, char cPadCharacter, int iWidth)
{
	return RightAlign(pString->Text(), cPadCharacter, iWidth);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Insert(int iPos, Ptr<CString> pString)
{
	return Insert(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Equals(Ptr<CString> pString)
{
	return Equals(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Equals(Ptr<CString> pString, int iLen)
{
	return Equals(pString->Text(), iLen);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::EqualsIgnoreCase(Ptr<CString> pString)
{
	return EqualsIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Contains(Ptr<CString> pString)
{
	return Contains(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::ContainsIgnoreCase(Ptr<CString> pString)
{
	return ContainsIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::EndsWith(Ptr<CString> pString)
{
	return EndsWith(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::EndsWithIgnoreCase(Ptr<CString> pString)
{
	return EndsWithIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::StartsWith(Ptr<CString> pString)
{
	return StartsWith(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::StartsWithIgnoreCase(Ptr<CString> pString)
{
	return StartsWithIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::Occurrences(Ptr<CString> pString)
{
	return Occurrences(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::SubStringEquals(int iStart, Ptr<CString> pString)
{
	return SubStringEquals(iStart, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::SubStringEqualsIgnoreCase(int iStart, Ptr<CString> pString)
{
	return SubStringEqualsIgnoreCase(iStart, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CString::FindFromEnd(Ptr<CString> pString)
{
	return FindFromEnd(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::FindFromEnd(int iPos, Ptr<CString> pString)
{
	return FindFromEnd(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::Find(Ptr<CString> pString)
{
	return Find(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::Find(int iPos, Ptr<CString> pString)
{
	return Find(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::Compare(Ptr<CString> pOther)
{
	return Compare(pOther->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CString::CompareIgnoreCase(Ptr<CString> pOther)
{
	return CompareIgnoreCase(pOther->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int	 CString::Replace(Ptr<CString> pFind, Ptr<CString> pReplace)
{
	return Replace(pFind->Text(), pReplace->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Overwrite(int iPos, Ptr<CString> pReplace)
{
	return Overwrite(iPos, pReplace->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CChars* CString::GetChars(void) 
{ 
	return &msz; 
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArray<CString>> CString::Split(char cSplitter)
{
	Ptr<CArray<CString>>	paDest;
	CArrayChars				aszTemp;
	int						i;
	CChars*					psz;
	Ptr<CString>			pString;

	paDest = GetObjects()->Malloc<CArray<CString>>();
	paDest->Init();

	aszTemp.Init();
	msz.Split(&aszTemp, cSplitter);

	for (i = 0; i < aszTemp.NumElements(); i++)
	{
		psz = aszTemp.Get(i);
		pString = GetObjects()->Malloc<CString>()->Init(psz);
		paDest->Add(pString);
	}
	
	return paDest;
}

