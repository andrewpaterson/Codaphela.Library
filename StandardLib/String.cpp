#include "ObjectReader.h"
#include "ObjectWriter.h"
#include "Objects.h"
#include "String.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Class(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(void)
{
	PreInit();
	msz.Init();
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(char* sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(const char* sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(CChars* psz)
{
	PreInit();
	msz.Init(psz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(CChars sz)
{
	PreInit();
	msz.Init(sz);
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Init(Ptr<CString> pString)
{
	PreInit();
	msz.Init(pString->Text());
	PostInit();

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Free(void)
{
	msz.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::Save(CObjectWriter* pcFile)
{
	return msz.WriteString(pcFile);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::Load(CObjectReader* pcFile)
{
	return msz.ReadString(pcFile);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::D(void)
{
	SetDirty(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Set(Ptr<CString> pString)
{
	return Set(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Append(Ptr<CString> pString)
{
	return Append(pString->GetChars());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Append(CString* pcString)
{
	return Append(pcString->GetChars());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::Append(Ptr<CString> pString, size iStrlen)
{
	return Append(pString->Text(), iStrlen);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendQuoted(Ptr<CString> pString)
{
	return AppendQuoted(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendSubString(Ptr<CString> pString, size iLength)
{
	return AppendSubString(pString->Text(), iLength);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendSubString(Ptr<CString> pString, size iStartInclusive, size iEndExclusive)
{
	return AppendSubString(pString->Text(), iStartInclusive, iEndExclusive);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AppendBool(bool bValue, Ptr<CString> pTrue, Ptr<CString> pFalse)
{
	return AppendBool(bValue, pTrue->Text(), pFalse->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::AppendFlag(uint32 msFlags, uint32 uiFlag, Ptr<CString> pFlagName, bool bAppendComma)
{
	return AppendFlag(msFlags, uiFlag, pFlagName->Text(), bAppendComma);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::LeftAlign(Ptr<CString> pString, char cPadCharacter, size iWidth)
{
	return LeftAlign(pString->Text(), cPadCharacter, iWidth);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::RightAlign(Ptr<CString> pString, char cPadCharacter, size iWidth)
{
	return RightAlign(pString->Text(), cPadCharacter, iWidth);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Insert(size iPos, Ptr<CString> pString)
{
	return Insert(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::Equals(Ptr<CString> pString)
{
	return Equals(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::Equals(Ptr<CString> pString, size iLen)
{
	return Equals(pString->Text(), iLen);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::EqualsIgnoreCase(Ptr<CString> pString)
{
	return EqualsIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::Contains(Ptr<CString> pString)
{
	return Contains(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::ContainsIgnoreCase(Ptr<CString> pString)
{
	return ContainsIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::EndsWith(Ptr<CString> pString)
{
	return EndsWith(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::EndsWithIgnoreCase(Ptr<CString> pString)
{
	return EndsWithIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::StartsWith(Ptr<CString> pString)
{
	return StartsWith(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::StartsWithIgnoreCase(Ptr<CString> pString)
{
	return StartsWithIgnoreCase(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CString::Occurrences(Ptr<CString> pString)
{
	return Occurrences(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::SubStringEquals(size iStart, Ptr<CString> pString)
{
	return SubStringEquals(iStart, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CString::SubStringEqualsIgnoreCase(size iStart, Ptr<CString> pString)
{
	return SubStringEqualsIgnoreCase(iStart, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CString::FindFromEnd(Ptr<CString> pString)
{
	return FindFromEnd(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CString::FindFromEnd(size iPos, Ptr<CString> pString)
{
	return FindFromEnd(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CString::Find(Ptr<CString> pString)
{
	return Find(pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size  CString::Find(size iPos, Ptr<CString> pString)
{
	return Find(iPos, pString->Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CChars* CString::GetChars(void) 
{ 
	return &msz; 
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArray<CString>> CString::Split(char cSplitter)
{
	Ptr<CArray<CString>>	paDest;
	CArrayChars				aszTemp;
	size					i;
	CChars*					psz;
	Ptr<CString>			pString;
	size					uiNumElements;

	paDest = GetObjects()->Malloc<CArray<CString>>();
	paDest->Init();

	aszTemp.Init();
	msz.Split(&aszTemp, cSplitter);

	uiNumElements = aszTemp.NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		psz = aszTemp.Get(i);
		pString = GetObjects()->Malloc<CString>()->Init(psz);
		paDest->Add(pString);
	}
	
	return paDest;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AddOperator(Ptr<CString> pString)
{
	Ptr<CString>	pResult;

	pResult = OMalloc<CString>(this);
	pResult->Append(pString);
	return pResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CString::AddOperator(char* sz)
{
	Ptr<CString>	pResult;

	pResult = OMalloc<CString>(this);
	pResult->Append(sz);
	return pResult;
}

