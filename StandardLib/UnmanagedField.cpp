#include "BaseLib/TypeNames.h"
#include "Class.h"
#include "Classes.h"
#include "UnmanagedField.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnmanagedField::Init(EPrimitiveType eType, ptrdiff_t iOffset, CClass* pcContainingClass, char* szName)
{
	Init(eType, iOffset, pcContainingClass, 1, szName);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnmanagedField::Init(EPrimitiveType eType, ptrdiff_t iOffset, CClass* pcContainingClass, size uiLength, char* szName)
{
	CClasses*	pcClasses;
	CClass*		pcFieldClass;

	pcClasses = pcContainingClass->GetClasses();
	pcFieldClass = pcClasses->GetValid(eType);
	if (!pcFieldClass)
	{
		return;
	}

	CField::Init(pcFieldClass, iOffset, pcContainingClass, szName);
	muiElementSize = pcFieldClass->GetSizeOf();
	muiLength = uiLength;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnmanagedField::Init(EPrimitiveType eType, ptrdiff_t iOffset, CClass* pcContainingClass, uint32 uiElementSize, size uiLength, char* szName)
{
	CClasses*	pcClasses;
	CClass*		pcFieldClass;

	pcClasses = pcContainingClass->GetClasses();
	pcFieldClass = pcClasses->Get(eType);
	CField::Init(pcFieldClass, iOffset, pcContainingClass, szName);
	muiElementSize = uiElementSize;
	muiLength = uiLength;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnmanagedField::Kill(void)
{
	CField::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CUnmanagedField::IsArray(void)
{
	return muiLength > 1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CUnmanagedField::GetLength(void)
{
	return muiLength;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint32 CUnmanagedField::GetSizeOf(void)
{
	return muiElementSize;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CUnmanagedField::IsUnmanaged(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CUnmanagedField::GetData(CBaseObject* pcFieldContainer)
{
	return RemapSinglePointer(pcFieldContainer, muiOffset);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CUnmanagedField::GetNameOffset(void)
{
	return sizeof(CUnmanagedField);
}

