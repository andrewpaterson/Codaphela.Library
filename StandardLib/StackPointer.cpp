#include "Pointer.h"
#include "StackPointer.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CStackPointer::Init(CPointer* pcPointer)
{
	mpcPointer = pcPointer;
	mpcNext = NULL;
	mbUsed = TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CStackPointer::Kill(void)
{
	mpcPointer = NULL;
	mpcNext = NULL;
	mbUsed = FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CStackPointer::SetNext(CStackPointer* pcNext)
{
	mpcNext = pcNext;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CStackPointer::NumPointers(void)
{
	CStackPointer* pcNext;

	int iCount;

	iCount = 1;
	pcNext = mpcNext;
	while (pcNext != NULL)
	{
		iCount++;
		pcNext = pcNext->mpcNext;
	}
	
	return iCount;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CStackPointer* CStackPointer::FindLast(void)
{
	CStackPointer* pcNext;

	pcNext = this;
	while (pcNext->mpcNext != NULL)
	{
		pcNext = pcNext->mpcNext;
	}

	return pcNext;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CStackPointer* CStackPointer::GetNext(void)
{
	return mpcNext;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CStackPointer* CStackPointer::Remove(CPointer* pcPointer)
{
	CStackPointer* pcNext;
	CStackPointer* pcPrev;
	CStackPointer* pcThis;

	pcNext = this;
	pcPrev = NULL;
	while (pcNext != NULL)
	{
		pcThis = pcNext;
		if (pcThis->mpcPointer == pcPointer)
		{
			if (pcPrev)
			{
				pcPrev->SetNext(pcThis->mpcNext);
				pcThis->Kill();
				return this;
			}
			else
			{
				pcNext = mpcNext;
				Kill();
				return pcNext;
			}
		}
		pcPrev = pcNext;
		pcNext = pcNext->mpcNext;
	}

	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CStackPointer::RemoveAll(void)
{
	CStackPointer* pcNext;
	CStackPointer* pcThis;

	pcNext = this;
	while (pcNext != NULL)
	{
		pcThis = pcNext;
		pcNext = pcNext->mpcNext;
		pcThis->Kill();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CStackPointer::ClearPointer(void)
{
	mpcPointer->UnsafeClearObject();
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CStackPointer* CStackPointer::ClearPointerGetNext(void)
{
	ClearPointer();
	return GetNext();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPointer* CStackPointer::GetPointer(void)
{
	return mpcPointer;
}
