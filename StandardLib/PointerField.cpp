#include "Class.h"
#include "Classes.h"
#include "Pointer.h"
#include "PointerField.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPointerField::Init(ptrdiff_t iOffset, CClass* pcContainingClass, char* szName)
{
	CClasses*	pcClasses;

	pcClasses = pcContainingClass->GetClasses();
	if (iOffset >= 0)
	{
		CField::Init(pcClasses->GetPointer(), iOffset, pcContainingClass, szName);
	}
	else
	{
		CField::Init(NULL, 0, pcContainingClass, szName);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPointerField::Kill(void)
{
	CField::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CPointerField::IsPointer(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint32 CPointerField::GetSizeOf(void)
{
	return mpcFieldClass->GetSizeOf();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPointer* CPointerField::GetPointer(CBaseObject* pcFieldContainer)
{
	CPointer*	pcPointer;

	pcPointer = (CPointer*)RemapSinglePointer(pcFieldContainer, muiOffset);
	return pcPointer;
}




//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
size CPointerField::GetNameOffset(void)
{
	return sizeof(CPointerField);
}