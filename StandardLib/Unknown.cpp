/** ---------------- COPYRIGHT NOTICE, DISCLAIMER, and LICENSE ------------- **

Copyright (c) 2009 Andrew Paterson

This file is part of The Codaphela Project: Codaphela StandardLib

Codaphela StandardLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Codaphela StandardLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Codaphela StandardLib.  If not, see <http://www.gnu.org/licenses/>.

** ------------------------------------------------------------------------ **/
#include "Unknown.h"
#include "Unknowns.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CUnknown::CUnknown(void)
{
	mpcUnknownsThisIn = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnknown::PreInit(CUnknowns* pcUnknowns)
{
	mpcUnknownsThisIn = pcUnknowns;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnknown::Kill(void)
{
	if (mpcUnknownsThisIn)
	{
		mpcUnknownsThisIn->RemoveInKill(this);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CUnknown::Iterable(void)
{
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CUnknown::SaveHeader(CFileWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteString(ClassName()));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CUnknown::Save(CFileWriter* pcFile)
{
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CUnknown::Load(CFileReader* pcFile)
{
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CUnknown::Compare(CUnknown* pcRight)
{
	unsigned int		iSmallest;

	if (pcRight)
	{
		iSmallest = ClassSize();
		if (pcRight->ClassSize() < iSmallest)
		{
			iSmallest = pcRight->ClassSize();
		}
		return memcmp(this, pcRight, iSmallest);
	}
	else
	{
		//It's not really valid to compare this with NULL but we have to return something.
		return -1;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CUnknowns* CUnknown::GetUnknownsThisIn(void)
{
	return mpcUnknownsThisIn;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CUnknown::SetNotInUnknowns(void)
{
	mpcUnknownsThisIn = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CUnknown::IsUnknown(void)
{
	return TRUE;
}

