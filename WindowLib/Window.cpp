#include "BaseLib/Timer.h"
#include "BaseLib/DebugOutput.h"
#include "NativeWindowFactory.h"
#include "Window.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::Init(const char* szWindowTitle, CNativeWindowFactory* pcWindowFactory)
{
	mszWindowTitle.Init(szWindowTitle);

	mpcNativeWindow = pcWindowFactory->CreateNativeWindow(this);
	CComponent::Init(mpcNativeWindow);

	mcCanvas.Init(pcWindowFactory);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::Kill(void)
{
	mcCanvas.Kill();

	mpcNativeWindow->GetFactory()->DestroyNativeWindow(mpcNativeWindow);
	mpcNativeWindow = NULL;

	mszWindowTitle.Kill();

	CComponent::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CWindow::Show(void)
{
	bool	bCreated;
	bool	bRunning;
	CTimer	cTimer;

	cTimer.Init();
	bCreated = mpcNativeWindow->CreateNativeWindow();
	if (!bCreated)
	{
		return false;
	}

	for (;;)
	{
		cTimer.Update();
		Tick(cTimer.GetUpdateTimeInMillieconds(), cTimer.GetTotalTimeInMillieconds());
		bRunning = mpcNativeWindow->ExecuteNativeWindow();
		if (!bRunning)
		{
			return true;
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::Tick(int64 iUpdateTimeInMillieconds, int64 iTotalTimeInMillieconds)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::CreateCanvas(EColourFormat eFormat, int32 iWidth, int32 iHeight)
{
	CNativeWindowFactory*	pcFactory;
	CCanvas					cNewCanvas;

	pcFactory = mpcNativeWindow->GetFactory();

    cNewCanvas.Init(eFormat, iWidth, iHeight, pcFactory);

	CanvasChanged(&cNewCanvas);

	mcCanvas.Kill();

	memcpy(&mcCanvas, &cNewCanvas, sizeof(CCanvas));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::DestroyCanvas(void)
{
	mcCanvas.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CWindow::Paint(void)
{
	mpcNativeWindow->PaintNativeWindow();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const char* CWindow::GetWindowTitle(void)
{
	return mszWindowTitle.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CCanvas* CWindow::GetCanvas(void) { return &mcCanvas;  }

