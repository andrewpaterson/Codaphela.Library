#include "GerberCommandLoadMirroring.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGerberCommandLoadMirroring::Init(EGerberMirroring eMirroring)
{
	CGerberCommand::Init(GC_LM);
	meMirroring = eMirroring;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGerberCommandLoadMirroring::Kill(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CGerberCommandLoadMirroring::IsLoadMirroring(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CGerberCommandLoadMirroring::IsNone(void)
{
	return meMirroring == GLM_None;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CGerberCommandLoadMirroring::IsX(void)
{
	return meMirroring == GLM_X;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CGerberCommandLoadMirroring::IsY(void)
{
	return meMirroring == GLM_Y;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CGerberCommandLoadMirroring::IsXY(void)
{
	return meMirroring == GLM_XY;
}

