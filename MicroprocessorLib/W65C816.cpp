/** ---------------- COPYRIGHT NOTICE, DISCLAIMER, and LICENSE ------------- **

Copyright (c) 2025 Andrew Paterson

This file is part of The Codaphela Project: Codaphela GerberLib

Codaphela StandardLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Codaphela StandardLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Codaphela StandardLib.  If not, see <http://www.gnu.org/licenses/>.

** ------------------------------------------------------------------------ **/
#include "BaseLib/Logger.h"
#include "BaseLib/CalculatorParser.h"
#include "BaseLib/PointerFunctions.h"
#include "InstructionFactory.h"
#include "BusCycle.h"
#include "W65C816.h"
#include "W65C816Func.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CW65C816::Init(CW65C816Pins* pcPins)
{
    mpcPins = pcPins;
    mcProgramCounter.Init();
    muiStackPointer = 0x01FF;
    muiAccumulator = 0;
    muiXIndex = 0;
    muiYIndex = 0;
    muiDataBank = 0;
    muiDirectPage = 0;

    mbZeroFlag = false;
    mbNegativeFlag = false;
    mbDecimalFlag = false;
    mbInterruptDisableFlag = false;
    mbAccumulatorWidthFlag = false;
    mbIndexWidthFlag = false;
    mbCarryFlag = false;
    mbEmulationFlag = true;
    mbOverflowFlag = false;
    mbBreakFlag = false;

    mbStopped = false;
    mbBusEnable = true;
    mbNextInstruction = false;

    //muiData = 0;
    miCycle = 0;
    miNextCycle = 0;

    muiOpcodeIndex = 0xffff;
    muiData = 0;
    muiIOData = 0;
    muiDirectOffset = 0;
    mcNewProgramCounter.Init();
    mcAddress.Init();
    mbNmi = false;

    mbPreviousClockHigh = false;
    mbPreviousClockLow = false;

    muiResetCount = 0;

    CreateAbortValues();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CW65C816::Kill(void)
{
	
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CW65C816Pins* CW65C816::GetPins(void)
{
    return mpcPins;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CW65C816::Branch(bool condition)
{
    if (!condition)
    {
        DoneInstruction();
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLD(void)
{
    SetDirectPage(GetData16Bit());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLB(void)
{
    SetDataBank(GetIOData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHB(void)
{
    SetIOData(GetDataBank());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHK(void)
{
    SetIOData(GetProgramCounter()->GetBank());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHP(void)
{
    SetIOData(GetProcessorRegisterValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BRK(void)
{
    SoftBreak();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::COP(void)
{
    SoftBreak();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BPL(void)
{
    Branch(!IsSignSet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BMI(void)
{
    Branch(IsSignSet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CLC(void)
{
    SetCarryFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SEC(void)
{
    SetCarryFlag(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WDM(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::MVP(void)
{
    BlockMovePrevious();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::MVN(void)
{
    BlockMoveNext();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHA(void)
{
    SetMemoryData(GetA(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BVC(void)
{
    Branch(!IsOverflowSet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CLI(void)
{
    SetInterruptDisableFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHY(void)
{
    SetIndexData(GetY(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::STZ(void)
{
    SetMemoryData(0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLA(void)
{
    SetA(GetMemoryData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BVS(void)
{
    Branch(IsOverflowFlag());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SEI(void)
{
    SetInterruptDisableFlag(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLY(void)
{
    SetY(GetIndexData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TDC(void)
{
    SetC(GetDirectPage());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BRA(void)
{
    Branch(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::STA(void)
{
    SetMemoryData(GetA(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::STY(void)
{
    SetIndexData(GetY(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::STX(void)
{
    SetIndexData(GetX(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BCC(void)
{
    Branch(!IsCarrySet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BCS(void)
{
    Branch(IsCarrySet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CLV(void)
{
    SetOverflowFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TYX(void)
{
    SetX(GetY());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TXY(void)
{
    SetY(GetX());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHX(void)
{
    SetIndexData(GetX(), false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::STP(void)
{
    mbStopped = true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BNE(void)
{
    Branch(!IsZeroFlagSet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CLD(void)
{
    SetDecimalFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::NOP(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BEQ(void)
{
    Branch(IsZeroFlagSet());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SED(void)
{
    SetDecimalFlag(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLX(void)
{
    SetX(GetIndexData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ABORT(void)
{
    SetInterruptDisableFlag(true);
    SetDecimalFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::IRQ(void)
{
    SetInterruptDisableFlag(true);
    SetDecimalFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::NMI(void)
{
    SetInterruptDisableFlag(true);
    SetDecimalFlag(false);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::RES(void)
{
    Reset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::To8BitHexString(CChars* psz, uint8 ui8)
{
    psz->AppendHexHiLo(&ui8, 1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::To16BitHexString(CChars* psz, uint16 ui16)
{
    psz->AppendHexHiLo(&ui16, 2);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Append0x(CChars* psz, bool bAppend0x)
{
    if (bAppend0x)
    {
        psz->Append("0x");
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ToAddressHexString(CChars* psz, CAddress* pcAddress, bool bAppend0x)
{
    uint16      ui16;
    uint8       ui8;

    ui16 = pcAddress->GetOffset();
    ui8 = pcAddress->GetBank();
    Append0x(psz, bAppend0x);
    To8BitHexString(psz, ui8);
    psz->Append(":");
    To16BitHexString(psz, ui16);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetAddressValueHex(CChars* psz, bool bAppend0x)
{
    ToAddressHexString(psz, GetAddress(), bAppend0x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetAccumulatorValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetA());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetXValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetX());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetYValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetY());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetDataBankValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To8BitHexString(psz, GetDataBank());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetStackValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetStackPointer());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetDirectPageValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetDirectPage());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetProgramCounterValueHex(CChars* psz, bool bAppend0x)
{
    ToAddressHexString(psz, GetProgramCounter(), bAppend0x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetDataValueHex(CChars* psz, bool bAppend0x)
{
    Append0x(psz, bAppend0x);
    To16BitHexString(psz, GetData16Bit());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetOpcodeValueHex(CChars* psz, int cycle, CInstruction* pcInstruction, bool bAppend0x)
{
    uint16  uiCode;

    if (cycle != 0)
    {
        uiCode = pcInstruction->GetCode();
        if (uiCode <= 255)
        {
            Append0x(psz, bAppend0x);
            To8BitHexString(psz, (uint8)uiCode);
        }
        else
        {
            if (bAppend0x)
            {
                psz->Append("-----");
            }
            else
            {
                psz->Append("---");
            }
        }
    }
    else
    {
        if (bAppend0x)
        {
            psz->Append("#####");
        }
        else
        {
            psz->Append("###");
        }
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetOpcodeValueHex(CChars* psz, bool bAppend0x)
{
    return GetOpcodeValueHex(psz, GetCyclePlusOne(), GetOpcode(), bAppend0x);
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetInstruction(void)
{
    CInstruction* pcInstruction;

    pcInstruction = GetOpcode();
    return pcInstruction;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetOpcodeMnemonicString(CChars* psz)
{
    CInstruction*   pcInstruction;

    pcInstruction = GetOpcode();
    if (pcInstruction)
    {

        psz->Append(pcInstruction->GetName());
    }
    else
    {
        psz->Append("---");
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetCycleOperationString(CChars* psz)
{
    CBusCycle*          pcBusCycle;
    CDataOperation*     pcDataOperation;

    pcBusCycle = GetBusCycle();
    if (pcBusCycle)
    {
        pcDataOperation = pcBusCycle->GetDataOperation();
        pcDataOperation->Print(psz);
    }
    else
    {
        psz->Append("---");
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CDataOperation* CW65C816::GetDataOperation(void)
{
    CBusCycle*          pcBusCycle;
    CDataOperation*     pcDataOperation;

    pcBusCycle = GetBusCycle();
    if (pcBusCycle)
    {
        pcDataOperation = pcBusCycle->GetDataOperation();
        return pcDataOperation;
    }
    else
    {
        return NULL;
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetStatusString(CChars* psz)
{
    bool emulation = IsEmulation();

    IsZeroFlagSet() ? psz->Append("Z1 ") : psz->Append("Z0 ");
    IsNegativeSet() ? psz->Append("N1 ") : psz->Append("N0 ");
    IsDecimal() ? psz->Append("D1 ") : psz->Append("D0 ");
    IsInterruptDisable() ? psz->Append("I1 ") : psz->Append("I0 ");
    IsMemory8Bit() ? psz->Append("M8  ") : psz->Append("M16 ");
    IsIndex8Bit() ? psz->Append("X8  ") : psz->Append("X16 ");
    IsCarrySet() ? psz->Append("C1 ") : psz->Append("C0 ");
    emulation ? psz->Append("E1 ") : psz->Append("E0 ");
    if (!emulation)
    {
        IsOverflowFlag() ? psz->Append("O1") : psz->Append("O0");
    }
    else
    {
        IsOverflowFlag() ? psz->Append("O1 ") : psz->Append("O0 ");
        IsBreak() ? psz->Append("B1") : psz->Append("B0");
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CW65C816::GetType(void)
{
    return "W65C816 Microprocessor";
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::GetCycleString(CChars* psz)
{
    psz->Append(GetCyclePlusOne());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int16 CW65C816::GetCyclePlusOne(void)
{
    return miCycle + 1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DisableBuses(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::InputTransition(CTimeline* pcTimeline)
{
    CW65C816Pins*   pcPins;
    bool            bReset;
    bool            bNmi;
    bool            bIrq;
    bool            bAbort;
    STraceValue     sClockValue;

    pcPins = GetPins();
    sClockValue = pcPins->ReadPhi2(pcTimeline);
    bReset = pcPins->ReadRES(pcTimeline).IsLow();
    if (bReset || IsReseting(sClockValue))
    {
        ResetPulled();
    }
    else
    {
        ClearReset();
    }

    bNmi = pcPins->ReadNMI(pcTimeline).IsLow();
    bIrq = pcPins->ReadIRQ(pcTimeline).IsLow();
    bAbort = pcPins->ReadAbort(pcTimeline).IsLow();

    mbBusEnable = pcPins->ReadBE(pcTimeline).IsHigh();
    if (!IsBusEnable())
    {
        DisableBuses();
    }

    if (sClockValue.IsHigh() || sClockValue.IsLow())
    {
        bool risingEdge = sClockValue.IsHigh() && mbPreviousClockLow;
        bool fallingEdge= sClockValue.IsLow() && mbPreviousClockHigh;

        mbPreviousClockLow = sClockValue.IsLow();
        mbPreviousClockHigh = sClockValue.IsHigh();

        if (!IsStopped())
        {
            if (fallingEdge)
            {
                ExecutPhi2Falling(pcTimeline);
            }

            if (risingEdge)
            {
                ExecutPhi2Rising(pcTimeline);
            }
        }
    }

    mbIrq = bIrq;

    //These don't look properly edge triggered.
    mbNmi = bNmi;
    mbAbort = bAbort;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ExecutPhi2Falling(CTimeline* pcTimeline)
{
    CBusCycle*          pcBusCycle;
    bool                bRead;
    CAddress            cAddress;
    CW65C816Pins*       pcPins;
    CDataOperation*     pcDataOperation;

    pcPins = GetPins();
    pcDataOperation = GetDataOperation();
    if (pcDataOperation)
    {
        bRead = pcDataOperation->IsRead();

        if (bRead)
        {
            //Data on the data pins is READ on PHI falling
            SetIOData(pcPins->ReadData(pcTimeline));
        }

        ExecuteTrailingSideOperation(this);
    }

    Cycle(this);

    pcDataOperation = GetDataOperation();
    if (pcDataOperation)
    {
        pcBusCycle = GetBusCycle();
        bRead = pcDataOperation->IsRead();

        ExecuteInitialSideOperation(this);

        pcBusCycle->GetAddress(&cAddress, this);

        //All signals are written 10ns after PHI falling.  Including the Bank on the data pins.
        //If the write doesn't take that into account then it is okay that is is instaneous after the read.
        pcPins->WriteRWB(pcTimeline, bRead);
        pcPins->WriteMX(pcTimeline, IsIndex8Bit());
        pcPins->WriteVDA(pcTimeline, pcDataOperation->IsValidDataAddress());
        pcPins->WriteVPA(pcTimeline, pcDataOperation->IsValidProgramAddress());
        pcPins->WriteMLB(pcTimeline, pcDataOperation->IsNotMemoryLock());
        pcPins->WriteVPB(pcTimeline, pcDataOperation->IsNotVectorPull());
        pcPins->WriteE(pcTimeline, IsEmulation());
        pcPins->WriteRdy(pcTimeline, pcDataOperation->IsReady());
        pcPins->WriteAddress(pcTimeline, cAddress.GetOffset());
        pcPins->WriteData(pcTimeline, cAddress.GetBank());
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ExecutPhi2Rising(CTimeline* pcTimeline)
{
    CW65C816Pins*       pcPins;
    CDataOperation*     pcDataOperation;
    bool                bRead;

    pcPins = GetPins();

    pcDataOperation = GetDataOperation();
    if (pcDataOperation)
    {
        bRead = pcDataOperation->IsRead();

        pcPins->WriteMX(pcTimeline, IsMemory8Bit());

        if (!bRead)
        {
            pcPins->WriteData(pcTimeline, GetIOData());
        }
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetInstruction(uint16 uiOpcode)
{
	return CInstructionFactory::GetInstance()->GetInstruction(uiOpcode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetResetOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetReset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetIrqOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetIRQ();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetNmiOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetNMI();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetAbortOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetAbort();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetFetchNextOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetFetchNext();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CreateAbortValues(void)
{
	muiAbortProcessRegister = GetProcessorRegisterValue();
	muiAbortAccumulator = muiAccumulator;
	muiAbortXIndex = muiXIndex;
	muiAbortYIndex = muiYIndex;
	muiAbortDataBank = muiDataBank;
	muiAbortDirectPage = muiDirectPage;
	mcAbortProgramCounter.Init(&mcProgramCounter);
	muiAbortStackPointer = muiStackPointer;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CreatePartialAbortValues(void)
{
	muiAbortProcessRegister = GetProcessorRegisterValue();
	muiAbortDataBank = muiDataBank;
	mcAbortProgramCounter.Init(mcProgramCounter.GetBank(), mcAbortProgramCounter.GetOffset());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::RestoreAbortValues(void)
{
	muiAbortProcessRegister = GetProcessorRegisterValue();
	muiAccumulator = muiAbortAccumulator;
	muiXIndex = muiAbortXIndex;
	muiYIndex = muiAbortYIndex;
	muiDataBank = muiAbortDataBank;
	muiDirectPage = muiAbortDirectPage;
	mcProgramCounter.Init(&mcAbortProgramCounter);
	muiStackPointer = muiAbortStackPointer;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ResetPulled(void)
{
	mbAbort = false;
	mbNmi = false;
	muiOpcodeIndex = GetResetOpcode()->GetCode();
	mbStopped = false;
	miCycle = 0;
	miNextCycle = 0;

	IncrementReset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsReseting(STraceValue clockValue)
{
	return (muiResetCount > 0) &&
		   ((muiResetCount <= 3) ||
		    (muiResetCount == 4) && (!clockValue.IsLow()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ClearReset(void)
{
	muiResetCount = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::IncrementReset(void)
{
	if (muiResetCount <= 3)
	{
		muiResetCount++;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816::GetProcessorRegisterValue(void)
{
	int value = 0;
	if (IsCarrySet())
	{
		value |= STATUS_CARRY;
	}
	if (IsZeroFlagSet())
	{
		value |= STATUS_ZERO;
	}
	if (IsInterruptDisable())
	{
		value |= STATUS_INTERRUPT_DISABLE;
	}
	if (IsDecimal())
	{
		value |= STATUS_DECIMAL;
	}
	if (mbEmulationFlag && mbBreakFlag)
	{
		value |= STATUS_BREAK;
	}
	if (!mbEmulationFlag && mbIndexWidthFlag)
	{
		value |= STATUS_INDEX_WIDTH;
	}
	if (!mbEmulationFlag && mbAccumulatorWidthFlag)
	{
		value |= STATUS_ACCUMULATOR_WIDTH;
	}
	if (IsOverflowFlag())
	{
		value |= STATUS_OVERFLOW;
	}
	if (IsNegativeSet())
	{
		value |= STATUS_NEGATIVE;
	}

	return value;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetZeroFlag(bool bZeroFlag)
{
	mbZeroFlag = bZeroFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNegativeFlag(bool bSignFlag)
{
	mbNegativeFlag = bSignFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDecimalFlag(bool bDecimalFlag)
{
	mbDecimalFlag = bDecimalFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetInterruptDisableFlag(bool bInterruptDisableFlag)
{
	mbInterruptDisableFlag = bInterruptDisableFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetAccumulatorWidthFlag(bool bAccumulatorWidthFlag)
{
	mbAccumulatorWidthFlag = bAccumulatorWidthFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetIndexWidthFlag(bool bIndexWidthFlag)
{
	mbIndexWidthFlag = bIndexWidthFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetCarryFlag(bool bCarryFlag)
{
	mbCarryFlag = bCarryFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetEmulationFlag(bool bEmulationFlag)
{
	mbEmulationFlag = bEmulationFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsZeroFlagSet(void)
{
	return mbZeroFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsNegativeSet(void)
{
	return mbNegativeFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsDecimal(void)
{
	return mbDecimalFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsInterruptDisable(void)
{
	return mbInterruptDisableFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsCarrySet(void)
{
	return mbCarryFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsEmulation(void)
{
	return mbEmulationFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsBreak(void)
{
	return mbBreakFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsOverflowFlag(void)
{
	return mbOverflowFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetBreakFlag(bool bBreakFlag)
{
	mbBreakFlag = bBreakFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetOverflowFlag(bool bOverflowFlag)
{
	mbOverflowFlag = bOverflowFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Cycle(CW65C816* pcCPU)
{
	if (mbNextInstruction)
	{
		miNextCycle = 0;
		mbNextInstruction = false;
		NextInstruction();
	}

	miCycle = miNextCycle;
	NextCycle();
	while (!GetBusCycle()->MustExecute(pcCPU))
	{
		miCycle = miNextCycle;
		NextCycle();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ExecuteInitialSideOperation(CW65C816* pcCPU)
{
	CBusCycle* pcBusCycle;
	COperationArray* pcOperations;
	size				uiNumElements;
	size				i;
	COperation* pcOperation;

	pcBusCycle = GetBusCycle();
	pcOperations = pcBusCycle->GetOperations();
	uiNumElements = pcOperations->NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		pcOperation = pcOperations->GetPtr(i);
		if (pcOperation->IsInitialSide())
		{
			pcOperation->Execute(pcCPU);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ExecuteTrailingSideOperation(CW65C816* pcCPU)
{
	CBusCycle* pcBusCycle;
	COperationArray* pcOperations;
	size				uiNumElements;
	size				i;
	COperation* pcOperation;

	pcBusCycle = GetBusCycle();
	pcOperations = pcBusCycle->GetOperations();
	uiNumElements = pcOperations->NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		pcOperation = pcOperations->GetPtr(i);
		if (pcOperation->IsTrailingSide())
		{
			pcOperation->Execute(pcCPU);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBusCycle* CW65C816::GetBusCycle(void)
{
	CInstruction* pcInstruction;

	pcInstruction = CInstructionFactory::GetInstance()->GetInstruction(muiOpcodeIndex);

	if (pcInstruction != NULL)
	{
		return pcInstruction->GetBusCycle(miCycle);
	}
	else
	{
		return NULL;
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::NextInstruction(void)
{
	if (!mbAbort)
	{
		CreateAbortValues();
	}

	if (mbNmi)
	{
		muiOpcodeIndex = GetNmiOpcode()->GetCode();
		mbNmi = false;
	}
	else if (mbAbort)
	{
		muiOpcodeIndex = GetAbortOpcode()->GetCode();
		mbAbort = false;
	}
	else if (mbIrq && !mbInterruptDisableFlag)
	{
		muiOpcodeIndex = GetIrqOpcode()->GetCode();
	}
	else
	{
		muiOpcodeIndex = GetFetchNextOpcode()->GetCode();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DoneInstruction(void)
{
	mbNextInstruction = true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::NextCycle(void)
{
	miNextCycle++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int16 CW65C816::GetCycle(void)
{
	return miCycle;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetOpcode(uint16 uiOpcodeIndex)
{
	if ((uiOpcodeIndex >= 0) && (uiOpcodeIndex <= 255))
	{
		muiOpcodeIndex = uiOpcodeIndex;
	}
	else
	{
		LOG_ERROR("Invalid Op-code.");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsStopped(void)
{
	return mbStopped;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsRead(void)
{
	return GetDataOperation()->IsRead();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsMemory8Bit(void)
{
	if (IsEmulation())
	{
		return true;
	}
	else
	{
		return mbAccumulatorWidthFlag;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsMemory16Bit(void)
{
	return !IsMemory8Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsIndex8Bit()
{
	if (IsEmulation())
	{
		return true;
	}
	else
	{
		return mbIndexWidthFlag;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetX(uint16 uiXIndex)
{
	if (IsIndex16Bit())
	{
		muiXIndex = uiXIndex;
	}
	else
	{
		muiXIndex = SetLowByte(muiXIndex, (uint8)uiXIndex);
	}
	SetSignAndZeroFromIndex(muiXIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetY(uint16 uiYIndex)
{
	if (IsIndex16Bit())
	{
		muiYIndex = uiYIndex;
	}
	else
	{
		muiYIndex = SetLowByte(muiYIndex, (uint8)uiYIndex);
	}
	SetSignAndZeroFromIndex(muiYIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetA(uint16 uiAccumulator)
{
	if (IsMemory16Bit())
	{
		muiAccumulator = uiAccumulator;
	}
	else
	{
		muiAccumulator = SetLowByte(muiAccumulator, (uint8)uiAccumulator);
	}

	SetSignAndZeroFromMemory(muiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetC(uint16 uiAccumulator)
{
	muiAccumulator = uiAccumulator;
	SetSignAndZeroFlagFrom16BitValue(uiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetMemoryData(uint16 uiData, bool bUpdateFlags)
{
	if (IsMemory16Bit())
	{
		muiData = uiData;
	}
	else
	{
		muiData = SetLowByte(muiData, (uint8)uiData);
	}
	if (bUpdateFlags)
	{
		SetSignAndZeroFromMemory(uiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetIndexData(uint16 uiData, bool bUpdateFlags)
{
	if (IsIndex16Bit())
	{
		muiData = uiData;
	}
	else
	{
		muiData = SetLowByte(muiData, (uint8)uiData);
	}

	if (bUpdateFlags)
	{
		SetSignAndZeroFromIndex(uiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetSignAndZeroFromMemory(uint16 uiValue)
{
	if (IsMemory16Bit())
	{
		SetSignAndZeroFlagFrom16BitValue(uiValue);
	}
	else
	{
		SetSignAndZeroFlagFrom8BitValue(uiValue);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetSignAndZeroFromIndex(uint16 uiValue)
{
	if (IsIndex16Bit())
	{
		SetSignAndZeroFlagFrom16BitValue(uiValue);
	}
	else
	{
		SetSignAndZeroFlagFrom8BitValue(uiValue);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetMemoryData(uint16 uiData)
{
	SetMemoryData(uiData, true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDataLow(uint8 uiData)
{
	muiData = SetLowByte(muiData, uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetIOData(uint8 uiData)
{
	muiIOData = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816::GetIOData(void)
{
	return muiIOData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetA(void)
{
	if (IsMemory16Bit())
	{
		return muiAccumulator;
	}
	else
	{
		return GetLowByte(muiAccumulator);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetC(void)
{
	return muiAccumulator;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetX(void)
{
	if (IsIndex16Bit())
	{
		return muiXIndex;
	}
	else
	{
		return GetLowByte(muiXIndex);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetY(void)
{
	if (IsIndex16Bit())
	{
		return muiYIndex;
	}
	else
	{
		return GetLowByte(muiYIndex);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816::GetDataBank(void)
{
	return muiDataBank;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDataBank(uint8 uiDataBank)
{
	muiDataBank = uiDataBank;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDirectPage(uint16 uiDirectPage)
{
	muiDirectPage = uiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816::GetProgramCounter(void)
{
	return &mcProgramCounter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetProcessorRegisterValue(uint8 uiValue)
{
	SetCarryFlag((uiValue & STATUS_CARRY) != 0);
	SetZeroFlag((uiValue & STATUS_ZERO) != 0);
	SetInterruptDisableFlag((uiValue & STATUS_INTERRUPT_DISABLE) != 0);
	SetDecimalFlag((uiValue & STATUS_DECIMAL) != 0);

	if (IsEmulation())
	{
		SetBreakFlag((uiValue & STATUS_BREAK) != 0);
	}
	else
	{
		SetIndexWidthFlag((uiValue & STATUS_INDEX_WIDTH) != 0);
	}

	SetAccumulatorWidthFlag(!IsEmulation() && ((uiValue & STATUS_ACCUMULATOR_WIDTH) != 0));
	SetOverflowFlag((uiValue & STATUS_OVERFLOW) != 0);

	SetNegativeFlag((uiValue & STATUS_NEGATIVE) != 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetZeroFlagFrom8BitValue(uint16 uiValue)
{
	SetZeroFlag(Is8bitValueZero(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetZeroFlagFrom16BitValue(uint16 uiValue)
{
	SetZeroFlag(Is16bitValueZero(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNegativeFlagFrom8BitValue(uint16 uiValue)
{
	SetNegativeFlag(Is8bitValueNegative(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNegativeFlagFrom16BitValue(uint16 uiValue)
{
	SetNegativeFlag(Is16bitValueNegative(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetSignAndZeroFlagFrom8BitValue(uint16 uiValue)
{
	SetNegativeFlagFrom8BitValue(uiValue);
	SetZeroFlagFrom8BitValue(uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetSignAndZeroFlagFrom16BitValue(uint16 uiValue)
{
	SetNegativeFlagFrom16BitValue(uiValue);
	SetZeroFlagFrom16BitValue(uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::Is8bitValueNegative(uint16 uiValue)
{
	return (uiValue & 0x80) != 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::Is16bitValueNegative(uint16 uiValue)
{
	return (uiValue & 0x8000) != 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::Is8bitValueZero(uint16 uiValue)
{
	return (GetLowByte(uiValue) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::Is16bitValueZero(uint16 uiValue)
{
	return uiValue == 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsMemoryNegative(uint16 uiOperand)
{
	if (IsMemory16Bit())
	{
		return Is16bitValueNegative(uiOperand);
	}
	else
	{
		return Is8bitValueNegative(uiOperand);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BlockMoveNext(void)
{
	if (muiAccumulator != 0xffff)
	{
		muiAccumulator--;
		muiXIndex = TrimIndex(++muiXIndex);
		muiYIndex = TrimIndex(++muiYIndex);
		mcProgramCounter.Offset(-3);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BlockMovePrevious(void)
{
	if (muiAccumulator != 0xffff)
	{
		muiAccumulator--;
		muiXIndex = TrimIndex(--muiXIndex);
		muiYIndex = TrimIndex(--muiYIndex);
		mcProgramCounter.Offset(-3);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::TrimMemory(uint16 uiValue)
{
	if (IsMemory8Bit())
	{
		uiValue = GetLowByte(uiValue);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::TrimIndex(uint16 uiValue)
{
	if (IsIndex8Bit())
	{
		uiValue = GetLowByte(uiValue);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsIndex16Bit(void)
{
	return !IsIndex8Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetCarry(void)
{
	return IsCarrySet() ? 1 : 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsSignSet(void)
{
	return IsNegativeSet();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsOverflowSet(void)
{
	return IsOverflowFlag();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetProgramCounter(CAddress* pcAddress)
{
	mcProgramCounter.Init(pcAddress);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetProgramAddressBank(uint8 uibank)
{
	mcProgramCounter.SetBank(uibank);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetAddressLow(uint8 uiAddressLow)
{
	mcAddress.SetOffsetLow(uiAddressLow);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetAddressHigh(uint8 uiAddressHigh)
{
	mcAddress.SetOffsetHigh(uiAddressHigh);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetAddressBank(uint8 uiAddressBank)
{
	mcAddress.SetBank(uiAddressBank);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816::GetDataLow(void)
{
	return GetLowByte(muiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816::GetDataHigh(void)
{
	return GetHighByte(muiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetMemoryData(void)
{
	if (IsMemory16Bit())
	{
		return muiData;
	}
	else
	{
		return GetLowByte(muiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetIndexData(void)
{
	if (IsIndex16Bit())
	{
		return muiData;
	}
	else
	{
		return GetLowByte(muiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetData16Bit(void)
{
	return muiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetDirectPage(void)
{
	return muiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetDirectOffset(void)
{
	return muiDirectOffset;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetStackPointer(void)
{
	if (!IsEmulation())
	{
		return muiStackPointer;
	}
	else
	{
		return GetLowByte(muiStackPointer) | 0x100;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816::GetAddress(void)
{
	return &mcAddress;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816::GetOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetInstruction(muiOpcodeIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816::GetNewProgramCounter(void)
{
	return &mcNewProgramCounter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::IncrementProgramAddress(void)
{
	mcProgramCounter.Offset(1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DecrementProgramCounter(void)
{
	mcProgramCounter.Offset(-1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::IncrementStackPointer(void)
{
	muiStackPointer++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DecrementStackPointer(void)
{
	muiStackPointer--;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDirectOffset(uint8 uiData)
{
	muiDirectOffset = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetDataHigh(uint8 uiData)
{
	muiData = SetHighByte(muiData, uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetStackPointer(uint16 uiData)
{
	muiStackPointer = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNewProgramCounterLow(uint8 uiData)
{
	mcNewProgramCounter.SetOffsetLow(uiData);

}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNewProgramCounterHigh(uint8 uiData)
{
	mcNewProgramCounter.SetOffsetHigh(uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetNewProgramCounterBank(uint8 uiData)
{
	mcNewProgramCounter.SetBank(uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SetEmulationMode(bool bEmulation)
{
	SetEmulationFlag(bEmulation);
	if (bEmulation)
	{
		muiXIndex = GetLowByte(muiXIndex);
		muiYIndex = GetLowByte(muiYIndex);
		SetAccumulatorWidthFlag(true);
		SetIndexWidthFlag(true);
		muiStackPointer = GetLowByte(muiStackPointer) | 0x100;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ProcessorStatusChanged(void)
{
	if (mbIndexWidthFlag)
	{
		muiXIndex = GetLowByte(muiXIndex);
		muiYIndex = GetLowByte(muiYIndex);
	}
	if (IsEmulation())
	{
		SetIndexWidthFlag(true);
		SetAccumulatorWidthFlag(true);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute8BitADC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	bCarryValue;
	uint16	uiResult;
	bool	bCarryOutOfPenultimateBit;
	bool	bCarry;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	bCarryValue = GetCarry();

	uiResult = uiAccumulator + uiOperand + bCarryValue;

	uiAccumulator &= 0x7F;
	uiOperand &= 0x7F;
	bCarryOutOfPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator + uiOperand + bCarryValue));

	bCarry = (uiResult & 0x0100) != 0;
	SetCarryFlag(bCarry);
	SetOverflowFlag(bCarry ^ bCarryOutOfPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute16BitADC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	bCarryValue;
	uint16	uiResult;
	bool	bCarryOutOfPenultimateBit;
	bool	bCarry;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	bCarryValue = GetCarry();

	uiResult = uiAccumulator + uiOperand + bCarryValue;

	uiAccumulator &= 0x7FFF;
	uiOperand &= 0x7FFF;
	bCarryOutOfPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator + uiOperand + bCarryValue));

	bCarry = (uiResult & 0x010000) != 0;
	SetCarryFlag(bCarry);
	SetOverflowFlag(bCarry ^ bCarryOutOfPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute8BitBCDADC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDAdd8Bit(uiOperand, uiAccumulator, IsCarrySet());
	SetCarryFlag(cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute16BitBCDADC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDAdd16Bit(uiOperand, uiAccumulator, IsCarrySet());
	SetCarryFlag(cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute8BitSBC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	uiBorrowValue;
	uint16	uiResult;
	bool	bBorrowFromPenultimateBit;
	bool	bBorrow;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	uiBorrowValue = 1 - GetCarry();

	uiResult = uiAccumulator - uiOperand - uiBorrowValue;

	uiAccumulator &= 0x7F;
	uiOperand &= 0x7F;
	bBorrowFromPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator - uiOperand - uiBorrowValue));
	bBorrow = (uiResult & 0x0100) != 0;

	SetCarryFlag(!bBorrow);
	SetOverflowFlag(bBorrow ^ bBorrowFromPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute16BitSBC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	uiBorrowValue;
	uint16	uiResult;
	bool	bBorrowFromPenultimateBit;
	bool	bBorrow;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	uiBorrowValue = 1 - GetCarry();

	uiResult = uiAccumulator - uiOperand - uiBorrowValue;

	uiAccumulator &= 0x7FFF;
	uiOperand &= 0x7FFF;
	bBorrowFromPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator - uiOperand - uiBorrowValue));
	bBorrow = (uiResult & 0x010000) != 0;

	SetCarryFlag(!bBorrow);
	SetOverflowFlag(bBorrow ^ bBorrowFromPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute8BitBCDSBC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDSubtract8Bit(uiOperand, uiAccumulator, !IsCarrySet());
	SetCarryFlag(!cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Execute16BitBCDSBC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDSubtract16Bit(uiOperand, uiAccumulator, !IsCarrySet());
	SetCarryFlag(!cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816::BCDAdd8Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bCarry)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	uint16		uiSumOfDigits;
	CBCDResult	cResult;

	uiShift = 0;
	uiResult = 0;

	while (uiShift < 8)
	{
		uiDigitOfFirst = (uiBCDFirst & 0xF);
		uiDigitOfSecond = (uiBCDSecond & 0xF);
		uiSumOfDigits = GetLowByte(uiDigitOfFirst + uiDigitOfSecond + (bCarry ? 1 : 0));
		bCarry = uiSumOfDigits > 9;
		if (bCarry)
		{
			uiSumOfDigits += 6;
		}
		uiSumOfDigits &= 0xF;
		uiResult |= uiSumOfDigits << uiShift;

		uiShift += 4;
		uiBCDFirst >>= uiShift;
		uiBCDSecond >>= uiShift;
	}

	cResult.Init(uiResult, bCarry);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816::BCDAdd16Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bCarry)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	CBCDResult	cResult;
	CBCDResult	cBCD8BitResult;

	uiResult = 0;
	uiShift = 0;
	while (uiShift < 16)
	{
		uiDigitOfFirst = uiBCDFirst & 0xFF;
		uiDigitOfSecond = uiBCDSecond & 0xFF;
		cBCD8BitResult = BCDAdd8Bit(uiDigitOfFirst, uiDigitOfSecond, bCarry);
		bCarry = cBCD8BitResult.mbCarry;
		uiResult = uiResult | (cBCD8BitResult.muiValue << uiShift);
		uiShift += 8;
		uiBCDFirst = uiBCDFirst >> uiShift;
		uiBCDSecond = uiBCDSecond >> uiShift;
	}

	cResult.Init(uiResult, bCarry);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816::BCDSubtract8Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bBorrow)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	uint16		uiDiffOfDigits;
	CBCDResult	cResult;

	uiShift = 0;
	uiResult = 0;
	while (uiShift < 8)
	{
		uiDigitOfFirst = uiBCDFirst & 0xF;
		uiDigitOfSecond = uiBCDSecond & 0xF;
		uiDiffOfDigits = GetLowByte(uiDigitOfFirst - uiDigitOfSecond - (bBorrow ? 1 : 0));
		bBorrow = uiDiffOfDigits > 9;
		if (bBorrow)
		{
			uiDiffOfDigits -= 6;
		}
		uiDiffOfDigits &= 0xF;
		uiResult |= uiDiffOfDigits << uiShift;

		uiShift += 4;
		uiBCDFirst >>= uiShift;
		uiBCDSecond >>= uiShift;
	}

	cResult.Init(uiResult, bBorrow);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816::BCDSubtract16Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bBorrow)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	CBCDResult	cResult;
	CBCDResult	cBCD8BitResult;

	uiShift = 0;
	uiResult = 0;
	while (uiShift < 16)
	{
		uiDigitOfFirst = (uiBCDFirst & 0xFF);
		uiDigitOfSecond = (uiBCDSecond & 0xFF);
		cBCD8BitResult = BCDSubtract8Bit(uiDigitOfFirst, uiDigitOfSecond, bBorrow);
		bBorrow = cBCD8BitResult.mbCarry;
		uiResult = uiResult | (cBCD8BitResult.muiValue << uiShift);
		uiShift += 8;
		uiBCDFirst = uiBCDFirst >> uiShift;
		uiBCDSecond = uiBCDSecond >> uiShift;
	}

	cResult.Init(uiResult, bBorrow);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::SetBit(uint16 uiValue, bool bBitValue, uint16 uiBitNumber)
{
	if (bBitValue)
	{
		uiValue = SetBit(uiValue, uiBitNumber);
	}
	else
	{
		uiValue = ClearBit(uiValue, uiBitNumber);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::ClearBit(uint16 uiValue, uint16 uiBitNumber)
{
	return TrimMemory(uiValue & ~(1 << uiBitNumber));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::SetBit(uint16 uiValue, uint16 uiBitNumber)
{
	return TrimMemory(uiValue | (1 << uiBitNumber));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::IsBusEnable(void)
{
	return mbBusEnable;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PER(void)
{
	muiData = muiData + mcProgramCounter.GetOffset();  // + Carry?
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PHD(void)
{
	muiData = muiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::PLP(void)
{
	SetProcessorRegisterValue(GetIOData());
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SoftBreak(void)
{
	SetInterruptDisableFlag(true);
	SetDecimalFlag(false);
	if (IsEmulation())
	{
		SetBreakFlag(true);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ORA(void)
{
	SetA(GetA() | GetMemoryData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TSB(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetMemoryData((uiValue | GetA()), false);
	SetZeroFlag((uiValue & GetA()) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TRB(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetMemoryData(uiValue & TrimMemory(~GetA()), false);
	SetZeroFlag((uiValue & GetA()) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::INC_A(void)
{
	uint16 a;

	a = TrimMemory(GetA() + 1);
	SetA(a);
	SetSignAndZeroFromMemory(a);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::INX(void)
{
	uint16 x;

	x = TrimIndex(GetX() + 1);
	SetX(x);
	SetSignAndZeroFromIndex(x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::INY(void)
{
	uint16 y;

	y = TrimIndex(GetY() + 1);
	SetY(y);
	SetSignAndZeroFromIndex(y);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DEC_A(void)
{
	uint16 a;

	a = TrimMemory(GetA() - 1);
	SetA(a);
	SetSignAndZeroFromMemory(a);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DEY(void)
{
	uint16 y;

	y = TrimIndex(GetY() - 1);
	SetY(y);
	SetSignAndZeroFromIndex(y);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DEX(void)
{
	uint16 x;

	x = TrimIndex(GetX() - 1);
	SetX(x);
	SetSignAndZeroFromIndex(x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::RotateLeft(uint16 uiValue)
{
	bool bCarryWillBeSet;

	bCarryWillBeSet = IsMemoryNegative(uiValue);
	uiValue = TrimMemory(uiValue << 1);
	uiValue = SetBit(uiValue, IsCarrySet(), 0);
	SetCarryFlag(bCarryWillBeSet);
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::RotateRight(uint16 uiValue)
{
	bool bCarryWillBeSet;

	bCarryWillBeSet = (uiValue & 1) != 0;
	uiValue = TrimMemory(uiValue >> 1);
	uiValue = SetBit(uiValue, IsCarrySet(), IsMemory16Bit() ? 15 : 7);
	SetCarryFlag(bCarryWillBeSet);
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BIT(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();

	if (IsMemory16Bit())
	{
		SetNegativeFlag(Is16bitValueNegative(uiValue));
		SetOverflowFlag((uiValue & 0x4000) != 0);
		SetZeroFlagFrom16BitValue((uiValue & GetA()));
	}
	else
	{
		SetNegativeFlag(Is8bitValueNegative(uiValue));
		SetOverflowFlag((uiValue & 0x40) != 0);
		SetZeroFlagFrom8BitValue((uiValue & GetA()));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::BIT_A(void)
{
	if (IsMemory16Bit())
	{
		SetZeroFlagFrom16BitValue((GetMemoryData() & GetA()));
	}
	else
	{
		SetZeroFlagFrom8BitValue((GetMemoryData() & GetA()));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ROR(void)
{
	SetMemoryData(RotateRight(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ROR_A(void)
{
	SetA(RotateRight(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ROL(void)
{
	SetMemoryData(RotateLeft(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ROL_A(void)
{
	SetA(RotateLeft(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::ShiftRight(uint16 uiValue)
{
	SetCarryFlag((uiValue & 1) != 0);
	return TrimMemory(uiValue >> 1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::LSR(void)
{
	SetMemoryData(ShiftRight(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::LSR_A(void)
{
	SetA(ShiftRight(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ASL(void)
{
	uint16	uiOperand;
	bool	bCarry;

	uiOperand = GetMemoryData();
	bCarry = IsMemoryNegative(uiOperand);
	uiOperand = TrimMemory(uiOperand << 1);
	SetCarryFlag(bCarry);
	SetMemoryData(uiOperand);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ASL_A(void)
{
	uint16	uiOperand;
	bool	bCarry;

	uiOperand = GetA();
	bCarry = IsMemoryNegative(uiOperand);
	uiOperand = TrimMemory(uiOperand << 1);
	SetCarryFlag(bCarry);
	SetA(uiOperand);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TSC(void)
{
	SetA(GetStackPointer());
	SetSignAndZeroFromMemory(GetA());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::EOR(void)
{
	uint16 uiResult;

	uiResult = TrimMemory(GetA() ^ GetMemoryData());
	SetSignAndZeroFromMemory(uiResult);
	SetA(uiResult);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TCD(void)
{
	SetDirectPage(muiAccumulator);
	SetSignAndZeroFlagFrom16BitValue(muiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ADC(void)
{
	if (IsMemory16Bit())
	{
		if (!IsDecimal())
		{
			Execute16BitADC();
		}
		else
		{
			Execute16BitBCDADC();
		}
	}
	else
	{
		if (!IsDecimal())
		{
			Execute8BitADC();
		}
		else
		{
			Execute8BitBCDADC();
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TXA(void)
{
	if (IsMemory8Bit() && IsIndex16Bit())
	{
		SetA(GetLowByte(GetX()));
	}
	else if (IsMemory16Bit() && IsIndex8Bit())
	{
		SetA(SetLowByte(GetA(), (uint8)GetX()));
	}
	else
	{
		SetA(GetX());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::LDA(void)
{
	SetA(GetMemoryData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::LDY(void)
{
	if (IsIndex16Bit())
	{
		SetY(muiData);
	}
	else
	{
		SetY(GetLowByte(muiData));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::LDX(void)
{
	if (IsIndex16Bit())
	{
		SetX(muiData);
	}
	else
	{
		SetX(GetLowByte(muiData));
	}
}


void CW65C816::TSX(void)
{
	uint16	uiStackPointer;
	uint16	uiStackPointerLower8Bits;

	uiStackPointer = GetStackPointer();
	if (IsIndex8Bit())
	{
		uiStackPointerLower8Bits = GetLowByte(uiStackPointer);
		SetX(SetLowByte(GetX(), (uint8)uiStackPointerLower8Bits));
	}
	else
	{
		SetX(uiStackPointer);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TYA(void)
{
	if (IsMemory8Bit() && IsIndex16Bit())
	{
		SetA(GetLowByte(GetY()));
	}
	else if (IsMemory16Bit() && IsIndex8Bit())
	{
		SetA(SetLowByte(GetA(), (uint8)GetY()));
	}
	else
	{
		SetA(GetY());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TXS(void)
{
	uint16 uiNewStackPointer;

	if (IsEmulation())
	{
		uiNewStackPointer = 0x100 | GetLowByte(GetX());
		SetStackPointer(uiNewStackPointer);
	}
	else
	{
		SetStackPointer(GetX());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CPY(void)
{
	uint16 uiValue;

	uiValue = GetIndexData();
	SetSignAndZeroFromIndex(TrimMemory(GetY() - uiValue));
	SetCarryFlag(GetY() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CMP(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetSignAndZeroFromMemory(TrimMemory(GetA() - uiValue));
	SetCarryFlag(GetA() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::REP(void)
{
	uint8 uiValue;

	uiValue = ~GetIOData();
	SetProcessorRegisterValue(GetProcessorRegisterValue() & uiValue);
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TAY(void)
{
	uint8	uiLower8BitsOfA;

	if ((IsMemory8Bit() && IsIndex8Bit()) ||
		(IsMemory16Bit() && IsIndex8Bit()))
	{
		uiLower8BitsOfA = GetLowByte(GetA());
		SetY(SetLowByte(GetY(), uiLower8BitsOfA));
	}
	else
	{
		SetY(GetA());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TAX(void)
{
	uint8	uiLower8BitsOfA;

	if ((IsMemory8Bit() && IsIndex8Bit()) ||
		(IsMemory16Bit() && IsIndex8Bit()))
	{
		uiLower8BitsOfA = GetLowByte(GetA());
		SetX(SetLowByte(GetX(), uiLower8BitsOfA));
	}
	else
	{
		SetX(GetA());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DEC(void)
{
	SetMemoryData(TrimMemory(GetMemoryData() - 1));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::INC(void)
{
	SetMemoryData(TrimMemory(GetMemoryData() + 1));
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::CPX(void)
{
	uint16 uiValue;

	uiValue = GetIndexData();
	SetSignAndZeroFromIndex(TrimMemory(GetX() - uiValue));
	SetCarryFlag(GetX() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SBC(void)
{
	if (IsMemory16Bit())
	{
		if (!IsDecimal())
		{
			Execute16BitSBC();
		}
		else
		{
			Execute16BitBCDSBC();
		}
	}
	else
	{
		if (!IsDecimal())
		{
			Execute8BitSBC();
		}
		else
		{
			Execute8BitBCDSBC();
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::SEP(void)
{
	uint8 uiValue;

	uiValue = GetIOData();
	if (IsEmulation())
	{
		uiValue = uiValue & 0xCF;
	}
	SetProcessorRegisterValue(GetProcessorRegisterValue() | uiValue);
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::XBA(void)
{
	uint16 uiLowerA;
	uint16 uiHigherA;

	uiLowerA = GetLowByte(GetA());
	uiHigherA = GetHighByte(GetA());

	uiLowerA = GetLowByte(GetA());
	uiHigherA = GetHighByte(GetA());
	muiAccumulator = uiHigherA | (uiLowerA << 8);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::XCE(void)
{
	bool bOldCarry;
	bool bOldEmulation;

	bOldCarry = IsCarrySet();
	bOldEmulation = IsEmulation();
	SetEmulationMode(bOldCarry);
	SetCarryFlag(bOldEmulation);

	SetAccumulatorWidthFlag(IsEmulation());
	SetIndexWidthFlag(IsEmulation());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::Reset(void)
{
	SetEmulationMode(true);
	muiDataBank = 0;
	muiDirectPage = 0;
	mcProgramCounter.SetBank(0);
	SetDecimalFlag(false);
	SetInterruptDisableFlag(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::TCS(void)
{
	uint16 uiStackPointer;

	uiStackPointer = GetStackPointer();
	if (IsEmulation())
	{
		uiStackPointer = SetLowByte(uiStackPointer, GetLowByte(GetA()));
	}
	else
	{
		uiStackPointer = GetA();
	}
	SetStackPointer(uiStackPointer);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::AND(void)
{
	SetA((GetA() & GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DoneIfIndex8Bit(void)
{
	if (IsIndex8Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DoneIfIndex16Bit(void)
{
	if (IsIndex16Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DoneIfMemory8Bit(void)
{
	if (IsMemory8Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::DoneIfMemory16Bit(void)
{
	if (IsMemory16Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteProcessorStatus(void)
{
	SetIOData(GetProcessorRegisterValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ReadProcessorStatus(void)
{
	SetProcessorRegisterValue(GetIOData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetData16BitOffset(void)
{
	uint16 uiDataLow;

	uiDataLow = GetData16Bit();
	if (Is16bitValueNegative(uiDataLow))
	{
		return uiDataLow | 0xffff0000;
	}
	else
	{
		return uiDataLow;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetData8BitOffset(void)
{
	uint16 uiDataLow;

	uiDataLow = GetDataLow();
	if (Is8bitValueNegative(uiDataLow))
	{
		return uiDataLow | 0xffffff00;
	}
	else
	{
		return uiDataLow;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteDataLow(void)
{
	SetIOData(GetDataLow());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteDataHigh(void)
{
	SetIOData(GetDataHigh());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::ReadOpcode(void)
{
	SetOpcode(GetIOData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::NoteFourX(bool bNextWillRead)
{
	return ((uint16)mcAddress.GetOffsetLow() + (uint16)GetLowByte(GetX())) > 0xFF ||
		   !bNextWillRead ||
		   IsIndex16Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::NoteFourY(bool bNextWillRead)
{
	return ((uint16)mcAddress.GetOffsetLow() + (uint16)GetLowByte(GetY())) > 0xFF ||
		   !bNextWillRead ||
		   IsIndex16Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816::NoteSix(void)
{
	uint16 uiOffset;

	if (IsEmulation())
	{
		uiOffset = mcProgramCounter.GetOffset();
		return AreOffsetsOnDifferentPages(uiOffset, uiOffset + GetData16Bit());
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetAddressOffsetLowX(void)
{
	return GetLowByte(mcAddress.GetOffsetLow() + GetLowByte(GetX()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816::GetAddressOffsetLowY(void)
{
	return GetLowByte(mcAddress.GetOffsetLow() + GetLowByte(GetY()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteProgramBank(void)
{
	SetIOData(mcProgramCounter.GetBank());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteProgramCounterHigh(void)
{
	SetIOData(mcProgramCounter.GetOffsetHigh());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816::WriteProgramCounterLow(void)
{
	SetIOData(mcProgramCounter.GetOffsetLow());
}

