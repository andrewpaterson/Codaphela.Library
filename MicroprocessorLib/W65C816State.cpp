#include "BaseLib/Logger.h"
#include "InstructionFactory.h"
#include "W65C816State.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Init(void)
{
    mcProgramCounter.Init();
    muiStackPointer = 0x01FF;
    muiAccumulator = 0;
    muiXIndex = 0;
    muiYIndex = 0;
    muiDataBank = 0;
    muiDirectPage = 0;

    mbZeroFlag = false;
    mbNegativeFlag = false;
    mbDecimalFlag = false;
    mbInterruptDisableFlag = false;
    mbAccumulatorWidthFlag = false;
    mbIndexWidthFlag = false;
    mbCarryFlag = false;
    mbEmulationFlag = true;
    mbOverflowFlag = false;
    mbBreakFlag = false;

    mbStopped = false;
    mbBusEnable = true;
    mbNextInstruction = false;

    //muiData = 0;
    miCycle = 0;
	miNextCycle = 0;

	muiOpcodeIndex = 0xffff;
    muiData = 0;
	muiPData = 0;
    muiDirectOffset = 0;
    mcNewProgramCounter.Init();
    mcAddress.Init();
    mbNmi = false;

	mbPreviousClockHigh = false;
	mbPreviousClockLow = false;

	muiResetCount = 0;

    CreateAbortValues();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Init(CW65C816State state)
{
    mbZeroFlag = state.mbZeroFlag;
    mbNegativeFlag = state.mbNegativeFlag;
    mbDecimalFlag = state.mbDecimalFlag;
    mbInterruptDisableFlag = state.mbInterruptDisableFlag;
    mbAccumulatorWidthFlag = state.mbAccumulatorWidthFlag;
    mbIndexWidthFlag = state.mbIndexWidthFlag;
    mbCarryFlag = state.mbCarryFlag;
    mbEmulationFlag = state.mbEmulationFlag;
    mbOverflowFlag = state.mbOverflowFlag;
    mbBreakFlag = state.mbBreakFlag;
    muiAccumulator = state.mbAccumulatorWidthFlag;
    muiXIndex = state.muiXIndex;
    muiYIndex = state.muiYIndex;
    muiDataBank = state.muiDataBank;
    muiDirectPage = state.muiDirectPage;
    mcProgramCounter.Init(&state.mcProgramCounter);
    muiStackPointer = state.muiStackPointer;
    miCycle = state.miCycle;
	miNextCycle = state.miNextCycle;
    muiOpcodeIndex = state.muiOpcodeIndex;
    mbStopped = state.mbStopped;
    muiAbortProcessRegister = state.muiAbortProcessRegister;
    muiAbortAccumulator = state.muiAbortAccumulator;
    muiAbortXIndex = state.muiAbortXIndex;
    muiAbortYIndex = state.muiAbortYIndex;
    muiAbortDataBank = state.muiAbortDataBank;
    muiAbortDirectPage = state.muiAbortDirectPage;
    mcAbortProgramCounter.Init(&state.mcAbortProgramCounter);
    muiAbortStackPointer = state.muiAbortStackPointer;
    mcAddress.Init(&state.mcAddress);
    muiData = state.muiData;
	muiPData = state.muiPData;
    muiDirectOffset = state.muiDirectOffset;
    mcNewProgramCounter.Init(&state.mcNewProgramCounter);
    mbBusEnable = state.mbBusEnable;
    mbIrq = state.mbIrq;
    mbAbort = state.mbAbort;
    mbNextInstruction = state.mbNextInstruction;
    mbNmi = state.mbNmi;
	mbPreviousClockHigh = state.mbPreviousClockHigh;
	mbPreviousClockLow = state.mbPreviousClockLow;
	muiResetCount = state.muiResetCount;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetInstruction(uint16 uiOpcode)
{
	return CInstructionFactory::GetInstance()->GetInstruction(uiOpcode);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetResetOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetReset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetIrqOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetIRQ();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetNmiOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetNMI();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetAbortOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetAbort();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetFetchNextOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetFetchNext();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::CreateAbortValues(void)
{
    muiAbortProcessRegister = GetProcessorRegisterValue();
    muiAbortAccumulator = muiAccumulator;
    muiAbortXIndex = muiXIndex;
    muiAbortYIndex = muiYIndex;
    muiAbortDataBank = muiDataBank;
    muiAbortDirectPage = muiDirectPage;
    mcAbortProgramCounter.Init(&mcProgramCounter);
    muiAbortStackPointer = muiStackPointer;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::CreatePartialAbortValues(void)
{
    muiAbortProcessRegister = GetProcessorRegisterValue();
    muiAbortDataBank = muiDataBank;
    mcAbortProgramCounter.Init(mcProgramCounter.GetBank(), mcAbortProgramCounter.GetOffset());
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::RestoreAbortValues(void)
{
    muiAbortProcessRegister = GetProcessorRegisterValue();
    muiAccumulator = muiAbortAccumulator;
    muiXIndex = muiAbortXIndex;
    muiYIndex = muiAbortYIndex;
    muiDataBank = muiAbortDataBank;
    muiDirectPage = muiAbortDirectPage;
    mcProgramCounter.Init(&mcAbortProgramCounter);
    muiStackPointer = muiAbortStackPointer;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ResetPulled(void)
{
    mbAbort = false;
    mbNmi = false;
    muiOpcodeIndex = GetResetOpcode()->GetCode();
    mbStopped = false;
    miCycle = 0;
	miNextCycle = 0;

	IncrementReset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsReseting(STraceValue clockValue)
{
	return (muiResetCount > 0) && 
		   ((muiResetCount <= 3) ||
			(muiResetCount == 4) && (!clockValue.IsLow()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ClearReset(void)
{
	muiResetCount = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::IncrementReset(void)
{
	if (muiResetCount <= 3)
	{
		muiResetCount++;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816State::GetProcessorRegisterValue(void)
{
    int value = 0;
    if (IsCarrySet())
    {
        value |= STATUS_CARRY;
    }
    if (IsZeroFlagSet())
    {
        value |= STATUS_ZERO;
    }
    if (IsInterruptDisable())
    {
        value |= STATUS_INTERRUPT_DISABLE;
    }
    if (IsDecimal())
    {
        value |= STATUS_DECIMAL;
    }
    if (mbEmulationFlag && mbBreakFlag)
    {
        value |= STATUS_BREAK;
    }
    if (!mbEmulationFlag && mbIndexWidthFlag)
    {
        value |= STATUS_INDEX_WIDTH;
    }
    if (!mbEmulationFlag && mbAccumulatorWidthFlag)
    {
        value |= STATUS_ACCUMULATOR_WIDTH;
    }
    if (IsOverflowFlag())
    {
        value |= STATUS_OVERFLOW;
    }
    if (IsNegativeSet())
    {
        value |= STATUS_NEGATIVE;
    }

    return value;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetZeroFlag(bool bZeroFlag)
{
    mbZeroFlag = bZeroFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNegativeFlag(bool bSignFlag)
{
    mbNegativeFlag = bSignFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDecimalFlag(bool bDecimalFlag)
{
    mbDecimalFlag = bDecimalFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetInterruptDisableFlag(bool bInterruptDisableFlag)
{
    mbInterruptDisableFlag = bInterruptDisableFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetAccumulatorWidthFlag(bool bAccumulatorWidthFlag)
{
    mbAccumulatorWidthFlag = bAccumulatorWidthFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetIndexWidthFlag(bool bIndexWidthFlag)
{
    mbIndexWidthFlag = bIndexWidthFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetCarryFlag(bool bCarryFlag)
{
    mbCarryFlag = bCarryFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetEmulationFlag(bool bEmulationFlag)
{
    mbEmulationFlag = bEmulationFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsZeroFlagSet(void)
{
    return mbZeroFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsNegativeSet(void)
{
    return mbNegativeFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsDecimal(void)
{
    return mbDecimalFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsInterruptDisable(void)
{
    return mbInterruptDisableFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsCarrySet(void)
{
    return mbCarryFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsEmulation(void)
{
    return mbEmulationFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsBreak(void)
{
    return mbBreakFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsOverflowFlag(void)
{
    return mbOverflowFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetBreakFlag(bool bBreakFlag)
{
    mbBreakFlag = bBreakFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetOverflowFlag(bool bOverflowFlag)
{
    mbOverflowFlag = bOverflowFlag;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Cycle(CW65C816* pcCPU)
{
    if (mbNextInstruction)
    {
		miNextCycle = 0;
        mbNextInstruction = false;
        NextInstruction();
    }

	miCycle = miNextCycle;
    NextCycle();
    while (!GetBusCycle()->MustExecute(pcCPU))
    {
		miCycle = miNextCycle;
        NextCycle();
    }
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ExecuteInitialSideOperation(CW65C816* pcCPU)
{
	CBusCycle*			pcBusCycle;
	COperationArray*	pcOperations;
	size				uiNumElements;
	size				i;
	COperation*			pcOperation;

	pcBusCycle = GetBusCycle();
	pcOperations = pcBusCycle->GetOperations();
	uiNumElements = pcOperations->NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		pcOperation = pcOperations->GetPtr(i);
		if (pcOperation->IsInitialSide())
		{
			pcOperation->Execute(pcCPU);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ExecuteTrailingSideOperation(CW65C816* pcCPU)
{
	CBusCycle*			pcBusCycle;
	COperationArray*	pcOperations;
	size				uiNumElements;
	size				i;
	COperation*			pcOperation;

	pcBusCycle = GetBusCycle();
	pcOperations = pcBusCycle->GetOperations();
	uiNumElements = pcOperations->NumElements();
	for (i = 0; i < uiNumElements; i++)
	{
		pcOperation = pcOperations->GetPtr(i);
		if (pcOperation->IsTrailingSide())
		{
			pcOperation->Execute(pcCPU);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBusCycle* CW65C816State::GetBusCycle(void)
{
	CInstruction*			pcInstruction;

	pcInstruction = CInstructionFactory::GetInstance()->GetInstruction(muiOpcodeIndex);

	if (pcInstruction != NULL)
	{
		return pcInstruction->GetBusCycle(miCycle);
	}
	else
	{
		return NULL;
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::NextInstruction(void)
{
	if (!mbAbort)
	{
		CreateAbortValues();
	}

	if (mbNmi)
	{
		muiOpcodeIndex = GetNmiOpcode()->GetCode();
		mbNmi = false;
	}
	else if (mbAbort)
	{
		muiOpcodeIndex = GetAbortOpcode()->GetCode();
		mbAbort = false;
	}
	else if (mbIrq && !mbInterruptDisableFlag)
	{
		muiOpcodeIndex = GetIrqOpcode()->GetCode();
	}
	else
	{
		muiOpcodeIndex = GetFetchNextOpcode()->GetCode();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DoneInstruction(void)
{
	mbNextInstruction = true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::NextCycle(void)
{
	miNextCycle++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int16 CW65C816State::GetCycle(void)
{
	return miCycle;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetOpcode(uint16 uiOpcodeIndex)
{
	if ((uiOpcodeIndex >= 0) && (uiOpcodeIndex <= 255))
	{
		muiOpcodeIndex = uiOpcodeIndex;
	}
	else
	{
		LOG_ERROR("Invalid Op-code.");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CDataOperation* CW65C816State::GetDataOperation(void)
{
	CBusCycle* pcBusCycle = GetBusCycle();
	if (pcBusCycle != NULL)
	{
		return pcBusCycle->GetDataOperation();
	}
	else
	{
		return NULL;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsStopped(void)
{
	return mbStopped;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsRead(void)
{
	return GetDataOperation()->IsRead();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsMemory8Bit(void)
{
	if (IsEmulation())
	{
		return true;
	}
	else
	{
		return mbAccumulatorWidthFlag;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsMemory16Bit(void)
{
	return !IsMemory8Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsIndex8Bit()
{
	if (IsEmulation())
	{
		return true;
	}
	else
	{
		return mbIndexWidthFlag;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetX(uint16 uiXIndex)
{
	if (IsIndex16Bit())
	{
		muiXIndex = uiXIndex;
	}
	else
	{
		muiXIndex = SetLowByte(muiXIndex, (uint8)uiXIndex);
	}
	SetSignAndZeroFromIndex(muiXIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetY(uint16 uiYIndex)
{
	if (IsIndex16Bit())
	{
		muiYIndex = uiYIndex;
	}
	else
	{
		muiYIndex = SetLowByte(muiYIndex, (uint8)uiYIndex);
	}
	SetSignAndZeroFromIndex(muiYIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetA(uint16 uiAccumulator)
{
	if (IsMemory16Bit())
	{
		muiAccumulator = uiAccumulator;
	}
	else
	{
		muiAccumulator = SetLowByte(muiAccumulator, (uint8)uiAccumulator);
	}

	SetSignAndZeroFromMemory(muiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetC(uint16 uiAccumulator)
{
	muiAccumulator = uiAccumulator;
	SetSignAndZeroFlagFrom16BitValue(uiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetMemoryData(uint16 uiData, bool bUpdateFlags)
{
	if (IsMemory16Bit())
	{
		muiData = uiData;
	}
	else
	{
		muiData = SetLowByte(muiData, (uint8)uiData);
	}
	if (bUpdateFlags)
	{
		SetSignAndZeroFromMemory(uiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetIndexData(uint16 uiData, bool bUpdateFlags)
{
	if (IsIndex16Bit())
	{
		muiData = uiData;
	}
	else
	{
		muiData = SetLowByte(muiData, (uint8)uiData);
	}

	if (bUpdateFlags)
	{
		SetSignAndZeroFromIndex(uiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetSignAndZeroFromMemory(uint16 uiValue)
{
	if (IsMemory16Bit())
	{
		SetSignAndZeroFlagFrom16BitValue(uiValue);
	}
	else
	{
		SetSignAndZeroFlagFrom8BitValue(uiValue);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetSignAndZeroFromIndex(uint16 uiValue)
{
	if (IsIndex16Bit())
	{
		SetSignAndZeroFlagFrom16BitValue(uiValue);
	}
	else
	{
		SetSignAndZeroFlagFrom8BitValue(uiValue);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetMemoryData(uint16 uiData)
{
	SetMemoryData(uiData, true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDataLow(uint8 uiData)
{
	muiData = SetLowByte(muiData, uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetPData(uint8 uiData)
{
	muiPData = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816State::GetPData(void)
{
	return muiPData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetA(void)
{
	if (IsMemory16Bit())
	{
		return muiAccumulator;
	}
	else
	{
		return ToByte(muiAccumulator);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetC(void)
{
	return muiAccumulator;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetX(void)
{
	if (IsIndex16Bit())
	{
		return muiXIndex;
	}
	else
	{
		return ToByte(muiXIndex);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetY(void)
{
	if (IsIndex16Bit())
	{
		return muiYIndex;
	}
	else
	{
		return ToByte(muiYIndex);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816State::GetDataBank(void)
{
	return muiDataBank;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDataBank(uint8 uiDataBank)
{
	muiDataBank = uiDataBank;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDirectPage(uint16 uiDirectPage)
{
	muiDirectPage = uiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816State::GetProgramCounter(void)
{
	return &mcProgramCounter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetProcessorRegisterValue(uint8 uiValue)
{
	SetCarryFlag((uiValue & STATUS_CARRY) != 0);
	SetZeroFlag((uiValue & STATUS_ZERO) != 0);
	SetInterruptDisableFlag((uiValue & STATUS_INTERRUPT_DISABLE) != 0);
	SetDecimalFlag((uiValue & STATUS_DECIMAL) != 0);

	if (IsEmulation())
	{
		SetBreakFlag((uiValue & STATUS_BREAK) != 0);
	}
	else
	{
		SetIndexWidthFlag((uiValue & STATUS_INDEX_WIDTH) != 0);
	}

	SetAccumulatorWidthFlag(!IsEmulation() && ((uiValue & STATUS_ACCUMULATOR_WIDTH) != 0));
	SetOverflowFlag((uiValue & STATUS_OVERFLOW) != 0);

	SetNegativeFlag((uiValue & STATUS_NEGATIVE) != 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetZeroFlagFrom8BitValue(uint16 uiValue)
{
	SetZeroFlag(Is8bitValueZero(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetZeroFlagFrom16BitValue(uint16 uiValue)
{
	SetZeroFlag(Is16bitValueZero(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNegativeFlagFrom8BitValue(uint16 uiValue)
{
	SetNegativeFlag(Is8bitValueNegative(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNegativeFlagFrom16BitValue(uint16 uiValue)
{
	SetNegativeFlag(Is16bitValueNegative(uiValue));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetSignAndZeroFlagFrom8BitValue(uint16 uiValue)
{
	SetNegativeFlagFrom8BitValue(uiValue);
	SetZeroFlagFrom8BitValue(uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetSignAndZeroFlagFrom16BitValue(uint16 uiValue)
{
	SetNegativeFlagFrom16BitValue(uiValue);
	SetZeroFlagFrom16BitValue(uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::Is8bitValueNegative(uint16 uiValue)
{
	return (uiValue & 0x80) != 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::Is16bitValueNegative(uint16 uiValue)
{
	return (uiValue & 0x8000) != 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::Is8bitValueZero(uint16 uiValue)
{
	return (ToByte(uiValue) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::Is16bitValueZero(uint16 uiValue)
{
	return uiValue == 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsMemoryNegative(uint16 uiOperand)
{
	if (IsMemory16Bit())
	{
		return Is16bitValueNegative(uiOperand);
	}
	else
	{
		return Is8bitValueNegative(uiOperand);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::BlockMoveNext(void)
{
	if (muiAccumulator != 0xffff)
	{
		muiAccumulator--;
		muiXIndex = TrimIndex(++muiXIndex);
		muiYIndex = TrimIndex(++muiYIndex);
		mcProgramCounter.Offset(-3);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::BlockMovePrevious(void)
{
	if (muiAccumulator != 0xffff)
	{
		muiAccumulator--;
		muiXIndex = TrimIndex(--muiXIndex);
		muiYIndex = TrimIndex(--muiYIndex);
		mcProgramCounter.Offset(-3);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::TrimMemory(uint16 uiValue)
{
	if (IsMemory8Bit())
	{
		uiValue = ToByte(uiValue);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::TrimIndex(uint16 uiValue)
{
	if (IsIndex8Bit())
	{
		uiValue = ToByte(uiValue);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsIndex16Bit(void)
{
	return !IsIndex8Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetCarry(void)
{
	return IsCarrySet() ? 1 : 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsSignSet(void)
{
	return IsNegativeSet();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsOverflowSet(void)
{
	return IsOverflowFlag();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetProgramCounter(CAddress* pcAddress)
{
	mcProgramCounter.Init(pcAddress);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetProgramAddressBank(uint8 uibank)
{
	mcProgramCounter.SetBank(uibank);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetAddressLow(uint8 uiAddressLow)
{
	mcAddress.SetOffsetLow(uiAddressLow);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetAddressHigh(uint8 uiAddressHigh)
{
	mcAddress.SetOffsetHigh(uiAddressHigh);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetAddressBank(uint8 uiAddressBank)
{
	mcAddress.SetBank(uiAddressBank);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816State::GetDataLow(void)
{
	return GetLowByte(muiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CW65C816State::GetDataHigh(void)
{
	return GetHighByte(muiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetMemoryData(void)
{
	if (IsMemory16Bit())
	{
		return muiData;
	}
	else
	{
		return ToByte(muiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetIndexData(void)
{
	if (IsIndex16Bit())
	{
		return muiData;
	}
	else
	{
		return ToByte(muiData);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetData16Bit(void)
{
	return muiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetDirectPage(void)
{
	return muiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetDirectOffset(void)
{
	return muiDirectOffset;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetStackPointer(void)
{
	if (!IsEmulation())
	{
		return muiStackPointer;
	}
	else
	{
		return GetLowByte(muiStackPointer) | 0x100;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816State::GetAddress(void)
{
	return &mcAddress;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CInstruction* CW65C816State::GetOpcode(void)
{
	return CInstructionFactory::GetInstance()->GetInstruction(muiOpcodeIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddress* CW65C816State::GetNewProgramCounter(void)
{
	return &mcNewProgramCounter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::IncrementProgramAddress(void)
{
	mcProgramCounter.Offset(1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DecrementProgramCounter(void)
{
	mcProgramCounter.Offset(-1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::IncrementStackPointer(void)
{
	muiStackPointer++;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DecrementStackPointer(void)
{
	muiStackPointer--;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDirectOffset(uint8 uiData)
{
	muiDirectOffset = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetDataHigh(uint8 uiData)
{
	muiData = SetHighByte(muiData, uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetStackPointer(uint16 uiData)
{
	muiStackPointer = uiData;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNewProgramCounterLow(uint8 uiData)
{
	mcNewProgramCounter.SetOffsetLow(uiData);

}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNewProgramCounterHigh(uint8 uiData)
{
	mcNewProgramCounter.SetOffsetHigh(uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetNewProgramCounterBank(uint8 uiData)
{
	mcNewProgramCounter.SetBank(uiData);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SetEmulationMode(bool bEmulation)
{
	SetEmulationFlag(bEmulation);
	if (bEmulation)
	{
		muiXIndex = ToByte(muiXIndex);
		muiYIndex = ToByte(muiYIndex);
		SetAccumulatorWidthFlag(true);
		SetIndexWidthFlag(true);
		muiStackPointer = ToByte(muiStackPointer) | 0x100;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ProcessorStatusChanged(void)
{
	if (mbIndexWidthFlag)
	{
		muiXIndex = ToByte(muiXIndex);
		muiYIndex = ToByte(muiYIndex);
	}
	if (IsEmulation())
	{
		SetIndexWidthFlag(true);
		SetAccumulatorWidthFlag(true);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute8BitADC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	bCarryValue;
	uint16	uiResult;
	bool	bCarryOutOfPenultimateBit;
	bool	bCarry;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	bCarryValue = GetCarry();

	uiResult = uiAccumulator + uiOperand + bCarryValue;

	uiAccumulator &= 0x7F;
	uiOperand &= 0x7F;
	bCarryOutOfPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator + uiOperand + bCarryValue));

	bCarry = (uiResult & 0x0100) != 0;
	SetCarryFlag(bCarry);
	SetOverflowFlag(bCarry ^ bCarryOutOfPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute16BitADC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	bCarryValue;
	uint16	uiResult;
	bool	bCarryOutOfPenultimateBit;
	bool	bCarry;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	bCarryValue = GetCarry();

	uiResult = uiAccumulator + uiOperand + bCarryValue;

	uiAccumulator &= 0x7FFF;
	uiOperand &= 0x7FFF;
	bCarryOutOfPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator + uiOperand + bCarryValue));

	bCarry = (uiResult & 0x010000) != 0;
	SetCarryFlag(bCarry);
	SetOverflowFlag(bCarry ^ bCarryOutOfPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute8BitBCDADC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDAdd8Bit(uiOperand, uiAccumulator, IsCarrySet());
	SetCarryFlag(cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute16BitBCDADC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDAdd16Bit(uiOperand, uiAccumulator, IsCarrySet());
	SetCarryFlag(cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute8BitSBC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	uiBorrowValue;
	uint16	uiResult;
	bool	bBorrowFromPenultimateBit;
	bool	bBorrow;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	uiBorrowValue = 1 - GetCarry();

	uiResult = uiAccumulator - uiOperand - uiBorrowValue;

	uiAccumulator &= 0x7F;
	uiOperand &= 0x7F;
	bBorrowFromPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator - uiOperand - uiBorrowValue));
	bBorrow = (uiResult & 0x0100) != 0;

	SetCarryFlag(!bBorrow);
	SetOverflowFlag(bBorrow ^ bBorrowFromPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute16BitSBC(void)
{
	uint16	uiOperand;
	uint16	uiAccumulator;
	uint16	uiBorrowValue;
	uint16	uiResult;
	bool	bBorrowFromPenultimateBit;
	bool	bBorrow;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();
	uiBorrowValue = 1 - GetCarry();

	uiResult = uiAccumulator - uiOperand - uiBorrowValue;

	uiAccumulator &= 0x7FFF;
	uiOperand &= 0x7FFF;
	bBorrowFromPenultimateBit = IsMemoryNegative(TrimMemory(uiAccumulator - uiOperand - uiBorrowValue));
	bBorrow = (uiResult & 0x010000) != 0;

	SetCarryFlag(!bBorrow);
	SetOverflowFlag(bBorrow ^ bBorrowFromPenultimateBit);
	SetA(TrimMemory(uiResult));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute8BitBCDSBC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDSubtract8Bit(uiOperand, uiAccumulator, !IsCarrySet());
	SetCarryFlag(!cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Execute16BitBCDSBC(void)
{
	uint16		uiOperand;
	uint16		uiAccumulator;
	CBCDResult	cBCDResult;

	uiOperand = GetMemoryData();
	uiAccumulator = GetA();

	cBCDResult = BCDSubtract16Bit(uiOperand, uiAccumulator, !IsCarrySet());
	SetCarryFlag(!cBCDResult.mbCarry);
	SetA(cBCDResult.muiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816State::BCDAdd8Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bCarry)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	uint16		uiSumOfDigits;
	CBCDResult	cResult;

	uiShift = 0;
	uiResult = 0;

	while (uiShift < 8)
	{
		uiDigitOfFirst = (uiBCDFirst & 0xF);
		uiDigitOfSecond = (uiBCDSecond & 0xF);
		uiSumOfDigits = ToByte(uiDigitOfFirst + uiDigitOfSecond + (bCarry ? 1 : 0));
		bCarry = uiSumOfDigits > 9;
		if (bCarry)
		{
			uiSumOfDigits += 6;
		}
		uiSumOfDigits &= 0xF;
		uiResult |= uiSumOfDigits << uiShift;

		uiShift += 4;
		uiBCDFirst >>= uiShift;
		uiBCDSecond >>= uiShift;
	}

	cResult.Init(uiResult, bCarry);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816State::BCDAdd16Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bCarry)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	CBCDResult	cResult;
	CBCDResult	cBCD8BitResult;

	uiResult = 0;
	uiShift = 0;
	while (uiShift < 16)
	{
		uiDigitOfFirst = uiBCDFirst & 0xFF;
		uiDigitOfSecond = uiBCDSecond & 0xFF;
		cBCD8BitResult = BCDAdd8Bit(uiDigitOfFirst, uiDigitOfSecond, bCarry);
		bCarry = cBCD8BitResult.mbCarry;
		uiResult = uiResult | (cBCD8BitResult.muiValue << uiShift);
		uiShift += 8;
		uiBCDFirst = uiBCDFirst >> uiShift;
		uiBCDSecond = uiBCDSecond >> uiShift;
	}

	cResult.Init(uiResult, bCarry);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816State::BCDSubtract8Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bBorrow)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	uint16		uiDiffOfDigits;
	CBCDResult	cResult;

	uiShift = 0;
	uiResult = 0;
	while (uiShift < 8)
	{
		uiDigitOfFirst = uiBCDFirst & 0xF;
		uiDigitOfSecond = uiBCDSecond & 0xF;
		uiDiffOfDigits = ToByte(uiDigitOfFirst - uiDigitOfSecond - (bBorrow ? 1 : 0));
		bBorrow = uiDiffOfDigits > 9;
		if (bBorrow)
		{
			uiDiffOfDigits -= 6;
		}
		uiDiffOfDigits &= 0xF;
		uiResult |= uiDiffOfDigits << uiShift;

		uiShift += 4;
		uiBCDFirst >>= uiShift;
		uiBCDSecond >>= uiShift;
	}

	cResult.Init(uiResult, bBorrow);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CBCDResult CW65C816State::BCDSubtract16Bit(uint16 uiBCDFirst, uint16 uiBCDSecond, bool bBorrow)
{
	uint16		uiShift;
	uint16		uiResult;
	uint16		uiDigitOfFirst;
	uint16		uiDigitOfSecond;
	CBCDResult	cResult;
	CBCDResult	cBCD8BitResult;

	uiShift = 0;
	uiResult = 0;
	while (uiShift < 16)
	{
		uiDigitOfFirst = (uiBCDFirst & 0xFF);
		uiDigitOfSecond = (uiBCDSecond & 0xFF);
		cBCD8BitResult = BCDSubtract8Bit(uiDigitOfFirst, uiDigitOfSecond, bBorrow);
		bBorrow = cBCD8BitResult.mbCarry;
		uiResult = uiResult | (cBCD8BitResult.muiValue << uiShift);
		uiShift += 8;
		uiBCDFirst = uiBCDFirst >> uiShift;
		uiBCDSecond = uiBCDSecond >> uiShift;
	}

	cResult.Init(uiResult, bBorrow);
	return cResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::SetBit(uint16 uiValue, bool bBitValue, uint16 uiBitNumber)
{
	if (bBitValue)
	{
		uiValue = SetBit(uiValue, uiBitNumber);
	}
	else
	{
		uiValue = ClearBit(uiValue, uiBitNumber);
	}
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::ClearBit(uint16 uiValue, uint16 uiBitNumber)
{
	return TrimMemory(uiValue & ~(1 << uiBitNumber));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::SetBit(uint16 uiValue, uint16 uiBitNumber)
{
	return TrimMemory(uiValue | (1 << uiBitNumber));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::IsBusEnable(void)
{
	return mbBusEnable;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::PER(void)
{
	muiData = muiData + mcProgramCounter.GetOffset();  // + Carry?
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::PHD(void)
{
	muiData = muiDirectPage;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::PLP(void)
{
	SetProcessorRegisterValue(GetPData());
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SoftBreak(void)
{
	SetInterruptDisableFlag(true);
	SetDecimalFlag(false);
	if (IsEmulation())
	{
		SetBreakFlag(true);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ORA(void)
{
	SetA(GetA() | GetMemoryData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TSB(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetMemoryData((uiValue | GetA()), false);
	SetZeroFlag((uiValue & GetA()) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TRB(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetMemoryData(uiValue & TrimMemory(~GetA()), false);
	SetZeroFlag((uiValue & GetA()) == 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::INC_A(void)
{
	uint16 a;

	a = TrimMemory(GetA() + 1);
	SetA(a);
	SetSignAndZeroFromMemory(a);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::INX(void)
{
	uint16 x;

	x = TrimIndex(GetX() + 1);
	SetX(x);
	SetSignAndZeroFromIndex(x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::INY(void)
{
	uint16 y;

	y = TrimIndex(GetY() + 1);
	SetY(y);
	SetSignAndZeroFromIndex(y);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DEC_A(void)
{
	uint16 a;

	a = TrimMemory(GetA() - 1);
	SetA(a);
	SetSignAndZeroFromMemory(a);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DEY(void)
{
	uint16 y;

	y = TrimIndex(GetY() - 1);
	SetY(y);
	SetSignAndZeroFromIndex(y);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DEX(void)
{
	uint16 x;

	x = TrimIndex(GetX() - 1);
	SetX(x);
	SetSignAndZeroFromIndex(x);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::RotateLeft(uint16 uiValue)
{
	bool bCarryWillBeSet;

	bCarryWillBeSet = IsMemoryNegative(uiValue);
	uiValue = TrimMemory(uiValue << 1);
	uiValue = SetBit(uiValue, IsCarrySet(), 0);
	SetCarryFlag(bCarryWillBeSet);
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::RotateRight(uint16 uiValue)
{
	bool bCarryWillBeSet;

	bCarryWillBeSet = (uiValue & 1) != 0;
	uiValue = TrimMemory(uiValue >> 1);
	uiValue = SetBit(uiValue, IsCarrySet(), IsMemory16Bit() ? 15 : 7);
	SetCarryFlag(bCarryWillBeSet);
	return uiValue;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::BIT(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();

	if (IsMemory16Bit())
	{
		SetNegativeFlag(Is16bitValueNegative(uiValue));
		SetOverflowFlag((uiValue & 0x4000) != 0);
		SetZeroFlagFrom16BitValue((uiValue & GetA()));
	}
	else
	{
		SetNegativeFlag(Is8bitValueNegative(uiValue));
		SetOverflowFlag((uiValue & 0x40) != 0);
		SetZeroFlagFrom8BitValue((uiValue & GetA()));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::BIT_A(void)
{
	if (IsMemory16Bit())
	{
		SetZeroFlagFrom16BitValue((GetMemoryData() & GetA()));
	}
	else
	{
		SetZeroFlagFrom8BitValue((GetMemoryData() & GetA()));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ROR(void)
{
	SetMemoryData(RotateRight(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ROR_A(void)
{
	SetA(RotateRight(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ROL(void)
{
	SetMemoryData(RotateLeft(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ROL_A(void)
{
	SetA(RotateLeft(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::ShiftRight(uint16 uiValue)
{
	SetCarryFlag((uiValue & 1) != 0);
	return TrimMemory(uiValue >> 1);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::LSR(void)
{
	SetMemoryData(ShiftRight(GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::LSR_A(void)
{
	SetA(ShiftRight(GetA()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ASL(void)
{
	uint16	uiOperand;
	bool	bCarry;

	uiOperand = GetMemoryData();
	bCarry = IsMemoryNegative(uiOperand);
	uiOperand = TrimMemory(uiOperand << 1);
	SetCarryFlag(bCarry);
	SetMemoryData(uiOperand);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ASL_A(void)
{
	uint16	uiOperand;
	bool	bCarry;

	uiOperand = GetA();
	bCarry = IsMemoryNegative(uiOperand);
	uiOperand = TrimMemory(uiOperand << 1);
	SetCarryFlag(bCarry);
	SetA(uiOperand);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TSC(void)
{
	SetA(GetStackPointer());
	SetSignAndZeroFromMemory(GetA());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::EOR(void)
{
	uint16 uiResult;

	uiResult = TrimMemory(GetA() ^ GetMemoryData());
	SetSignAndZeroFromMemory(uiResult);
	SetA(uiResult);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TCD(void)
{
	SetDirectPage(muiAccumulator);
	SetSignAndZeroFlagFrom16BitValue(muiAccumulator);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ADC(void)
{
	if (IsMemory16Bit())
	{
		if (!IsDecimal())
		{
			Execute16BitADC();
		}
		else
		{
			Execute16BitBCDADC();
		}
	}
	else
	{
		if (!IsDecimal())
		{
			Execute8BitADC();
		}
		else
		{
			Execute8BitBCDADC();
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TXA(void)
{
	if (IsMemory8Bit() && IsIndex16Bit())
	{
		SetA(GetLowByte(GetX()));
	}
	else if (IsMemory16Bit() && IsIndex8Bit())
	{
		SetA(SetLowByte(GetA(), (uint8)GetX()));
	}
	else
	{
		SetA(GetX());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::LDA(void)
{
	SetA(GetMemoryData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::LDY(void)
{
	if (IsIndex16Bit())
	{
		SetY(muiData);
	}
	else
	{
		SetY(ToByte(muiData));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::LDX(void)
{
	if (IsIndex16Bit())
	{
		SetX(muiData);
	}
	else
	{
		SetX(ToByte(muiData));
	}
}


void CW65C816State::TSX(void)
{
	uint16	uiStackPointer;
	uint16	uiStackPointerLower8Bits;

	uiStackPointer = GetStackPointer();
	if (IsIndex8Bit())
	{
		uiStackPointerLower8Bits = GetLowByte(uiStackPointer);
		SetX(SetLowByte(GetX(), (uint8)uiStackPointerLower8Bits));
	}
	else
	{
		SetX(uiStackPointer);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TYA(void)
{
	if (IsMemory8Bit() && IsIndex16Bit())
	{
		SetA(GetLowByte(GetY()));
	}
	else if (IsMemory16Bit() && IsIndex8Bit())
	{
		SetA(SetLowByte(GetA(), (uint8)GetY()));
	}
	else
	{
		SetA(GetY());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TXS(void)
{
	uint16 uiNewStackPointer;

	if (IsEmulation())
	{
		uiNewStackPointer = 0x100 | GetLowByte(GetX());
		SetStackPointer(uiNewStackPointer);
	}
	else
	{
		SetStackPointer(GetX());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::CPY(void)
{
	uint16 uiValue;

	uiValue = GetIndexData();
	SetSignAndZeroFromIndex(TrimMemory(GetY() - uiValue));
	SetCarryFlag(GetY() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::CMP(void)
{
	uint16 uiValue;

	uiValue = GetMemoryData();
	SetSignAndZeroFromMemory(TrimMemory(GetA() - uiValue));
	SetCarryFlag(GetA() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::REP(void)
{
	uint8 uiValue;

	uiValue = ~GetPData();
	SetProcessorRegisterValue(GetProcessorRegisterValue() & uiValue);
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TAY(void)
{
	uint8	uiLower8BitsOfA;

	if ((IsMemory8Bit() && IsIndex8Bit()) ||
		(IsMemory16Bit() && IsIndex8Bit()))
	{
		uiLower8BitsOfA = GetLowByte(GetA());
		SetY(SetLowByte(GetY(), uiLower8BitsOfA));
	}
	else
	{
		SetY(GetA());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TAX(void)
{
	uint8	uiLower8BitsOfA;

	if ((IsMemory8Bit() && IsIndex8Bit()) ||
		(IsMemory16Bit() && IsIndex8Bit()))
	{
		uiLower8BitsOfA = GetLowByte(GetA());
		SetX(SetLowByte(GetX(), uiLower8BitsOfA));
	}
	else
	{
		SetX(GetA());
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DEC(void)
{
	SetMemoryData(TrimMemory(GetMemoryData() - 1));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::INC(void)
{
	SetMemoryData(TrimMemory(GetMemoryData() + 1));
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::CPX(void)
{
	uint16 uiValue;

	uiValue = GetIndexData();
	SetSignAndZeroFromIndex(TrimMemory(GetX() - uiValue));
	SetCarryFlag(GetX() >= uiValue);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SBC(void)
{
	if (IsMemory16Bit())
	{
		if (!IsDecimal())
		{
			Execute16BitSBC();
		}
		else
		{
			Execute16BitBCDSBC();
		}
	}
	else
	{
		if (!IsDecimal())
		{
			Execute8BitSBC();
		}
		else
		{
			Execute8BitBCDSBC();
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::SEP(void)
{
	uint8 uiValue;

	uiValue = GetPData();
	if (IsEmulation())
	{
		uiValue = uiValue & 0xCF;
	}
	SetProcessorRegisterValue(GetProcessorRegisterValue() | uiValue);
	ProcessorStatusChanged();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::XBA(void)
{
	uint16 uiLowerA;
	uint16 uiHigherA;

	uiLowerA = GetLowByte(GetA());
	uiHigherA = GetHighByte(GetA());

	uiLowerA = GetLowByte(GetA());
	uiHigherA = GetHighByte(GetA());
	muiAccumulator = uiHigherA | (uiLowerA << 8);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::XCE(void)
{
	bool bOldCarry;
	bool bOldEmulation;

	bOldCarry = IsCarrySet();
	bOldEmulation = IsEmulation();
	SetEmulationMode(bOldCarry);
	SetCarryFlag(bOldEmulation);

	SetAccumulatorWidthFlag(IsEmulation());
	SetIndexWidthFlag(IsEmulation());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::Reset(void)
{
	SetEmulationMode(true);
	muiDataBank = 0;
	muiDirectPage = 0;
	mcProgramCounter.SetBank(0);
	SetDecimalFlag(false);
	SetInterruptDisableFlag(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::TCS(void)
{
	uint16 uiStackPointer;

	uiStackPointer = GetStackPointer();
	if (IsEmulation())
	{
		uiStackPointer = SetLowByte(uiStackPointer, GetLowByte(GetA()));
	}
	else
	{
		uiStackPointer = GetA();
	}
	SetStackPointer(uiStackPointer);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::AND(void)
{
	SetA((GetA() & GetMemoryData()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DoneIfIndex8Bit(void)
{
	if (IsIndex8Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DoneIfIndex16Bit(void)
{
	if (IsIndex16Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DoneIfMemory8Bit(void)
{
	if (IsMemory8Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::DoneIfMemory16Bit(void)
{
	if (IsMemory16Bit())
	{
		DoneInstruction();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteProcessorStatus(void)
{
	SetPData(GetProcessorRegisterValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ReadProcessorStatus(void)
{
	SetProcessorRegisterValue(GetPData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetData16BitOffset(void)
{
	uint16 uiDataLow;

	uiDataLow = GetData16Bit();
	if (Is16bitValueNegative(uiDataLow))
	{
		return uiDataLow | 0xffff0000;
	}
	else
	{
		return uiDataLow;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetData8BitOffset(void)
{
	uint16 uiDataLow;

	uiDataLow = GetDataLow();
	if (Is8bitValueNegative(uiDataLow))
	{
		return uiDataLow | 0xffffff00;
	}
	else
	{
		return uiDataLow;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteDataLow(void)
{
	SetPData(GetDataLow());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteDataHigh(void)
{
	SetPData(GetDataHigh());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::ReadOpcode(void)
{
	SetOpcode(GetPData());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::NoteFourX(bool bNextWillRead)
{
	return (GetLowByte(mcAddress.GetOffset()) + GetLowByte(GetX())) > 0xFF ||
		!bNextWillRead ||
		IsIndex16Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::NoteFourY(bool bNextWillRead)
{
	return (GetLowByte(mcAddress.GetOffset()) + GetLowByte(GetY())) > 0xFF ||
		!bNextWillRead ||
		IsIndex16Bit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CW65C816State::NoteSix(void)
{
	uint16 uiOffset;

	if (IsEmulation())
	{
		uiOffset = mcProgramCounter.GetOffset();
		return AreOffsetsOnDifferentPages(uiOffset, uiOffset + GetData16Bit());
	}
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetAddressOffsetX(void)
{
	return ToByte(GetLowByte(mcAddress.GetOffset()) + GetLowByte(GetX()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint16 CW65C816State::GetAddressOffsetY(void)
{
	return ToByte(GetLowByte(mcAddress.GetOffset()) + GetLowByte(GetY()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteProgramBank(void)
{
	SetPData(mcProgramCounter.GetBank());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteProgramCounterHigh(void)
{
	SetPData(GetHighByte(mcProgramCounter.GetOffset()));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CW65C816State::WriteProgramCounterLow(void)
{
	SetPData(GetLowByte(mcProgramCounter.GetOffset()));
}

