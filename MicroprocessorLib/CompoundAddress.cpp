#include "Address.h"
#include "AddressOffsetArray.h"
#include "CompoundAddress.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCompoundAddress::Init(void)
{
	mapcAddressOffsets.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCompoundAddress::Kill(void)
{
	mapcAddressOffsets.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CAddressOffsetArray* CCompoundAddress::GetAddressOffsets(void)
{
	return &mapcAddressOffsets;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int32 CCompoundAddress::GetOffset(CW65C816* pcCPU)
{
	CAddress	cAddress;

	cAddress.Init();

	CalculateAddressSpanningFromAddressOffsets(&cAddress, pcCPU, &mapcAddressOffsets);
	return cAddress.GetOffset();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
uint8 CCompoundAddress::GetBank(CW65C816* pcCPU)
{
	CAddress	cAddress;

	cAddress.Init();

	CalculateAddressSpanningFromAddressOffsets(&cAddress, pcCPU, &mapcAddressOffsets);
	return cAddress.GetBank();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CCompoundAddress::Print(CChars* psz)
{
	mapcAddressOffsets.Print(psz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CCompoundAddress* Span(CAddressOffset* pcOffset, ...)
{
	va_list		            vaMarker;
	size		            iCount;
	CCompoundAddress*		pcSpan;
	CAddressOffsetArray*	papcOffsets;

	pcSpan = NewMalloc<CCompoundAddress>();
	pcSpan->Init();
	papcOffsets = pcSpan->GetAddressOffsets();

	if (pcOffset)
	{
		iCount = 0;

		va_start(vaMarker, pcOffset);
		while (pcOffset)
		{
			if (iCount > 10)
			{
				LOG_ERROR("Address Offsets have no terminal NULL.");
				return NULL;
			}

			papcOffsets->Add(pcOffset);

			iCount++;
			pcOffset = va_arg(vaMarker, CAddressOffset*);
		}
		va_end(vaMarker);
	}

	return pcSpan;
}

