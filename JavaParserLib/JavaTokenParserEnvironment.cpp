#include "BaseLib/MemoryFile.h"
#include "JavaTokenParserEnvironment.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTokenParserEnvironment::Init(char* szFilename, char* szText, bool bBreakOnError)
{
	int		iTextLen;

	iTextLen = strlen(szText);
	Init(szFilename, szText, iTextLen, bBreakOnError);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTokenParserEnvironment::Init(char* szFilename, char* szText, int iTextLen, bool bBreakOnError)
{
	mcLogger.Init(NULL);
	mcLogger.SetSilent(bBreakOnError);

	mcMemoryLog.Init();
	mcLogger.AddOutput(&mcMemoryLog);

	mcTokenDefinitions.Init();
	mcTokenMemory.Init();
	mcTokenParser.Init(&mcLogger, &mcTokenDefinitions, &mcTokenMemory, szFilename, szText, iTextLen);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTokenParserEnvironment::Kill(void)
{
	mcTokenParser.Kill();
	mcTokenMemory.Kill();
	mcTokenDefinitions.Kill();
	mcLogger.Kill();
	mcMemoryLog.Kill();
	
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTokenParserEnvironment::Parse(bool bFailOnError)
{
	return mcTokenParser.Parse(bFailOnError);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenParser* CTokenParserEnvironment::GetParser(void)
{
	return &mcTokenParser;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CTokenParserEnvironment::GetOutput(int* piLength)
{
	SafeAssign(piLength, mcMemoryLog.GetBufferSize());
	return (char*)mcMemoryLog.GetBufferPointer();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CTokenParserEnvironment::GetOutput(CChars* pszDest)
{
	char*	szBuffer;
	int		iLength;

	iLength = 0;
	szBuffer = GetOutput(&iLength);
	pszDest->Init(szBuffer, 0, iLength);
	pszDest->StripWhiteSpace(true);
	return pszDest->Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTokenParserEnvironment::DumpLog(void)
{
	CChars	sz;

	sz.Init((char*)mcMemoryLog.GetBufferPointer(), 0, mcMemoryLog.GetBufferSize());
	sz.DumpKill();
}

