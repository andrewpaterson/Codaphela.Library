#include "JavaTokenInteger.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenInteger::Init(STextPosition* psPosition, int32 iValue)
{
	CJavaTokenLiteral::Init(psPosition, JLT_Integer);
	miValue = iValue;
	meType = JIT_int32;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenInteger::Init(STextPosition* psPosition, int64 iValue)
{
	CJavaTokenLiteral::Init(psPosition, JLT_Integer);
	miValue = iValue;
	meType = JIT_int64;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenInteger::Kill(void)
{
	miValue = 0;
	meType = JIT_Unknown;
	CJavaTokenLiteral::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenInteger::Print(CChars* pszDest)
{
	if (meType == JIT_int32)
	{
		pszDest->Append((int32)miValue);
	}
	else if (meType == JIT_int64)
	{
		pszDest->Append(miValue);
		pszDest->Append('L');
	}
	else
	{
		pszDest->Append("[int?]");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CJavaTokenInteger::GetType(void)
{
	if (meType == JIT_int32)
	{
		return "Literal (int32)";
	}
	else if (meType == JIT_int64)
	{
		return "Literal (int64)";
	}
	else
	{
		return CJavaTokenLiteral::GetType();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenInteger::Is(int64 lli)
{
	if (meType == JIT_int64)
	{
		return miValue == lli;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenInteger::Is(int32 i)
{
	if (meType == JIT_int32)
	{
		return (int32)miValue == i;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenInteger::IsInteger(void) { return TRUE; }

