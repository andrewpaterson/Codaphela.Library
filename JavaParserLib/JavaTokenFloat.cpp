#include "JavaTokenFloat.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenFloat::Init(STextPosition* psPosition, float32 fValue)
{
	CJavaTokenLiteral::Init(psPosition, JLT_Float);
	mfValue = fValue;
	meType = JFT_float32;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenFloat::Init(STextPosition* psPosition, float64 fValue)
{
	CJavaTokenLiteral::Init(psPosition, JLT_Float);
	mfValue = fValue;
	meType = JFT_float64;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenFloat::Kill(void)
{
	mfValue = 0.0f;
	meType = JFT_Unknown;
	CJavaTokenLiteral::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaTokenFloat::Print(CChars* pszDest)
{
	if (meType == JFT_float32)
	{
		pszDest->Append((float32)mfValue, -1, TRUE);
	}
	else if (meType == JFT_float64)
	{
		pszDest->Append(mfValue);
	}
	else
	{
		pszDest->Append("[float?]");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CJavaTokenFloat::GetType(void)
{
	if (meType == JFT_float32)
	{
		return "Literal (float32)";
	}
	else if (meType == JFT_float64)
	{
		return "Literal (float64)";
	}
	else
	{
		return CJavaTokenLiteral::GetType();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenFloat::Is(float32 fValue)
{
	if (meType == JFT_float32)
	{
		return (float32)mfValue == fValue;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenFloat::Is(float64 fValue)
{
	if (meType == JFT_float64)
	{
		return mfValue == fValue;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CJavaTokenFloat::IsFloat(void) { return TRUE; }

