#include "JavaSyntaxLiteral.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxLiteral::Init(CJavaSyntaxTree* pcTree, CJavaSyntax* pcParent)
{
	CJavaSyntaxExpressionCommon::Init(pcTree, pcParent);
	mpcLiteral = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxLiteral::Kill(void)
{
	mpcLiteral = NULL;
	CJavaSyntaxExpressionCommon::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CJavaSyntaxLiteral::GetType(void)
{
	if (mpcLiteral)
	{
		return mpcLiteral->GetType();
	}
	return "Literal";
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxLiteral::TypePrint(CChars* pszDest, int iDepth)
{
	CJavaSyntaxExpressionCommon::TypePrint(pszDest, iDepth);
	pszDest->AppendNewLine();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxLiteral::PrettyPrint(CChars* pszDest, int iBlockDepth)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxLiteral::IsLiteral(void) { return true; }
bool CJavaSyntaxLiteral::IsCharacter(void) { return mpcLiteral != NULL && mpcLiteral->IsCharacter(); }
bool CJavaSyntaxLiteral::IsBoolean(void) { return mpcLiteral != NULL && mpcLiteral->IsBoolean(); }
bool CJavaSyntaxLiteral::IsString(void) { return mpcLiteral != NULL && mpcLiteral->IsString(); }
bool CJavaSyntaxLiteral::IsInteger(void) { return mpcLiteral != NULL && mpcLiteral->IsInteger(); }
bool CJavaSyntaxLiteral::IsFloat(void) { return mpcLiteral != NULL && mpcLiteral->IsFloat(); }
bool CJavaSyntaxLiteral::IsNull(void) { return mpcLiteral != NULL && mpcLiteral->IsNull(); }


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenCharacter* CJavaSyntaxLiteral::GetCharacter(void)
{ 
	if (IsCharacter())
	{
		return (CJavaTokenCharacter*)mpcLiteral;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenBoolean* CJavaSyntaxLiteral::GetBoolean(void)
{
	if (IsBoolean())
	{
		return (CJavaTokenBoolean*)mpcLiteral;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenString* CJavaSyntaxLiteral::GetString(void)
{
	if (IsString())
	{
		return (CJavaTokenString*)mpcLiteral;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenInteger* CJavaSyntaxLiteral::GetInteger(void)
{
	if (IsInteger())
	{
		return (CJavaTokenInteger*)mpcLiteral;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenFloat* CJavaSyntaxLiteral::GetFloat(void)
{
	if (IsFloat())
	{
		return (CJavaTokenFloat*)mpcLiteral;
	}
	return NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaTokenNull* CJavaSyntaxLiteral::GetNull(void)
{
	if (IsNull())
	{
		return (CJavaTokenNull*)mpcLiteral;
	}
	return NULL;
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxLiteral::SetLiteral(CJavaTokenLiteral* pcLiteral)
{
	mpcLiteral = pcLiteral;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxLiteral::IsCompoundStatement(void)
{
	return false;
}

