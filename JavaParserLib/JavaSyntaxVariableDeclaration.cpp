#include "JavaSyntaxVariableDeclaration.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::Init(CJavaSyntaxTree* pcTree, CJavaSyntax* pcParent)
{
	CJavaSyntax::Init(pcTree, pcParent);

	mcModifiers.Init();
	mapcType.Init();
	mpcPrimitiveType = NULL;
	mpcName = NULL;
	mpcGeneric = NULL;
	miArrayDimension = 0;

	mpcInitialiser = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::Kill(void)
{
	mpcInitialiser = NULL;
		
	mpcPrimitiveType = NULL;
	mpcName = NULL;
	mpcGeneric = NULL;
	miArrayDimension = 0;
	mapcType.Kill();
	mcModifiers.Kill();

	CJavaSyntaxStatement::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CJavaSyntaxVariableDeclaration::GetType(void)
{
	return "Variable";
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::TypePrint(CChars* pszDest, int iDepth)
{
	CJavaSyntaxStatement::TypePrint(pszDest, iDepth);
	mcModifiers.Print(pszDest);
	pszDest->Append(' ');

	if (mpcPrimitiveType)
	{
		mpcPrimitiveType->Print(pszDest);
		pszDest->Append(' ');
	}
	
	if (mapcType.IsNotEmpty())
	{
		PrintTokenArray(pszDest, &mapcType);
		pszDest->Append(' ');
	}

	mpcName->Print(pszDest);
	pszDest->Append(' ');

	int i;
	for (i = 0; i < miArrayDimension; i++)
	{
		pszDest->Append("[] ");
	}

	pszDest->AppendNewLine();

	if (mpcGeneric)
	{
		mpcGeneric->TypePrint(pszDest, iDepth + 1);
	}

	if (mpcInitialiser)
	{
		mpcInitialiser->TypePrint(pszDest, iDepth + 1);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::PrettyPrint(CChars* pszDest, int iBlockDepth)
{
	PrintModifiers(pszDest, mcModifiers);

	if (mpcPrimitiveType)
	{
		mpcPrimitiveType->Print(pszDest);
	}

	if (mapcType.IsNotEmpty())
	{
		PrintTokenArray(pszDest, &mapcType);
	}

	if (mpcGeneric)
	{
		mpcGeneric->PrettyPrint(pszDest);
	}
	pszDest->Append(' ');

	mpcName->Print(pszDest);

	int i;
	for (i = 0; i < miArrayDimension; i++)
	{
		pszDest->Append("[]");
	}

	if (mpcInitialiser)
	{
		pszDest->Append(' ');
		mpcInitialiser->PrettyPrint(pszDest);
	}

}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxVariableDeclaration::IsVariableDeclaration(void)
{
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxVariableDeclaration::IsCompoundStatement(void)
{
	return false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetModifiers(CJavaModifiers cModifiers)
{
	mcModifiers = cModifiers;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetPrimitiveType(CJavaTokenKeyword* pcPrimitiveType)
{
	mpcPrimitiveType = pcPrimitiveType;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::AddIdentifierType(CJavaTokenIdentifier* pcIdentifier)
{
	mapcType.Add(pcIdentifier);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetName(CJavaTokenIdentifier* pcName)
{
	mpcName = pcName;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetInitialiser(CJavaSyntaxVariableInitialiser* pcInitialiser)
{
	mpcInitialiser = pcInitialiser;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetGeneric(CJavaSyntaxGeneric* pcGeneric)
{
	mpcGeneric = pcGeneric;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJavaSyntaxVariableDeclaration::SetArrayDimension(int iArrayDimension)
{
	miArrayDimension = iArrayDimension;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxVariableDeclaration::IsPrimitiveType(void)
{
	return ((mpcPrimitiveType != NULL) && (mapcType.NumElements() == 0));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxVariableDeclaration::IsReferenceType(void)
{
	return (mapcType.NumElements() > 0) && (mpcPrimitiveType == NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CJavaSyntaxVariableDeclaration::IsGeneric(void)
{
	return IsReferenceType() && (mpcGeneric != NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CJavaSyntaxVariableDeclaration::GetArrayDepth(void)
{
	return miArrayDimension;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CJavaSyntaxVariableDeclaration::GetName(void)
{
	if (mpcName)
	{
		return mpcName->GetIdentifer();
	}
	return NULL;
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CJavaModifiers* CJavaSyntaxVariableDeclaration::GetModifiers(void) { return &mcModifiers; }
CIdentifierArray* CJavaSyntaxVariableDeclaration::GetReferenceType(void) { return &mapcType; }
CJavaTokenKeyword* CJavaSyntaxVariableDeclaration::GetPrimitiveType(void) { return mpcPrimitiveType; }
CJavaSyntaxGeneric* CJavaSyntaxVariableDeclaration::GetGeneric(void) { return mpcGeneric; }
