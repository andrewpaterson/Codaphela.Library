void DivideIntIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(int*)pvRight); }
void DivideIntIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideIntIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(char*)pvRight); }
void DivideIntIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(float*)pvRight); }
void DivideIntIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(double*)pvRight); }
void DivideIntIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideIntIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideIntIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideIntShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideIntShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideIntShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideIntShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideIntShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideIntShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideIntShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(int*)pvRight); }
void DivideIntCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideIntCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(char*)pvRight); }
void DivideIntCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(float*)pvRight); }
void DivideIntCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(double*)pvRight); }
void DivideIntCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideIntCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideIntCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(int*)pvRight); }
void DivideIntFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideIntFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(char*)pvRight); }
void DivideIntFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(float*)pvRight); }
void DivideIntFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(double*)pvRight); }
void DivideIntFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideIntFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideIntFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(int*)pvRight); }
void DivideIntDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideIntDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(char*)pvRight); }
void DivideIntDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(float*)pvRight); }
void DivideIntDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(double*)pvRight); }
void DivideIntDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideIntDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideIntDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideIntUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideIntUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideIntUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideIntUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideIntUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideIntUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideIntUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideIntUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideIntUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideIntUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideIntUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideIntUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideIntUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideIntUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideIntUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideIntUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideIntUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideIntUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideIntUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideIntUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideIntUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideIntLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideIntLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideIntLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideIntLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideIntLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideIntLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideIntLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideIntULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideIntULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideIntULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideIntULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideIntULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideIntULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideIntULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideIntULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideIntULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideIntULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(int*)pvDest = (int)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(int*)pvRight); }
void DivideShortIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideShortIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(char*)pvRight); }
void DivideShortIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(float*)pvRight); }
void DivideShortIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(double*)pvRight); }
void DivideShortIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideShortIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideShortIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideShortShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideShortShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideShortShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideShortShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideShortShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideShortShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideShortShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(int*)pvRight); }
void DivideShortCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideShortCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(char*)pvRight); }
void DivideShortCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(float*)pvRight); }
void DivideShortCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(double*)pvRight); }
void DivideShortCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideShortCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideShortCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(int*)pvRight); }
void DivideShortFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideShortFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(char*)pvRight); }
void DivideShortFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(float*)pvRight); }
void DivideShortFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(double*)pvRight); }
void DivideShortFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideShortFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideShortFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(int*)pvRight); }
void DivideShortDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideShortDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(char*)pvRight); }
void DivideShortDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(float*)pvRight); }
void DivideShortDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(double*)pvRight); }
void DivideShortDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideShortDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideShortDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideShortUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideShortUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideShortUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideShortUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideShortUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideShortUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideShortUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideShortUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideShortUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideShortUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideShortUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideShortUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideShortUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideShortUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideShortUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideShortUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideShortUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideShortUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideShortUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideShortUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideShortUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideShortLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideShortLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideShortLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideShortLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideShortLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideShortLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideShortLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideShortULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideShortULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideShortULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideShortULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideShortULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideShortULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideShortULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideShortULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideShortULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideShortULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(int16*)pvDest = (int16)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(int*)pvRight); }
void DivideCharIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideCharIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(char*)pvRight); }
void DivideCharIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(float*)pvRight); }
void DivideCharIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(double*)pvRight); }
void DivideCharIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideCharIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideCharIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideCharShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideCharShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideCharShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideCharShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideCharShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideCharShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideCharShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(int*)pvRight); }
void DivideCharCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideCharCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(char*)pvRight); }
void DivideCharCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(float*)pvRight); }
void DivideCharCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(double*)pvRight); }
void DivideCharCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideCharCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideCharCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(int*)pvRight); }
void DivideCharFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideCharFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(char*)pvRight); }
void DivideCharFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(float*)pvRight); }
void DivideCharFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(double*)pvRight); }
void DivideCharFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideCharFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideCharFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(int*)pvRight); }
void DivideCharDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideCharDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(char*)pvRight); }
void DivideCharDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(float*)pvRight); }
void DivideCharDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(double*)pvRight); }
void DivideCharDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideCharDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideCharDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideCharUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideCharUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideCharUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideCharUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideCharUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideCharUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideCharUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideCharUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideCharUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideCharUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideCharUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideCharUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideCharUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideCharUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideCharUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideCharUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideCharUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideCharUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideCharUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideCharUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideCharUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideCharLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideCharLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideCharLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideCharLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideCharLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideCharLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideCharLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideCharULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideCharULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideCharULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideCharULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideCharULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideCharULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideCharULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideCharULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideCharULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideCharULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(char*)pvDest = (char)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(int*)pvRight); }
void DivideFloatIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideFloatIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(char*)pvRight); }
void DivideFloatIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(float*)pvRight); }
void DivideFloatIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(double*)pvRight); }
void DivideFloatIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideFloatIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideFloatIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideFloatShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideFloatShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideFloatShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideFloatShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideFloatShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideFloatShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideFloatShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(int*)pvRight); }
void DivideFloatCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideFloatCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(char*)pvRight); }
void DivideFloatCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(float*)pvRight); }
void DivideFloatCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(double*)pvRight); }
void DivideFloatCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideFloatCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideFloatCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(int*)pvRight); }
void DivideFloatFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideFloatFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(char*)pvRight); }
void DivideFloatFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(float*)pvRight); }
void DivideFloatFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(double*)pvRight); }
void DivideFloatFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideFloatFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideFloatFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(int*)pvRight); }
void DivideFloatDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideFloatDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(char*)pvRight); }
void DivideFloatDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(float*)pvRight); }
void DivideFloatDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(double*)pvRight); }
void DivideFloatDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideFloatDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideFloatDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideFloatUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideFloatUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideFloatUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideFloatUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideFloatUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideFloatUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideFloatUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideFloatUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideFloatUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideFloatUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideFloatUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideFloatUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideFloatUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideFloatUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideFloatUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideFloatUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideFloatUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideFloatUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideFloatUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideFloatUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideFloatUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideFloatLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideFloatLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideFloatLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideFloatLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideFloatLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideFloatLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideFloatLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideFloatULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideFloatULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideFloatULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideFloatULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideFloatULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideFloatULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideFloatULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideFloatULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideFloatULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideFloatULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(float*)pvDest = (float)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(int*)pvRight); }
void DivideDoubleIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideDoubleIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(char*)pvRight); }
void DivideDoubleIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(float*)pvRight); }
void DivideDoubleIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(double*)pvRight); }
void DivideDoubleIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideDoubleShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideDoubleShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideDoubleShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideDoubleShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideDoubleShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(int*)pvRight); }
void DivideDoubleCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideDoubleCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(char*)pvRight); }
void DivideDoubleCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(float*)pvRight); }
void DivideDoubleCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(double*)pvRight); }
void DivideDoubleCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(int*)pvRight); }
void DivideDoubleFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideDoubleFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(char*)pvRight); }
void DivideDoubleFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(float*)pvRight); }
void DivideDoubleFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(double*)pvRight); }
void DivideDoubleFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(int*)pvRight); }
void DivideDoubleDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideDoubleDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(char*)pvRight); }
void DivideDoubleDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(float*)pvRight); }
void DivideDoubleDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(double*)pvRight); }
void DivideDoubleDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideDoubleUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideDoubleUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideDoubleUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideDoubleUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideDoubleUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideDoubleUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideDoubleUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideDoubleUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideDoubleUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideDoubleUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideDoubleUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideDoubleUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideDoubleUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideDoubleUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideDoubleUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideDoubleLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideDoubleLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideDoubleLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideDoubleLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideDoubleLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideDoubleULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideDoubleULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideDoubleULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideDoubleULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideDoubleULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideDoubleULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideDoubleULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideDoubleULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideDoubleULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideDoubleULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(double*)pvDest = (double)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(int*)pvRight); }
void DivideUIntIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideUIntIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(char*)pvRight); }
void DivideUIntIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(float*)pvRight); }
void DivideUIntIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(double*)pvRight); }
void DivideUIntIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideUIntIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideUIntIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideUIntShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideUIntShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideUIntShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideUIntShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideUIntShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideUIntShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideUIntShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(int*)pvRight); }
void DivideUIntCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideUIntCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(char*)pvRight); }
void DivideUIntCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(float*)pvRight); }
void DivideUIntCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(double*)pvRight); }
void DivideUIntCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideUIntCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideUIntCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(int*)pvRight); }
void DivideUIntFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideUIntFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(char*)pvRight); }
void DivideUIntFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(float*)pvRight); }
void DivideUIntFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(double*)pvRight); }
void DivideUIntFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideUIntFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideUIntFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(int*)pvRight); }
void DivideUIntDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideUIntDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(char*)pvRight); }
void DivideUIntDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(float*)pvRight); }
void DivideUIntDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(double*)pvRight); }
void DivideUIntDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideUIntDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideUIntDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideUIntUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideUIntUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideUIntUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideUIntUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideUIntUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideUIntUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideUIntUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideUIntUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideUIntUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideUIntUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideUIntUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideUIntUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideUIntUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideUIntUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideUIntUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideUIntUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideUIntUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideUIntUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideUIntUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideUIntUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideUIntUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideUIntLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideUIntLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideUIntLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideUIntLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideUIntLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUIntLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUIntLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUIntULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideUIntULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideUIntULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideUIntULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideUIntULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideUIntULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUIntULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUIntULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUIntULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUIntULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned int*)pvDest = (unsigned int)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(int*)pvRight); }
void DivideUShortIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideUShortIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(char*)pvRight); }
void DivideUShortIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(float*)pvRight); }
void DivideUShortIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(double*)pvRight); }
void DivideUShortIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideUShortIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideUShortIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideUShortShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideUShortShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideUShortShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideUShortShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideUShortShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideUShortShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideUShortShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(int*)pvRight); }
void DivideUShortCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideUShortCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(char*)pvRight); }
void DivideUShortCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(float*)pvRight); }
void DivideUShortCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(double*)pvRight); }
void DivideUShortCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideUShortCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideUShortCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(int*)pvRight); }
void DivideUShortFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideUShortFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(char*)pvRight); }
void DivideUShortFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(float*)pvRight); }
void DivideUShortFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(double*)pvRight); }
void DivideUShortFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideUShortFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideUShortFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(int*)pvRight); }
void DivideUShortDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideUShortDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(char*)pvRight); }
void DivideUShortDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(float*)pvRight); }
void DivideUShortDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(double*)pvRight); }
void DivideUShortDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideUShortDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideUShortDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideUShortUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideUShortUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideUShortUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideUShortUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideUShortUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideUShortUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideUShortUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideUShortUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideUShortUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideUShortUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideUShortUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideUShortUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideUShortUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideUShortUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideUShortUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideUShortUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideUShortUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideUShortUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideUShortUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideUShortUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideUShortUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideUShortLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideUShortLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideUShortLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideUShortLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideUShortLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUShortLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUShortLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUShortULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideUShortULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideUShortULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideUShortULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideUShortULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideUShortULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUShortULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUShortULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUShortULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUShortULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(uint16*)pvDest = (uint16)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(int*)pvRight); }
void DivideUCharIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideUCharIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(char*)pvRight); }
void DivideUCharIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(float*)pvRight); }
void DivideUCharIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(double*)pvRight); }
void DivideUCharIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideUCharIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideUCharIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideUCharShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideUCharShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideUCharShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideUCharShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideUCharShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideUCharShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideUCharShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(int*)pvRight); }
void DivideUCharCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideUCharCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(char*)pvRight); }
void DivideUCharCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(float*)pvRight); }
void DivideUCharCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(double*)pvRight); }
void DivideUCharCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideUCharCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideUCharCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(int*)pvRight); }
void DivideUCharFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideUCharFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(char*)pvRight); }
void DivideUCharFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(float*)pvRight); }
void DivideUCharFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(double*)pvRight); }
void DivideUCharFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideUCharFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideUCharFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(int*)pvRight); }
void DivideUCharDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideUCharDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(char*)pvRight); }
void DivideUCharDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(float*)pvRight); }
void DivideUCharDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(double*)pvRight); }
void DivideUCharDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideUCharDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideUCharDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideUCharUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideUCharUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideUCharUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideUCharUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideUCharUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideUCharUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideUCharUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideUCharUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideUCharUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideUCharUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideUCharUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideUCharUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideUCharUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideUCharUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideUCharUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideUCharUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideUCharUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideUCharUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideUCharUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideUCharUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideUCharUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideUCharLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideUCharLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideUCharLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideUCharLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideUCharLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUCharLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUCharLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideUCharULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideUCharULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideUCharULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideUCharULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideUCharULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideUCharULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideUCharULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideUCharULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideUCharULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideUCharULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned char*)pvDest = (unsigned char)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(int*)pvRight); }
void DivideLongIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideLongIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(char*)pvRight); }
void DivideLongIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(float*)pvRight); }
void DivideLongIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(double*)pvRight); }
void DivideLongIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideLongIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideLongIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideLongShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideLongShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideLongShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideLongShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideLongShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideLongShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideLongShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(int*)pvRight); }
void DivideLongCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideLongCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(char*)pvRight); }
void DivideLongCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(float*)pvRight); }
void DivideLongCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(double*)pvRight); }
void DivideLongCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideLongCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideLongCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(int*)pvRight); }
void DivideLongFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideLongFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(char*)pvRight); }
void DivideLongFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(float*)pvRight); }
void DivideLongFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(double*)pvRight); }
void DivideLongFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideLongFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideLongFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(int*)pvRight); }
void DivideLongDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideLongDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(char*)pvRight); }
void DivideLongDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(float*)pvRight); }
void DivideLongDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(double*)pvRight); }
void DivideLongDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideLongDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideLongDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideLongUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideLongUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideLongUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideLongUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideLongUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideLongUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideLongUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideLongUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideLongUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideLongUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideLongUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideLongUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideLongUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideLongUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideLongUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideLongUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideLongUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideLongUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideLongUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideLongUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideLongUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideLongLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideLongLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideLongLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideLongLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideLongLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideLongLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideLongLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideLongULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideLongULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideLongULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideLongULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideLongULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideLongULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideLongULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideLongULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideLongULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideLongULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(long long int*)pvDest = (long long int)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(int*)pvRight); }
void DivideULongIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(int16*)pvRight); }
void DivideULongIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(char*)pvRight); }
void DivideULongIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(float*)pvRight); }
void DivideULongIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(double*)pvRight); }
void DivideULongIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(uint16*)pvRight); }
void DivideULongIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(long long int*)pvRight); }
void DivideULongIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(int*)pvRight); }
void DivideULongShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(int16*)pvRight); }
void DivideULongShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(char*)pvRight); }
void DivideULongShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(float*)pvRight); }
void DivideULongShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(double*)pvRight); }
void DivideULongShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(uint16*)pvRight); }
void DivideULongShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(long long int*)pvRight); }
void DivideULongShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(int16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(int*)pvRight); }
void DivideULongCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(int16*)pvRight); }
void DivideULongCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(char*)pvRight); }
void DivideULongCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(float*)pvRight); }
void DivideULongCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(double*)pvRight); }
void DivideULongCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(uint16*)pvRight); }
void DivideULongCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(long long int*)pvRight); }
void DivideULongCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongFloatInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(int*)pvRight); }
void DivideULongFloatShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(int16*)pvRight); }
void DivideULongFloatChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(char*)pvRight); }
void DivideULongFloatFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(float*)pvRight); }
void DivideULongFloatDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(double*)pvRight); }
void DivideULongFloatUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongFloatUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(uint16*)pvRight); }
void DivideULongFloatUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongFloatLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(long long int*)pvRight); }
void DivideULongFloatULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(float*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongDoubleInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(int*)pvRight); }
void DivideULongDoubleShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(int16*)pvRight); }
void DivideULongDoubleChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(char*)pvRight); }
void DivideULongDoubleFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(float*)pvRight); }
void DivideULongDoubleDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(double*)pvRight); }
void DivideULongDoubleUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongDoubleUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(uint16*)pvRight); }
void DivideULongDoubleUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongDoubleLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(long long int*)pvRight); }
void DivideULongDoubleULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(double*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongUIntInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(int*)pvRight); }
void DivideULongUIntShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(int16*)pvRight); }
void DivideULongUIntChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(char*)pvRight); }
void DivideULongUIntFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(float*)pvRight); }
void DivideULongUIntDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(double*)pvRight); }
void DivideULongUIntUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongUIntUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(uint16*)pvRight); }
void DivideULongUIntUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongUIntLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(long long int*)pvRight); }
void DivideULongUIntULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongUShortInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(int*)pvRight); }
void DivideULongUShortShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(int16*)pvRight); }
void DivideULongUShortChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(char*)pvRight); }
void DivideULongUShortFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(float*)pvRight); }
void DivideULongUShortDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(double*)pvRight); }
void DivideULongUShortUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongUShortUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(uint16*)pvRight); }
void DivideULongUShortUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongUShortLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(long long int*)pvRight); }
void DivideULongUShortULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(uint16*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongUCharInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(int*)pvRight); }
void DivideULongUCharShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(int16*)pvRight); }
void DivideULongUCharChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(char*)pvRight); }
void DivideULongUCharFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(float*)pvRight); }
void DivideULongUCharDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(double*)pvRight); }
void DivideULongUCharUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongUCharUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(uint16*)pvRight); }
void DivideULongUCharUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongUCharLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(long long int*)pvRight); }
void DivideULongUCharULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned char*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongLongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(int*)pvRight); }
void DivideULongLongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(int16*)pvRight); }
void DivideULongLongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(char*)pvRight); }
void DivideULongLongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(float*)pvRight); }
void DivideULongLongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(double*)pvRight); }
void DivideULongLongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongLongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(uint16*)pvRight); }
void DivideULongLongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongLongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(long long int*)pvRight); }
void DivideULongLongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(long long int*)pvLeft / *(unsigned long long int*)pvRight); }
void DivideULongULongInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(int*)pvRight); }
void DivideULongULongShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(int16*)pvRight); }
void DivideULongULongChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(char*)pvRight); }
void DivideULongULongFloat(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(float*)pvRight); }
void DivideULongULongDouble(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(double*)pvRight); }
void DivideULongULongUInt(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(unsigned int*)pvRight); }
void DivideULongULongUShort(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(uint16*)pvRight); }
void DivideULongULongUChar(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(unsigned char*)pvRight); }
void DivideULongULongLong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(long long int*)pvRight); }
void DivideULongULongULong(void* pvDest, void* pvLeft, void* pvRight) { *(unsigned long long int*)pvDest = (unsigned long long int)(*(unsigned long long int*)pvLeft / *(unsigned long long int*)pvRight); }
