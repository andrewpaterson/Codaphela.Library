/** ---------------- COPYRIGHT NOTICE, DISCLAIMER, and LICENSE ------------- **

Copyright (c) 2012 Andrew Paterson

This file is part of The Codaphela Project: Codaphela CoreLib

Codaphela CoreLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Codaphela CoreLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Codaphela CoreLib.  If not, see <http://www.gnu.org/licenses/>.

Microsoft Windows is Copyright Microsoft Corporation

** ------------------------------------------------------------------------ **/
#include "PlainTextEditor.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Init(void)
{
	Init("");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Init(char* szText)
{
	mszText.Init(szText);
	mszText.PassifyNewlines();
	mbMultiLine = TRUE;
	miEditPos = 0;
	miPageLength = 25;

	miSelectionAnchor = -1;
	miSelectionFloating = -1;
	miTabWidth = 4;
	miUpDownCharCount = -1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Kill(void)
{
	mszText.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Left(void)
{
	ClearSelection();
	miEditPos = FindLeft(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Right(void)
{
	ClearSelection();
	miEditPos = FindRight(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Up(void)
{
	ClearSelection();
	UpdateUpDown(miEditPos);
	miEditPos = FindUp(miEditPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Down(void)
{
	ClearSelection();
	UpdateUpDown(miEditPos);
	miEditPos = FindDown(miEditPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Home(void)
{
	ClearSelection();
	miEditPos = FindHome(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::End(void)
{
	ClearSelection();
	miEditPos = FindEnd(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::DocumentHome(void)
{
	ClearSelection();
	miEditPos = FindDocumentHome();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::DocumentEnd(void)
{
	ClearSelection();
	miEditPos = FindDocumentEnd();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::PageUp(void)
{
	ClearSelection();
	UpdateUpDown(miEditPos);
	miEditPos = FindPageUp(miEditPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::PageDown(void)
{
	ClearSelection();
	UpdateUpDown(miEditPos);
	miEditPos = FindPageDown(miEditPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::WordLeft(void)
{
	ClearSelection();
	miEditPos = FindWordLeft(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::WordRight(void)
{
	ClearSelection();
	miEditPos = FindWordRight(miEditPos);
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectLeft(void)
{
	BeginSelection();
	miEditPos = FindLeft(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectRight(void)
{
	BeginSelection();
	miEditPos = FindRight(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectWordLeft(void)
{
	BeginSelection();
	miEditPos = FindWordLeft(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectWordRight(void)
{
	BeginSelection();
	miEditPos = FindWordRight(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectUp(void)
{
	UpdateUpDown(miEditPos);
	BeginSelection();
	miEditPos = FindUp(miEditPos);
	EndSelection();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectDown(void)
{
	UpdateUpDown(miEditPos);
	BeginSelection();
	miEditPos = FindDown(miEditPos);
	EndSelection();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectHome(void)
{
	BeginSelection();
	miEditPos = FindHome(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectEnd(void)
{
	BeginSelection();
	miEditPos = FindEnd(miEditPos);
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectDocumentHome(void)
{
	BeginSelection();
	miEditPos = FindDocumentHome();
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectDocumentEnd(void)
{
	BeginSelection();
	miEditPos = FindDocumentEnd();
	EndSelection();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectPageUp(void)
{
	UpdateUpDown(miEditPos);
	BeginSelection();
	miEditPos = FindPageUp(miEditPos);
	EndSelection();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectPageDown(void)
{
	UpdateUpDown(miEditPos);
	BeginSelection();
	miEditPos = FindPageDown(miEditPos);
	EndSelection();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectWholeWord(void)
{
	SelectWordLeft();
	miSelectionAnchor = miSelectionFloating;
	SelectWordRight();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Delete(void)
{
	if (!IsSelected())
	{
		if (CanGoRight(miEditPos))
		{
			mszText.RemoveCharacter(miEditPos);
			ResetUpDown();
		}
	}
	else
	{
		miEditPos = DeleteSelection();
		ResetUpDown();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Backspace(void)
{
	if (!IsSelected())
	{
		if (CanGoLeft(miEditPos))
		{
			mszText.RemoveCharacter(miEditPos-1);
			Left();
		}
	}
	else
	{
		miEditPos = DeleteSelection();
		ResetUpDown();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Enter(void)
{
	char	szTemp[2];

	if (!IsSelected())
	{
		mszText.Insert(miEditPos, '\n');
		Right();
	}
	else
	{
		szTemp[0] = '\n';
		szTemp[1] = 0;
		OverwriteSelection(szTemp);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Printable(char c)
{
	Printable(c, TRUE);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Printable(char c, BOOL bInsert)
{
	char	cCurrent;
	int		iCharCount;
	char	szTemp[2];

	if (!IsSelected())
	{
		if (bInsert)
		{
			mszText.Insert(miEditPos, c);
		}
		else
		{
			cCurrent = mszText.GetChar(miEditPos);
			if ((miEditPos == mszText.Length()) || (cCurrent == '\n'))
			{
				mszText.Insert(miEditPos, c);
			}
			else if (cCurrent == '\t')
			{
				iCharCount = GetCharCountAlongLine(miEditPos);
				if (iCharCount % miTabWidth == miTabWidth-1)
				{
					mszText.SetChar(miEditPos, c);
				}
				else
				{
					mszText.Insert(miEditPos, c);
				}
			}
			else
			{
				mszText.SetChar(miEditPos, c);
			}
		}
		Right();
	}
	else
	{
		szTemp[0] = c;
		szTemp[1] = 0;
		OverwriteSelection(szTemp);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Cut(CChars* pszDest)
{
	if (IsSelected())
	{
		Copy(pszDest);
		miEditPos = DeleteSelection();
		ResetUpDown();
	}
	else
	{
		CutLine(pszDest);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Copy(CChars* pszDest)
{
	int	iStart;
	int iEnd;

	if (IsSelected())
	{
		if (miSelectionAnchor < miSelectionFloating)
		{
			iStart = miSelectionAnchor;
			iEnd = miSelectionFloating;
		}
		else
		{
			iStart = miSelectionFloating;
			iEnd = miSelectionAnchor;
		}
		pszDest->AppendSubString(mszText, iStart, iEnd);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Paste(char* szSource)
{
	CChars	szTemp;

	if (!IsSelected())
	{
		szTemp.Init(szSource);
		szTemp.PassifyNewlines();

		mszText.Insert(miEditPos, &szTemp);
		miEditPos += szTemp.Length();
		szTemp.Kill();

		ResetUpDown();
	}
	else
	{
		OverwriteSelection(szSource);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::CutLine(CChars* pszDest)
{
	int		iCount;
	int		iStart;
	int		iEnd;

	if (!IsSelected())
	{
		iCount = GetCharCountAlongLine(miEditPos);
		iStart = FindStartOfLine(miEditPos);
		iEnd = FindEndOfLine(miEditPos);

		if (CanGoRight(iEnd))
		{
			iEnd++;
		}

		pszDest->AppendSubString(mszText, iStart, iEnd);
		mszText.Remove(iStart, iEnd);
		ResetUpDown();

		miEditPos = FindPositionAlongLine(iStart, iCount);
	}
	else
	{
		Cut(pszDest);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Duplicate(void)
{
	int		iStart;
	int		iEnd;
	CChars	szTemp;
	BOOL	bNewLine;

	if (!IsSelected())
	{
		iStart = FindStartOfLine(miEditPos);
		iEnd = FindEndOfLine(miEditPos);
		bNewLine = TRUE;
	}
	else
	{
		if (miSelectionAnchor < miSelectionFloating)
		{
			iStart = miSelectionAnchor;
			iEnd = miSelectionFloating;
		}
		else
		{
			iStart = miSelectionFloating;
			iEnd = miSelectionAnchor;
		}
		bNewLine = FALSE;
	}

	szTemp.Init();
	szTemp.AppendSubString(mszText, iStart, iEnd);
	if (bNewLine)
	{
		szTemp.AppendNewLine();
	}
	mszText.Insert(iStart, &szTemp);
	szTemp.Kill();
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::DeleteWordRemainingRight(void)
{
	int	iEnd;

	iEnd = FindWordRight(miEditPos);
	if (miEditPos != iEnd)
	{
		ClearSelection();
		mszText.Remove(miEditPos, iEnd);
	}
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::DeleteWordRemainingLeft(void)
{
	int	iEnd;

	iEnd = FindWordLeft(miEditPos);
	if (miEditPos != iEnd)
	{
		ClearSelection();
		mszText.Remove(miEditPos, iEnd);
	}
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::DeleteLine(void)
{
	int		iCount;
	int		iStart;
	int		iEnd;

	iCount = GetCharCountAlongLine(miEditPos);
	if (!IsSelected())
	{
		iStart = FindStartOfLine(miEditPos);
		iEnd = FindEndOfLine(miEditPos);
	}
	else
	{
		if (miSelectionAnchor < miSelectionFloating)
		{
			iStart = miSelectionAnchor;
			iEnd = miSelectionFloating;
		}
		else
		{
			iStart = miSelectionFloating;
			iEnd = miSelectionAnchor;
		}

		iStart = FindStartOfLine(iStart);
		iEnd = FindEndOfLine(iEnd);
	}

	if (CanGoRight(iEnd))
	{
		iEnd++;
	}

	mszText.Remove(iStart, iEnd);
	ResetUpDown();

	miEditPos = FindPositionAlongLine(iStart, iCount);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::HomeEnter(void)
{
	Home();
	Enter();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::EndEnter(void)
{
	End();
	Enter();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Space(void)
{
	Space(TRUE);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Space(BOOL bInsert)
{
	Printable(' ', bInsert);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Tab(void)
{
	Tab(TRUE);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::Tab(BOOL bInsert)
{
	char	szTemp[2];

	if (!IsSelected())
	{
		mszText.Insert(miEditPos, '\t');
		Right();
	}
	else
	{
		szTemp[0] = '\t';
		szTemp[1] = 0;
		OverwriteSelection(szTemp);
	}
}	


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::BackTab(void)
{
	//If whitespace exists at start of line then remove a tabs worth from it.
}	


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindLeft(int iCurrentPos)
{
	if (CanGoLeft(iCurrentPos))
	{
		iCurrentPos--;
	}
	return iCurrentPos;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindRight(int iCurrentPos)
{
	if (CanGoRight(iCurrentPos))
	{
		iCurrentPos++;
	}
	return iCurrentPos;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindUp(int iCurrentPos)
{
	int	iStartOfThisLine;
	int iStartOfPrevLine;

	iStartOfThisLine = FindStartOfLine(iCurrentPos);
	if (iStartOfThisLine == 0)
	{
		return 0;
	}
	else
	{
		iStartOfPrevLine = FindStartOfLine(iStartOfThisLine-1);
		return FindPositionAlongLine(iStartOfPrevLine, miUpDownCharCount);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindDown(int iCurrentPos)
{
	int	iEndOfThisLine;
	int iStartOfNextLine;

	iEndOfThisLine = FindEndOfLine(iCurrentPos);
	if (iEndOfThisLine == mszText.Length())
	{
		return iEndOfThisLine;
	}
	else
	{
		iStartOfNextLine = iEndOfThisLine+1;
		return FindPositionAlongLine(iStartOfNextLine, miUpDownCharCount);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindHome(int iCurrentPos)
{
	return FindStartOfLine(iCurrentPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindEnd(int iCurrentPos)
{
	return FindEndOfLine(iCurrentPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindDocumentHome(void)
{
	return 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindDocumentEnd(void)
{
	return mszText.Length();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindPageUp(int iCurrentPos)
{
	int	i;
	int	iLineStart;

	iLineStart = FindStartOfLine(iCurrentPos);
	if (iLineStart == 0)
	{
		return iCurrentPos;
	}

	for (i = 0; i < miPageLength; i++)
	{
		iLineStart = FindStartOfLine(iLineStart-1);
		if (iLineStart == 0)
		{
			break;
		}
	}
	return FindPositionAlongLine(iLineStart, miUpDownCharCount);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindPageDown(int iCurrentPos)
{
	int	iLineEnd;
	int	i;
	int	iLineStart;

	iLineEnd = FindEndOfLine(iCurrentPos);
	if (iLineEnd == mszText.Length())
	{
		return iCurrentPos;
	}

	for (i = 0; i < miPageLength; i++)
	{
		iLineEnd = FindEndOfLine(iLineEnd+1);
		if (iLineEnd == mszText.Length())
		{
			break;
		}
	}
	iLineStart = FindStartOfLine(iLineEnd);
	return FindPositionAlongLine(iLineStart, miUpDownCharCount);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindWordLeft(int iPos)
{
	char c;

	if (!CanGoLeft(iPos))
	{
		return iPos;
	}

	iPos--;
	c = mszText.GetChar(iPos);
	if (IsWhiteSpace(c))
	{
		for (;;)
		{
			if (CanGoLeft(iPos))
			{
				iPos--;
				c = mszText.GetChar(iPos);
				if (!IsWhiteSpace(c))
				{
					return iPos+1;
				}
			}
			else
			{
				return iPos;
			}
		}
	}
	else if (IsNormalChar(c))
	{
		for (;;)
		{
			if (CanGoLeft(iPos))
			{
				iPos--;
				c = mszText.GetChar(iPos);
				if (!IsNormalChar(c))
				{
					return iPos+1;
				}
			}
			else
			{
				return iPos;
			}
		}
	}
	else
	{
		return iPos;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPlainTextEditor::CanGoLeft(int iPos)
{
	return (iPos > 0);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPlainTextEditor::CanGoRight(int iPos)
{
	return (iPos < mszText.Length());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPlainTextEditor::IsWhiteSpace(char cCurrent)
{
	return ((cCurrent == ' ') || (cCurrent == '\n') || (cCurrent == '\t'));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPlainTextEditor::IsNormalChar(char cCurrent)
{
	return (((cCurrent >= 'a') && (cCurrent <= 'z')) || 
			((cCurrent >= 'A') && (cCurrent <= 'Z')) ||
			((cCurrent >= '0') && (cCurrent <= '9')) ||
			 (cCurrent == '_'));
}	


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindWordRight(int iPos)
{
	char c;

	c = mszText.GetChar(iPos);
	if (IsWhiteSpace(c))
	{
		for (;;)
		{
			if (CanGoRight(iPos))
			{
				iPos++;
				c = mszText.GetChar(iPos);
				if (!IsWhiteSpace(c))
				{
					return iPos;
				}
			}
			else
			{
				return iPos;
			}
		}
	}
	else if (IsNormalChar(c))
	{
		for (;;)
		{
			if (CanGoRight(iPos))
			{
				iPos++;
				c = mszText.GetChar(iPos);
				if (!IsNormalChar(c))
				{
					return iPos;
				}
			}
			else
			{
				return iPos;
			}
		}
	}
	else
	{
		if (CanGoRight(iPos))
		{
			iPos++;
		}
		return iPos;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CPlainTextEditor::IsSelected(void)
{
	if ((miSelectionAnchor == -1) && (miSelectionFloating == -1))
	{
		return FALSE;
	}
	return TRUE;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CPlainTextEditor::Text(void)
{
	return mszText.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::Length(void)
{
	return mszText.Length();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SetPageLength(int iPageLength)
{
	miPageLength = iPageLength;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SetPosition(int iPosition)
{
	ClearSelection();
	ResetUpDown();
	miEditPos = iPosition;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindStartOfLine(int iPos)
{
	char	c;

	if (iPos == 0)
	{
		return 0;
	}

	c = mszText.GetChar(iPos);
	iPos--;
	for (;;)
	{
		c = mszText.GetChar(iPos);
		if (iPos == 0)
		{
			return iPos;
		}
		else if (c == '\n')
		{
			return iPos+1;
		}
		iPos--;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindEndOfLine(int iPos)
{
	char	c;

	if (iPos == mszText.Length())
	{
		return iPos;
	}

	c = mszText.GetChar(iPos);
	for (;;)
	{
		c = mszText.GetChar(iPos);
		if (iPos == mszText.Length())
		{
			return iPos;
		}
		else if (c == '\n')
		{
			return iPos;
		}
		iPos++;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::GetCharCountAlongLine(int iPos)
{
	int		iStartOfLine;
	int		i;
	char	c;
	int		iCount;

	iStartOfLine = FindStartOfLine(iPos);
	if (iStartOfLine == iPos)
	{
		return 0;
	}

	iCount = 0;
	for (i = iStartOfLine; i < iPos; i++)
	{
		c = mszText.GetChar(i);
		iCount = CountChar(iCount, c);
	}
	return iCount;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
SInt2 CPlainTextEditor::GetEditPosition(void)
{
	return GetPosition(miEditPos);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
SInt2 CPlainTextEditor::GetPosition(int iPosition)
{
	char	c;
	SInt2	sPos;

	sPos.x = 0;
	sPos.y = 0;

	for (int i = 0; i < iPosition; i++)
	{
		c = mszText.GetChar(i);
		if (c == '\0')
		{
			break;
		}
		else if (c == '\n')
		{
			sPos.y++;
			sPos.x = 0;
		}
		else
		{
			sPos.x++;
		}
	}
	return sPos;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::FindPositionAlongLine(int iStartOfLine, int iCharCount)
{
	int		iPos;
	char	c;
	int		iCountedSoFar;

	if (iCharCount == 0)
	{
		return iStartOfLine;
	}

	iPos = iStartOfLine;
	iCountedSoFar = 0;
	for (;;)
	{
		c = mszText.GetChar(iPos);
		if ((c == '\n') || (c == '\0'))
		{
			return iPos;
		}
		else if (iCountedSoFar == iCharCount)
		{
			return iPos;
		}
		else if (iCountedSoFar > iCharCount)
		{
			return iPos-1;
		}

		iCountedSoFar = CountChar(iCountedSoFar, c);
		iPos++;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::CountChar(int iCharCount, char c)
{
	int		iTabMod;

	if (c == '\t')
	{
		iTabMod = iCharCount % miTabWidth;
		if (iTabMod == 0)
		{
			iTabMod = 4;
		}
		else
		{
			iTabMod = 4 - iTabMod;
		}
		iCharCount += iTabMod;
	}
	else
	{
		iCharCount++;
	}
	return iCharCount;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::ResetUpDown(void)
{
	miUpDownCharCount = -1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::UpdateUpDown(int iPos)
{
	if (miUpDownCharCount == -1)
	{
		miUpDownCharCount = GetCharCountAlongLine(iPos);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::SelectAll(void)
{
	miSelectionAnchor = FindDocumentHome();
	miEditPos = FindDocumentEnd();
	miSelectionFloating = miEditPos;
	ResetUpDown();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::ClearSelection(void)
{
	miSelectionAnchor = -1;
	miSelectionFloating = -1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::FixSelection(void)
{
	if (IsSelected())
	{
		if (miSelectionFloating == miSelectionAnchor)
		{
			ClearSelection();
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::BeginSelection(void)
{
	if (!IsSelected())
	{
		miSelectionAnchor = miEditPos;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::EndSelection(void)
{
	miSelectionFloating = miEditPos;
	FixSelection();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CPlainTextEditor::DeleteSelection(void)
{
	int	iStart;
	int iEnd;

	if (IsSelected())
	{
		if (miSelectionAnchor < miSelectionFloating)
		{
			iStart = miSelectionAnchor;
			iEnd = miSelectionFloating;
		}
		else
		{
			iStart = miSelectionFloating;
			iEnd = miSelectionAnchor;
		}
		mszText.Remove(iStart, iEnd);
		ClearSelection();
		return iStart;
	}
	else
	{
		return -1;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlainTextEditor::OverwriteSelection(char* szText)
{
	miEditPos = DeleteSelection();
	Paste(szText);
}

