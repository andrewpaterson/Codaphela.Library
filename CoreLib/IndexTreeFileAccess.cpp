#include "IndexTreeFileAccess.h"
#include "IndexTreeFileIterator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Init(CIndexTreeFile* pcTree)
{
	CIndexTreeAccess::Init();
	mpcTree = pcTree;
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Kill(void)
{
	mpcTree = NULL;
	return CIndexTreeAccess::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeFileAccess::Dump(void)
{
	mpcTree->Dump();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Flush(void)
{
	if (!mpcTree->IsWriteThrough())
	{
		return mpcTree->Flush();
	}
	else
	{
		return TRUE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int64	CIndexTreeFileAccess::NumElements(void)
{
	return mpcTree->NumElements();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::ValidateIndex(void)
{
	if (mpcTree->IsFlushed())
	{
		return mpcTree->ValidateIndexTree();
	}
	else
	{
		return TRUE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Put(void* pvKey, int iKeySize, void* pvData, int iDataSize)
{
	return mpcTree->Put(pvKey, iKeySize, pvData, iDataSize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Get(void* pvKey, int iKeySize, void* pvData, int* piDataSize)
{
	int		iDataSize;
	BOOL	bResult;

	bResult = mpcTree->Get(pvKey, iKeySize, pvData, &iDataSize);

	SafeAssign(piDataSize, iDataSize);
	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Remove(void* pvKey, int iKeySize)
{
	return mpcTree->Remove(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CIndexTreeFileAccess::DataSize(void* pvKey, int iKeySize)
{
	return mpcTree->GetDataSize(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Has(void* pvKey, int iKeySize)
{
	return mpcTree->HasKey(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Flush(void* pvKey, int iKeySize)
{
	return mpcTree->Flush(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeFileAccess::Evict(void* pvKey, int iKeySize)
{
	return mpcTree->Evict(pvKey, iKeySize);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CIndexTreeIterator* CIndexTreeFileAccess::CreateIterator(void)
{
	CIndexTreeFileIterator* pcIter;

	pcIter = NewMalloc<CIndexTreeFileIterator>();
	pcIter->Init(mpcTree);

	return pcIter;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeFileAccess::FreeIterator(CIndexTreeIterator* pcIter)
{
	SafeKill(pcIter);
}

