#include "IndexTreeEvictedNodeList.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeEvictedNodeList::Init(void)
{
	mcKeys.Init();
	mcDatas.Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeEvictedNodeList::Kill(void)
{
	mcDatas.Kill();
	mcKeys.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CIndexTreeEvictedNodeList::NodeEvicted(CIndexTreeFile* pcIndexTree, unsigned char* pvKey, int iKeySize, void* pvData, int iDataSize)
{
	mcKeys.Add(pvKey, iKeySize + 1);
	mcDatas.Add(pvData, iDataSize);
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CIndexTreeEvictedNodeList::NumElements(void)
{
	return mcKeys.NumElements();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
unsigned char* CIndexTreeEvictedNodeList::GetKey(int iIndex, int* piKeySize)
{
	if (piKeySize)
	{
		*piKeySize = mcKeys.GetSize(iIndex);
	}
	return (unsigned char*)mcKeys.Get(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void* CIndexTreeEvictedNodeList::GetData(int iIndex, int* piDataSize)
{
	if (piDataSize)
	{
		*piDataSize = mcDatas.GetSize(iIndex);
	}
	return mcDatas.Get(iIndex);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CIndexTreeEvictedNodeList::Clear(void)
{
	mcKeys.ReInit();
	mcDatas.ReInit();
}

