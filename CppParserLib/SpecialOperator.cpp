#include "SpecialOperator.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CSpecialOperator::Init(char* pcName, EPreprocessorSpecialOperator eType, int64 lliID)
{
	mszName.Init(pcName);
	meType = eType;
	mlliID = lliID;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CSpecialOperator::Kill(void)
{
	mszName.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CSpecialOperator::Equals(CSpecialOperator* pcOther)
{
	if (pcOther)
	{
		return meType == pcOther->meType;
	}
	else
	{
		return FALSE;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CSpecialOperator::GetName(void)
{
	return mszName.Text();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
EPreprocessorSpecialOperator CSpecialOperator::GetType(void)
{
	return meType;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CSpecialOperator::Dump(void)
{
	CChars	sz;

	sz.Init();
	sz.Append(mszName);
	sz.Append(" -> ");
	
	switch (meType)
	{
	case PPSO_Defined:
		sz.Append("PPSO_Defined");
		break;
	case PPSO_HasAttribute:
		sz.Append("PPSO_HasAttribute");
		break;
	case PPSO_HasCppAttribute:
		sz.Append("PPSO_HasCppAttribute");
		break;
	case PPSO_HasBuiltIn:
		sz.Append("PPSO_HasBuiltIn");
		break;
	case PPSO_HasInclude:
		sz.Append("PPSO_HasInclude");
		break;
	default:
		sz.Append("Unknown");
		break;
	}
	sz.DumpKill();
}

