#include<thread>
#include "InterProcessDone.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Init(char* szSharedMemoryName)
{
	mcSharedMemory.Init(szSharedMemoryName);
	mpsDone = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Init(char* szSharedMemoryName, char* szSharedMemoryNamePostfix)
{
	CChars	sz;

	sz.Init(szSharedMemoryName)->Append(szSharedMemoryNamePostfix);
	Init(sz.Text());
	sz.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Kill(void)
{
	mcSharedMemory.Close();
	mcSharedMemory.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Start(void)
{
	mpsDone = (SInterProcessDone*)mcSharedMemory.Create(sizeof(SInterProcessDone));
	mpsDone->iDone = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Touch(void)
{
	mpsDone = (SInterProcessDone*)mcSharedMemory.Open();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Wait(int iCount)
{
	while (mpsDone->iDone < iCount)
	{
		std::this_thread::yield();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Stop(void)
{
	mpsDone->iDone++;
}

