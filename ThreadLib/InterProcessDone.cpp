#include<thread>
#include "InterProcessDone.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Init(char* szSharedMemoryName)
{
	CInterProcessFlow::Init(szSharedMemoryName);
	mpsDone = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Init(char* szSharedMemoryName, char* szSharedMemoryNamePostfix)
{
	CInterProcessFlow::Init(szSharedMemoryName, szSharedMemoryNamePostfix);
	mpsDone = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Kill(void)
{
	CInterProcessFlow::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Start(void)
{
	mpsDone = (SInterProcessDone*)mcSharedMemory.Create(sizeof(SInterProcessDone));
	mpsDone->iDone = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Open(void)
{
	mpsDone = (SInterProcessDone*)mcSharedMemory.Open();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Wait(int iCount)
{
	while (!IsDone(iCount))
	{
		std::this_thread::yield();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CInterProcessDone::IsDone(int iCount)
{
	return mpsDone->iDone >= iCount;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessDone::Stop(void)
{
	mpsDone->iDone++;
}

