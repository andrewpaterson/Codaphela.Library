#include<thread>
#include "InterProcessHold.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Init(char* szSharedMemoryName)
{
	CInterProcessFlow::Init(szSharedMemoryName);
	mpsWait = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Init(char* szSharedMemoryName, char* szSharedMemoryNamePostfix)
{
	CInterProcessFlow::Init(szSharedMemoryName, szSharedMemoryNamePostfix);
	mpsWait = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Kill(void)
{
	CInterProcessFlow::Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Start(void)
{
	mpsWait = (SInterProcessWait*)mcSharedMemory.Create(sizeof(SInterProcessWait));
	mpsWait->iWait = TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Touch(void)
{
	mpsWait = (SInterProcessWait*)mcSharedMemory.Open();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Wait(void)
{
	while (mpsWait->iWait)
	{
		std::this_thread::yield();
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CInterProcessHold::Stop(void)
{
	mpsWait->iWait = FALSE;
}

