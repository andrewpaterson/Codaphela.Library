#include "BaseLib/DebugOutput.h"
#include "StandAloneThreadStarter.h"
#include "Thread.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CThread::CThread()
{
	mapcNotifiers.Init();
	mpcStarter = &gcStandAloneThreadStarter;
	meState = TS_Waiting;
	miThreadId = 0;
	mpstdThread = NULL;
	mbDelete = false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CThread::CThread(CThreadStarter* pcStarter, CThreadStateNotifer* pcNotify)
{
	mapcNotifiers.Init();
	mapcNotifiers.AddPtr(pcNotify);
	mpcStarter = pcStarter;
	meState = TS_Waiting;
	miThreadId = 0;
	mpstdThread = NULL;
	mbDelete = false;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::Init(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::Kill(void)
{
	meState = TS_Killed;
	if (mbDelete)
	{
		if (mpstdThread->joinable())
		{
			mpstdThread->join();
		}
		delete mpstdThread;
	}
	miThreadId = 0;
	mapcNotifiers.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::Start(void)
{
	mpcStarter->StartThread(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::SetThread(std::thread* pstdThread)
{
	mpstdThread = pstdThread;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::Start(int iThreadId, bool bDelete)
{
	miThreadId = iThreadId;
	mbDelete = bDelete;
	ChangeState(TS_Running);
	Run();
	ChangeState(TS_Stopped);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CThread::IsDone(void)
{
	return meState == TS_Stopped;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CThread::IsRunning(void)
{
	return meState == TS_Running;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CThread::GetThreadId(void)
{
	return miThreadId;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::AddNotifier(CThreadStateNotifer* pcNotify)
{
	mapcNotifiers.AddPtr(pcNotify);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::TryStop(void)
{
	if (meState == TS_Running)
	{
		ChangeState(TS_Stopping);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CThread::ChangeState(EThreadState eState)
{
	int						i;
	CThreadStateNotifer*	pcNotifier;

	meState = eState;
	for (i = mapcNotifiers.NumElements() -1; i >= 0; i--)
	{
		pcNotifier = (CThreadStateNotifer*)mapcNotifiers.GetPtr(i);
		pcNotifier->ThreadStateChanged(this, eState);
	}
}

