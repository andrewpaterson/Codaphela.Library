#include "SafeLinkedListBlock.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::Init(void)
{
	m.lock();
	c.Init();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::Init(CMallocator* pcMalloc)
{
	m.lock();
	c.Init(pcMalloc);
	m.unlock();

}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::Kill(void)
{
	m.lock();
	c.Kill();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::InsertAfterTail(unsigned int uiDataSize)
{
	void* pv;

	m.lock();
	pv = c.InsertAfterTail(uiDataSize);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::InsertBeforeHead(unsigned int uiDataSize)
{
	void* pv;

	m.lock();
	pv = c.InsertBeforeHead(uiDataSize);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::InsertBeforeNode(unsigned int uiDataSize, void* psPos)
{
	void* pv;

	m.lock();
	pv = c.InsertBeforeNode(uiDataSize, psPos);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::InsertAfterNode(unsigned int uiDataSize, void* psPos)
{
	void* pv;

	m.lock();
	pv = c.InsertAfterNode(uiDataSize, psPos);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::Add(unsigned int uiDataSize)
{
	void* pv;

	m.lock();
	pv = c.Add(uiDataSize);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeLinkedListBlock::ByteSize(void)
{
	int	iByteSize;

	m.lock();
	iByteSize = c.ByteSize();
	m.unlock();

	return iByteSize;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeLinkedListBlock::Write(CFileWriter* pcFileWriter)
{
	bool	bResult;

	m.lock();
	bResult = c.Write(pcFileWriter);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeLinkedListBlock::Read(CFileReader* pcFileReader)
{
	bool bResult;

	m.lock();
	bResult = c.Read(pcFileReader);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::InsertDetachedAfterTail(void* pvData)
{
	m.lock();
	c.InsertDetachedAfterTail(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::Detach(void* pvData)
{
	m.lock();
	c.Detach(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::DetachHead(void)
{
	void*	pv;
	m.lock();
	pv = c.GetHead();
	c.Detach(pv);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::DetachTail(void)
{
	void* pv;
	m.lock();
	pv = c.GetTail();
	c.Detach(pv);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::GetHead(void)
{
	void* pv;

	m.lock();
	pv = c.GetHead();
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::GetTail(void)
{
	void* pv;

	m.lock();
	pv = c.GetTail();
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::GetNext(void* pvData)
{
	void* pv;

	m.lock();
	pv = c.GetNext(pvData);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::GetPrev(void* pvData)
{
	void* pv;

	m.lock();
	pv = c.GetPrev(pvData);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::RemoveTail(void)
{
	m.lock();
	c.RemoveTail();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::Remove(void* pvData)
{
	m.lock();
	c.Remove(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::MoveToHead(void* pvData)
{
	m.lock();
	c.MoveToHead(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::MoveToTTail(void* pvData)
{
	m.lock();
	c.MoveToTTail(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeLinkedListBlock::NumElements(void)
{
	int	iNumElements;

	m.lock();
	iNumElements = c.NumElements();
	m.unlock();

	return iNumElements;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::FreeDetached(void* pvData)
{
	c.FreeDetached(pvData);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void* CSafeLinkedListBlock::Get(int iNum)
{
	void*	pv;

	m.lock();
	pv = c.Get(iNum);
	m.unlock();

	return pv;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeLinkedListBlock::IndexOf(void* pvData)
{
	int		iIndex;

	m.lock();
	iIndex = c.IndexOf(pvData);
	m.unlock();

	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeLinkedListBlock::IsInList(void* pvData)
{
	bool bResult;

	m.lock();
	bResult = c.IsInList(pvData);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::BubbleSort(int(*fCompare)(const void*, const void*))
{
	m.lock();
	c.BubbleSort(fCompare);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeLinkedListBlock::InsertDetachedIntoSorted(int(*fCompare)(const void*, const void*), void* pvData)
{
	m.lock();
	c.InsertDetachedIntoSorted(fCompare, pvData);
	m.unlock();
}

