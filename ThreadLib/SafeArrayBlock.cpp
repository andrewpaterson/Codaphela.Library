#include "SafeArrayBlock.h"


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Init(int iElementSize)
{
	m.lock();
	c.Init(iElementSize);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Init(CMallocator* pcMalloc, int iElementSize)
{
	m.lock();
	c.Init(pcMalloc, iElementSize);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Init(CMallocator* pcMalloc, int iElementSize, int iChunkSize)
{
	m.lock();
	c.Init(pcMalloc, iElementSize, iChunkSize);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::ReInit(void)
{
	m.lock();
	c.ReInit();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void  CSafeArrayBlock::Finalise(void)
{
	m.lock();
	c.Finalise();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Kill(void)
{
	m.lock();
	c.Kill();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::NumElements(void)
{
	return c.NumElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::IsEmpty(void)
{
	return c.IsEmpty();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::IsNotEmpty(void)
{
	return c.IsNotEmpty();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::AllocatedElements(void)
{
	return c.AllocatedElements();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::ElementSize(void)
{
	return c.ElementSize();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Add(void* pvData)
{
	m.lock();
	c.Add(pvData);
	m.unlock();

}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::AddGetIndex(void* pvData)
{
	int iIndex;

	m.lock();
	iIndex = c.AddGetIndex(pvData);
	m.unlock();
	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::AddIfUnique(void* pvData)
{
	int iIndex;

	m.lock();
	iIndex = c.AddIfUnique(pvData);
	m.unlock();
	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::AddIfUniqueKey(void* pvData, int iKeyOffset, int iKeySize)
{
	int iIndex;

	m.lock();
	iIndex = c.AddIfUniqueKey(pvData, iKeyOffset, iKeySize);
	m.unlock();
	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Copy(CArrayBlock* pcTemplateArray)
{
	m.lock();
	c.Copy(pcTemplateArray);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Copy(CSafeArrayBlock* pcTemplateArray)
{
	CStackMemory<>	cTemp;
	int				iNumElements;

	iNumElements = pcTemplateArray->Copy(&cTemp);

	m.lock();
	c.Resize(iNumElements);

	memcpy(c.GetData(), cTemp.GetStackData(), iNumElements * c.ElementSize());
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::Copy(CStackMemory<>* pcTemp)
{
	size_t	iByteSize;
	void*	pv;
	int		iUsedElements;

	m.lock();
	iByteSize = c.ByteSize();
	iUsedElements = c.NumElements();
	pv = pcTemp->Init(iByteSize);
	memcpy(pv, c.GetData(), iByteSize);
	m.unlock();
	return iUsedElements;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Get(int iIndex, void* pvDest)
{
	void*	pv;

	m.lock();
	pv = c.SafeGet(iIndex);
	return MemcpyDestAndUnlock(pv, pvDest);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Tail(void* pvDest)
{
	void* pv;

	m.lock();
	pv = c.Tail();
	return MemcpyDestAndUnlock(pv, pvDest);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::InsertAt(void* pvData, int iIndex)
{
	m.lock();
	c.InsertAt(pvData, iIndex);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::InsertIntoSorted(int(*fCompare)(const void*, const void*), void* pvData, bool bOverwriteExisting)
{
	int iIndex;

	m.lock();
	iIndex = c.InsertIntoSorted(fCompare, pvData, bOverwriteExisting);
	m.unlock();

	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Pop(void* pvDest)
{
	bool	bResult;

	m.lock();
	bResult = c.Pop(pvDest);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Pop(void)
{
	bool	bResult;

	m.lock();
	bResult = c.Pop();
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Push(void* pvData)
{
	m.lock();
	c.Push(pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::PopFirst(void* pvDest)
{
	bool	bResult;

	m.lock();
	bResult = c.PopFirst(pvDest);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::PopFirst(void)
{
	bool	bResult;

	m.lock();
	bResult = c.PopFirst();
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::Resize(int iNumElements)
{
	int	iOldUsedElements;

	m.lock();
	iOldUsedElements = c.Resize(iNumElements);
	m.unlock();

	return iOldUsedElements;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::BubbleSort(int(*fCompare)(const void*, const void*))
{
	m.lock();
	c.BubbleSort(fCompare);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::QuickSort(int(*fCompare)(const void*, const void*))
{
	m.lock();
	c.QuickSort(fCompare);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Reverse(void)
{
	m.lock();
	c.Reverse();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Contains(void* pvData)
{
	bool	bResult;

	m.lock();
	bResult = c.Contains(pvData);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::Find(void* pvData)
{
	int		iIndex;

	m.lock();
	iIndex = c.Find(pvData);
	m.unlock();

	return iIndex;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::FindInSorted(void* pvData, int(*fCompare)(const void*, const void*), int* piIndex)
{
	bool bResult;

	m.lock();
	bResult = c.FindInSorted(pvData, fCompare, piIndex);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::RemoveAt(int iIndex, int bPreserveOrder)
{
	m.lock();
	c.RemoveAt(iIndex, bPreserveOrder);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::RemoveRange(int iStartIndex, int iEndIndexExclusive, bool bPreserveOrder)
{
	m.lock();
	c.RemoveRange(iStartIndex, iEndIndexExclusive, bPreserveOrder);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::RemoveTail(void)
{
	bool	bResult;

	m.lock();
	bResult = c.RemoveTail();
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Set(int iIndex, void* pvData)
{
	m.lock();
	c.Set(iIndex, pvData);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Swap(int iIndex1, int iIndex2)
{
	m.lock();
	c.Swap(iIndex1, iIndex2);
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
void CSafeArrayBlock::Zero(void)
{
	m.lock();
	c.Zero();
	m.unlock();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::ByteSize(void)
{
	return c.ByteSize();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::ChunkSize(void)
{
	return c.ChunkSize();
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
int CSafeArrayBlock::SetUsedElements(int iNumElements)
{
	int iOldUsedElements;

	m.lock();
	iOldUsedElements = c.SetUsedElements(iNumElements);
	m.unlock();

	return iOldUsedElements;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::SetChunkSize(int iChunkSize)
{
	bool	bResult;

	m.lock();
	bResult = c.SetChunkSize(iChunkSize);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Write(CFileWriter* pcFileWriter)
{
	bool	bResult;

	m.lock();
	bResult = c.Write(pcFileWriter);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::Read(CFileReader* pcFileReader)
{
	bool	bResult;

	m.lock();
	bResult = c.Read(pcFileReader);
	m.unlock();

	return bResult;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
bool CSafeArrayBlock::MemcpyDestAndUnlock(void* pvSource, void* pvDest)
{
	if (pvSource != NULL)
	{
		memcpy(pvDest, pvSource, c.ElementSize());
		m.unlock();
		return true;
	}
	else
	{
		m.unlock();
		return false;
	}
}

